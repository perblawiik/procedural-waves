{"ast":null,"code":"class VertexShader {\n  constructor() {\n    this.file = [\"precision mediump float;\", \"\", // Attribute locations\n    \"attribute vec3 vertPosition;\", \"attribute vec3 vertNormal;\", \"attribute vec2 vertTexCoord;\", \"\", // Time variable\n    \"uniform float time;\", \"\", // Transformation matrices\n    \"uniform mat4 cameraView;\", \"uniform mat4 modelView;\", \"uniform mat4 perspective;\", \"\", \"uniform vec3 vertColor;\", //\"uniform vec3 vertLightDirection;\",\n    \"\", \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"varying vec4 FragPosLightSpace;\", \"\", \"void main() {\", \"\tfragColor = vertColor;\", \"   fragViewDirection = vec3(cameraViewMatrix*vec4(0.0, 0.0, 0.0, 1.0));\", // Set the view direction the same as the camera\n    \"   Normal = mat3(worldViewMatrix)*vertNormal;\", // To avoid translation of the normals use only 3x3 from our 4x4 transformation matrix\n    \"\", // Final transformation ( Perspective multiplied with the model view )\n    \"   mat4 T = perspective * cameraView * modelView;\", // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\n    \"   gl_Position = T * vec4(aPosition, 1.0);\", \"\", \"   Normal = normalize(mat3(modelView)*aNormal);\", \"   TexCoords = aTexCoords;\", \"   FragPosition = vec3(modelView * vec4(aPosition, 1.0));\", \"   FragPosLightSpace = lightSpaceMatrix * vec4(FragPosition, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default VertexShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\VertexShader.js"],"names":["VertexShader","constructor","file","join"],"mappings":"AAEA,MAAMA,YAAN,CAAmB;AAEfC,EAAAA,WAAW,GAAG;AAEV,SAAKC,IAAL,GAAY,CACR,0BADQ,EAER,EAFQ,EAGR;AACA,kCAJQ,EAKR,4BALQ,EAMR,8BANQ,EAOR,EAPQ,EAQR;AACA,yBATQ,EAUR,EAVQ,EAWR;AACA,8BAZQ,EAaR,yBAbQ,EAcR,2BAdQ,EAeR,EAfQ,EAgBR,yBAhBQ,EAiBR;AACA,MAlBQ,EAmBR,yBAnBQ,EAoBR,sBApBQ,EAqBR,4BArBQ,EAsBR,iCAtBQ,EAuBR,EAvBQ,EAwBR,eAxBQ,EAyBR,yBAzBQ,EA0BR,yEA1BQ,EA0BmE;AAC3E,mDA3BQ,EA2ByC;AACjD,MA5BQ,EA6BR;AACA,uDA9BQ,EA+BR;AACA,gDAhCQ,EAiCR,EAjCQ,EAkCR,iDAlCQ,EAmCR,4BAnCQ,EAoCR,2DApCQ,EAqCR,oEArCQ,EAsCR,GAtCQ,EAuCVC,IAvCU,CAuCL,IAvCK,CAAZ;AAwCH;;AA5Cc;;AA+CnB,eAAeH,YAAf","sourcesContent":["\r\n\r\nclass VertexShader {\r\n\r\n    constructor() {\r\n\r\n        this.file = [\r\n            \"precision mediump float;\",\r\n            \"\",\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n            \"\",\r\n            // Time variable\r\n            \"uniform float time;\",\r\n            \"\",\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n            \"\",\r\n            \"uniform vec3 vertColor;\",\r\n            //\"uniform vec3 vertLightDirection;\",\r\n            \"\",\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"varying vec4 FragPosLightSpace;\",\r\n            \"\",\r\n            \"void main() {\",\r\n            \"\tfragColor = vertColor;\",\r\n            \"   fragViewDirection = vec3(cameraViewMatrix*vec4(0.0, 0.0, 0.0, 1.0));\", // Set the view direction the same as the camera\r\n            \"   Normal = mat3(worldViewMatrix)*vertNormal;\", // To avoid translation of the normals use only 3x3 from our 4x4 transformation matrix\r\n            \"\",\r\n            // Final transformation ( Perspective multiplied with the model view )\r\n            \"   mat4 T = perspective * cameraView * modelView;\",\r\n            // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\r\n            \"   gl_Position = T * vec4(aPosition, 1.0);\",\r\n            \"\",\r\n            \"   Normal = normalize(mat3(modelView)*aNormal);\",\r\n            \"   TexCoords = aTexCoords;\",\r\n            \"   FragPosition = vec3(modelView * vec4(aPosition, 1.0));\",\r\n            \"   FragPosLightSpace = lightSpaceMatrix * vec4(FragPosition, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default VertexShader;"]},"metadata":{},"sourceType":"module"}
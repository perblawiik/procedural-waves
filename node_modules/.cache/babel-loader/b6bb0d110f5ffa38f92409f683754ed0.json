{"ast":null,"code":"import MouseEvent from \"./events/MouseEvent\";\nimport Raycast from \"./Raycast\";\n\nclass GameEditor {\n  constructor(gl, shaders, camera, canvas, projectionMatrix) {\n    this.gl = gl;\n    this.shaders = shaders;\n    this.camera = camera;\n    this.canvas = canvas;\n    this.projectionMatrix = projectionMatrix;\n  }\n\n  processUserInput() {\n    // Handle camera navigation\n    this.processCameraNavigation(); // If left mouse button is pressed, cast a ray from the mouse cursor position\n\n    if (MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\n      // Create a ray from the camera\n      let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height); //// Test ray intersections ////\n\n      let objectFound = Raycast.findObjectIntersection(ray);\n\n      if (objectFound) {\n        if (this.selectedObject) this.selectedObject.setActive(false);\n        objectFound.setActive(true);\n        this.selectedObject = objectFound;\n      }\n    }\n  }\n\n  processCameraNavigation() {\n    // Zoom camera view in and out\n    if (MouseEvent.isPressed.middleButton) {\n      this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX) / 20.0]);\n    } // Pan the camera view\n    else if (MouseEvent.isPressed.leftButton) {\n        this.camera.translate([-MouseEvent.movementX / 40.0, MouseEvent.movementY / 40.0, 0.0]);\n      } // Rotate the camera view\n      else if (MouseEvent.isPressed.rightButton) {\n          this.camera.rotate([-MouseEvent.movementY / 10.0, -MouseEvent.movementX / 10.0, 0.0]);\n        }\n\n    if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\n      if (MouseEvent.wheelDelta > 0.0) {\n        this.camera.translate([0.0, 0.0, 0.5]);\n      } else this.camera.translate([0.0, 0.0, -0.5]);\n    }\n  }\n\n}\n\nexport default GameEditor;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\GameEditor.js"],"names":["MouseEvent","Raycast","GameEditor","constructor","gl","shaders","camera","canvas","projectionMatrix","processUserInput","processCameraNavigation","mouseDown","isPressed","leftButton","ray","raycastFromMouseCursor","offsetX","offsetY","transform","width","height","objectFound","findObjectIntersection","selectedObject","setActive","middleButton","translate","movementY","movementX","rightButton","rotate","Math","abs","wheelDelta"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,qBAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,EAAD,EAAKC,OAAL,EAAcC,MAAd,EAAsBC,MAAtB,EAA8BC,gBAA9B,EAAgD;AACvD,SAAKJ,EAAL,GAAUA,EAAV;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACH;;AAEDC,EAAAA,gBAAgB,GAAG;AACf;AACA,SAAKC,uBAAL,GAFe,CAIf;;AACA,QAAGV,UAAU,CAACW,SAAX,IAAwBX,UAAU,CAACY,SAAX,CAAqBC,UAAhD,EAA4D;AACxD;AACA,UAAIC,GAAG,GAAGb,OAAO,CAACc,sBAAR,CAA+Bf,UAAU,CAACgB,OAA1C,EAAmDhB,UAAU,CAACiB,OAA9D,EAAuE,KAAKX,MAAL,CAAYY,SAAnF,EAA8F,KAAKV,gBAAnG,EAAqH,KAAKD,MAAL,CAAYY,KAAjI,EAAwI,KAAKZ,MAAL,CAAYa,MAApJ,CAAV,CAFwD,CAIxD;;AACA,UAAIC,WAAW,GAAGpB,OAAO,CAACqB,sBAAR,CAA+BR,GAA/B,CAAlB;;AACA,UAAIO,WAAJ,EAAiB;AACb,YAAI,KAAKE,cAAT,EACI,KAAKA,cAAL,CAAoBC,SAApB,CAA8B,KAA9B;AAEJH,QAAAA,WAAW,CAACG,SAAZ,CAAsB,IAAtB;AACA,aAAKD,cAAL,GAAsBF,WAAtB;AACH;AACJ;AACJ;;AAEDX,EAAAA,uBAAuB,GAAI;AACvB;AACA,QAAIV,UAAU,CAACY,SAAX,CAAqBa,YAAzB,EAAuC;AACnC,WAAKnB,MAAL,CAAYoB,SAAZ,CAAsB,CAAC,GAAD,EAAM,GAAN,EAAW,EAAE1B,UAAU,CAAC2B,SAAX,GAAuB3B,UAAU,CAAC4B,SAApC,IAA+C,IAA1D,CAAtB;AACH,KAFD,CAEE;AAFF,SAGK,IAAG5B,UAAU,CAACY,SAAX,CAAqBC,UAAxB,EAAoC;AACrC,aAAKP,MAAL,CAAYoB,SAAZ,CAAsB,CAAC,CAAC1B,UAAU,CAAC4B,SAAZ,GAAsB,IAAvB,EAA6B5B,UAAU,CAAC2B,SAAX,GAAqB,IAAlD,EAAwD,GAAxD,CAAtB;AACH,OAFI,CAEH;AAFG,WAGA,IAAI3B,UAAU,CAACY,SAAX,CAAqBiB,WAAzB,EAAsC;AACvC,eAAKvB,MAAL,CAAYwB,MAAZ,CAAmB,CAAC,CAAC9B,UAAU,CAAC2B,SAAZ,GAAsB,IAAvB,EAA6B,CAAC3B,UAAU,CAAC4B,SAAZ,GAAsB,IAAnD,EAAyD,GAAzD,CAAnB;AACH;;AAED,QAAIG,IAAI,CAACC,GAAL,CAAShC,UAAU,CAACiC,UAApB,IAAkC,IAAtC,EAA4C;AACxC,UAAIjC,UAAU,CAACiC,UAAX,GAAwB,GAA5B,EAAiC;AAC7B,aAAK3B,MAAL,CAAYoB,SAAZ,CAAsB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAtB;AACH,OAFD,MAII,KAAKpB,MAAL,CAAYoB,SAAZ,CAAsB,CAAC,GAAD,EAAM,GAAN,EAAW,CAAC,GAAZ,CAAtB;AACP;AACJ;;AAjDY;;AAoDjB,eAAexB,UAAf","sourcesContent":["import MouseEvent from \"./events/MouseEvent\";\r\nimport Raycast from \"./Raycast\";\r\n\r\nclass GameEditor {\r\n    constructor(gl, shaders, camera, canvas, projectionMatrix) {\r\n        this.gl = gl;\r\n        this.shaders = shaders;\r\n        this.camera = camera;\r\n        this.canvas = canvas;\r\n        this.projectionMatrix = projectionMatrix;\r\n    }\r\n\r\n    processUserInput() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation();\r\n\r\n        // If left mouse button is pressed, cast a ray from the mouse cursor position\r\n        if(MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\r\n            // Create a ray from the camera\r\n            let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height);\r\n\r\n            //// Test ray intersections ////\r\n            let objectFound = Raycast.findObjectIntersection(ray);\r\n            if (objectFound) {\r\n                if (this.selectedObject)\r\n                    this.selectedObject.setActive(false);\r\n\r\n                objectFound.setActive(true);\r\n                this.selectedObject = objectFound;\r\n            }\r\n        }\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 0.5]);\r\n            }\r\n            else\r\n                this.camera.translate([0.0, 0.0, -0.5]);\r\n        }\r\n    }\r\n}\r\n\r\nexport default GameEditor;"]},"metadata":{},"sourceType":"module"}
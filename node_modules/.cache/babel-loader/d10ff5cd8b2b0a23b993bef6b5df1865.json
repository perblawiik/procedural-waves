{"ast":null,"code":"import Transform from './Transform';\nimport Vector3 from \"./math/Vector3\"; // TODO: Linear interpolation for transforms (translation and rotation)\n// TODO: Implement visible and interactable local coordinate system for handling game objects in the editor\n// TODO: Implement a RigidBody component for handling velocity, acceleration and mass\n// TODO: Implement a Collider component for handling collision between game objects\n// TODO: Implement a Material component for handling color, textures, etc.\n// TODO: Implement a Script component for game object logic\n\nclass GameObject {\n  constructor(name) {\n    this.nameTag = name;\n    this.meshes = [];\n    this.transform = new Transform();\n    this.collider = null;\n    this.rigidBody = null;\n    this.isActive = false;\n  }\n\n  get worldPosition() {\n    return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\n  }\n\n  setNameTag(name) {\n    this.nameTag = name;\n  }\n\n  translate(val) {\n    this.transform.translate(val);\n  }\n\n  rotate(rot) {\n    this.transform.rotate(rot);\n  }\n\n  setPosition(pos) {\n    this.transform.setPosition(pos);\n  }\n\n  setRotation(rot) {\n    this.transform.setRotation(rot);\n  }\n\n  setScale(scale) {\n    this.transform.setScale(scale);\n  }\n\n  setActive(state) {\n    this.isActive = state;\n\n    if (this.collider !== null) {\n      this.collider.setVisible(state);\n    }\n  }\n\n  addMesh(mesh) {\n    this.transform.addChild(mesh.transform);\n    this.meshes.push(mesh);\n  }\n\n  addCollider(collider) {\n    this.transform.addChild(collider.transform);\n    this.collider = collider;\n  }\n\n  addRigidBody(rigidBody) {\n    this.rigidBody = rigidBody;\n  }\n\n  render(shader) {\n    for (let i = 0; i < this.meshes.length; ++i) {\n      this.meshes[i].render(shader);\n    }\n  }\n\n  update(timeStep) {\n    if (this.rigidBody) {\n      this.rigidBody.update(timeStep);\n      this.setPosition([this.rigidBody.position.x, this.rigidBody.position.y, this.rigidBody.position.z]);\n    }\n\n    this.customUpdate(timeStep);\n  }\n\n  customUpdate(timeStep) {}\n\n}\n\nexport default GameObject;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\GameObject.js"],"names":["Transform","Vector3","GameObject","constructor","name","nameTag","meshes","transform","collider","rigidBody","isActive","worldPosition","matrix","setNameTag","translate","val","rotate","rot","setPosition","pos","setRotation","setScale","scale","setActive","state","setVisible","addMesh","mesh","addChild","push","addCollider","addRigidBody","render","shader","i","length","update","timeStep","position","x","y","z","customUpdate"],"mappings":"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","sourcesContent":["import Transform from './Transform';\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\n// TODO: Linear interpolation for transforms (translation and rotation)\r\n// TODO: Implement visible and interactable local coordinate system for handling game objects in the editor\r\n// TODO: Implement a RigidBody component for handling velocity, acceleration and mass\r\n// TODO: Implement a Collider component for handling collision between game objects\r\n// TODO: Implement a Material component for handling color, textures, etc.\r\n// TODO: Implement a Script component for game object logic\r\n\r\nclass GameObject {\r\n    constructor (name) {\r\n        this.nameTag = name;\r\n        this.meshes = [];\r\n        this.transform = new Transform();\r\n        this.collider = null;\r\n        this.rigidBody = null;\r\n        this.isActive = false;\r\n    }\r\n\r\n    get worldPosition() {\r\n        return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\r\n    }\r\n\r\n    setNameTag(name) {\r\n        this.nameTag = name;\r\n    }\r\n\r\n    translate (val) {\r\n        this.transform.translate(val);\r\n    }\r\n\r\n    rotate(rot) {\r\n        this.transform.rotate(rot);\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.transform.setPosition(pos);\r\n    }\r\n\r\n    setRotation(rot) {\r\n        this.transform.setRotation(rot);\r\n    }\r\n\r\n    setScale(scale) {\r\n        this.transform.setScale(scale);\r\n    }\r\n\r\n    setActive(state) {\r\n        this.isActive = state;\r\n\r\n        if (this.collider !== null) {\r\n            this.collider.setVisible(state);\r\n        }\r\n    }\r\n\r\n    addMesh (mesh) {\r\n        this.transform.addChild(mesh.transform);\r\n        this.meshes.push(mesh);\r\n    }\r\n\r\n    addCollider (collider) {\r\n        this.transform.addChild(collider.transform);\r\n        this.collider = collider;\r\n    }\r\n\r\n    addRigidBody (rigidBody) {\r\n        this.rigidBody = rigidBody;\r\n    }\r\n\r\n    render(shader) {\r\n        for (let i = 0; i < this.meshes.length; ++i) {\r\n            this.meshes[i].render(shader);\r\n        }\r\n    }\r\n\r\n    update(timeStep) {\r\n        if (this.rigidBody) {\r\n            this.rigidBody.update(timeStep);\r\n            this.setPosition([this.rigidBody.position.x, this.rigidBody.position.y, this.rigidBody.position.z]);\r\n        }\r\n\r\n        this.customUpdate(timeStep);\r\n    }\r\n\r\n    customUpdate(timeStep) {\r\n\r\n    }\r\n}\r\n\r\nexport default GameObject;"]},"metadata":{},"sourceType":"module"}
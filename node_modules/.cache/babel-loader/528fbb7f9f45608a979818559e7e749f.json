{"ast":null,"code":"import Transform from \"./Transform\";\n\nclass Scene {\n  constructor(shaders) {\n    this.sceneObjects = [];\n    this.lightSources = [];\n    this.shaders = shaders;\n    this.transform = new Transform();\n    this.transform.setPosition([0.0, 0.0, 0.0]);\n    this.transform.setRotation([0.0, 90.0, 0.0]);\n  }\n\n  setPosition(position) {\n    this.transform.setPosition(position);\n  }\n\n  setRotation(rotation) {\n    this.transform.setRotation(rotation);\n  }\n\n  addGameObject(gameObject) {\n    this.transform.addChild(gameObject.transform);\n    this.sceneObjects.push(gameObject);\n  }\n\n  addLightSource(lightSource) {\n    this.transform.addChild(lightSource.transform);\n    console.log(lightSource.transform.matrix); // Activate the main shader\n\n    let shader = this.shaders.get(\"phong\");\n    shader.activate();\n    let lightCount = this.lightSources.length;\n    let arrayName = \"pointLights[\" + lightCount + \"].\"; // Get uniform locations\n\n    let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\n    let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\n    let attenuationUniformLoc = shader.getUniformLoc(arrayName + \"attenuationConstants\");\n    let lightCountUniformLoc = shader.getUniformLoc(\"lightCount\"); // Set the uniforms in the fragment shader\n\n    shader.setUniformVec3f(positionUniformLoc, lightSource.position);\n    shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\n    shader.setUniformVec2f(attenuationUniformLoc, [lightSource.attenuationConstants.kLinear, lightSource.attenuationConstants.kQuadratic]);\n    shader.setUniformInt(lightCountUniformLoc, lightCount); // Add light source to the list\n\n    this.lightSources.push(lightSource);\n  }\n\n  draw() {\n    this.sceneObjects.forEach(object => {\n      object.render(this.shaders.get(\"phong\"));\n    });\n    this.lightSources.forEach(lightSource => {\n      lightSource.render(this.shaders.get(\"ambient\"));\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Scene.js"],"names":["Transform","Scene","constructor","shaders","sceneObjects","lightSources","transform","setPosition","setRotation","position","rotation","addGameObject","gameObject","addChild","push","addLightSource","lightSource","console","log","matrix","shader","get","activate","lightCount","length","arrayName","positionUniformLoc","getUniformLoc","colorUniformLoc","attenuationUniformLoc","lightCountUniformLoc","setUniformVec3f","lightColor","setUniformVec2f","attenuationConstants","kLinear","kQuadratic","setUniformInt","draw","forEach","object","render"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKF,OAAL,GAAeA,OAAf;AAEA,SAAKG,SAAL,GAAiB,IAAIN,SAAJ,EAAjB;AACA,SAAKM,SAAL,CAAeC,WAAf,CAA2B,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA3B;AACA,SAAKD,SAAL,CAAeE,WAAf,CAA2B,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,CAA3B;AACH;;AAEDD,EAAAA,WAAW,CAACE,QAAD,EAAW;AAClB,SAAKH,SAAL,CAAeC,WAAf,CAA2BE,QAA3B;AACH;;AAEDD,EAAAA,WAAW,CAACE,QAAD,EAAW;AAClB,SAAKJ,SAAL,CAAeE,WAAf,CAA2BE,QAA3B;AACH;;AAEDC,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKN,SAAL,CAAeO,QAAf,CAAwBD,UAAU,CAACN,SAAnC;AACA,SAAKF,YAAL,CAAkBU,IAAlB,CAAuBF,UAAvB;AACH;;AAEDG,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB,SAAKV,SAAL,CAAeO,QAAf,CAAwBG,WAAW,CAACV,SAApC;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYF,WAAW,CAACV,SAAZ,CAAsBa,MAAlC,EAFwB,CAGxB;;AACA,QAAIC,MAAM,GAAG,KAAKjB,OAAL,CAAakB,GAAb,CAAiB,OAAjB,CAAb;AACAD,IAAAA,MAAM,CAACE,QAAP;AAEA,QAAIC,UAAU,GAAG,KAAKlB,YAAL,CAAkBmB,MAAnC;AACA,QAAIC,SAAS,GAAG,iBAAiBF,UAAjB,GAA8B,IAA9C,CARwB,CAUxB;;AACA,QAAIG,kBAAkB,GAAGN,MAAM,CAACO,aAAP,CAAqBF,SAAS,GAAG,UAAjC,CAAzB;AACA,QAAIG,eAAe,GAAGR,MAAM,CAACO,aAAP,CAAqBF,SAAS,GAAG,OAAjC,CAAtB;AACA,QAAII,qBAAqB,GAAGT,MAAM,CAACO,aAAP,CAAqBF,SAAS,GAAG,sBAAjC,CAA5B;AACA,QAAIK,oBAAoB,GAAGV,MAAM,CAACO,aAAP,CAAqB,YAArB,CAA3B,CAdwB,CAgBxB;;AACAP,IAAAA,MAAM,CAACW,eAAP,CAAuBL,kBAAvB,EAA2CV,WAAW,CAACP,QAAvD;AACAW,IAAAA,MAAM,CAACW,eAAP,CAAuBH,eAAvB,EAAwCZ,WAAW,CAACgB,UAApD;AACAZ,IAAAA,MAAM,CAACa,eAAP,CAAuBJ,qBAAvB,EAA8C,CAACb,WAAW,CAACkB,oBAAZ,CAAiCC,OAAlC,EAA2CnB,WAAW,CAACkB,oBAAZ,CAAiCE,UAA5E,CAA9C;AACAhB,IAAAA,MAAM,CAACiB,aAAP,CAAqBP,oBAArB,EAA2CP,UAA3C,EApBwB,CAsBxB;;AACA,SAAKlB,YAAL,CAAkBS,IAAlB,CAAuBE,WAAvB;AACH;;AAEDsB,EAAAA,IAAI,GAAG;AACH,SAAKlC,YAAL,CAAkBmC,OAAlB,CAA2BC,MAAD,IAAW;AACjCA,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKtC,OAAL,CAAakB,GAAb,CAAiB,OAAjB,CAAd;AACH,KAFD;AAIA,SAAKhB,YAAL,CAAkBkC,OAAlB,CAA2BvB,WAAD,IAAiB;AACvCA,MAAAA,WAAW,CAACyB,MAAZ,CAAmB,KAAKtC,OAAL,CAAakB,GAAb,CAAiB,SAAjB,CAAnB;AACH,KAFD;AAGH;;AA1DO;;AA6DZ,eAAepB,KAAf","sourcesContent":["import Transform from \"./Transform\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n\r\n        this.transform = new Transform();\r\n        this.transform.setPosition([0.0, 0.0, 0.0]);\r\n        this.transform.setRotation([0.0, 90.0, 0.0]);\r\n    }\r\n\r\n    setPosition(position) {\r\n        this.transform.setPosition(position);\r\n    }\r\n\r\n    setRotation(rotation) {\r\n        this.transform.setRotation(rotation);\r\n    };\r\n\r\n    addGameObject(gameObject) {\r\n        this.transform.addChild(gameObject.transform);\r\n        this.sceneObjects.push(gameObject);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        this.transform.addChild(lightSource.transform);\r\n        console.log(lightSource.transform.matrix);\r\n        // Activate the main shader\r\n        let shader = this.shaders.get(\"phong\");\r\n        shader.activate();\r\n\r\n        let lightCount = this.lightSources.length;\r\n        let arrayName = \"pointLights[\" + lightCount + \"].\";\r\n\r\n        // Get uniform locations\r\n        let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\r\n        let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\r\n        let attenuationUniformLoc = shader.getUniformLoc(arrayName + \"attenuationConstants\");\r\n        let lightCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n\r\n        // Set the uniforms in the fragment shader\r\n        shader.setUniformVec3f(positionUniformLoc, lightSource.position);\r\n        shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\r\n        shader.setUniformVec2f(attenuationUniformLoc, [lightSource.attenuationConstants.kLinear, lightSource.attenuationConstants.kQuadratic]);\r\n        shader.setUniformInt(lightCountUniformLoc, lightCount);\r\n\r\n        // Add light source to the list\r\n        this.lightSources.push(lightSource);\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(\"phong\"));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}
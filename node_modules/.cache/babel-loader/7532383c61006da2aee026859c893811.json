{"ast":null,"code":"/**\r\n * Author: Per Bl√•wiik\r\n * Date: 2019-12-29\r\n */\nimport Vector3 from './Vector3';\n\nclass Matrix4 {\n  // Returns an identity matrix\n  static identity() {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  } // Returns a translation matrix\n\n\n  static translation(tX, tY, tZ) {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tX, tY, tZ, 1];\n  } // Returns a scaling matrix\n\n\n  static scaling(xScale, yScale, zScale) {\n    return [xScale, 0, 0, 0, 0, yScale, 0, 0, 0, 0, zScale, 0, 0, 0, 0, 1];\n  }\n\n  static compose(xVec, yVec, zVec, posVec = new Vector3([0.0, 0.0, 0.0])) {\n    return [xVec.x, yVec.x, zVec.x, 0, xVec.y, yVec.y, zVec.y, 0, xVec.z, yVec.z, zVec.z, 0, posVec.x, posVec.y, posVec.z, 1];\n  } // Returns a rotation matrix for the x-axis\n\n\n  static rotationX(rad) {\n    let sin = Math.sin(rad);\n    let cos = Math.cos(rad);\n    return [1, 0, 0, 0, 0, cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1];\n  } // Returns a rotation matrix for the y-axis\n\n\n  static rotationY(rad) {\n    let sin = Math.sin(rad);\n    let cos = Math.cos(rad);\n    return [cos, 0, -sin, 0, 0, 1, 0, 0, sin, 0, cos, 0, 0, 0, 0, 1];\n  } // Returns a rotation matrix for the z-axis\n\n\n  static rotationZ(rad) {\n    let sin = Math.sin(rad);\n    let cos = Math.cos(rad);\n    return [cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  } // Returns a perspective matrix\n\n\n  static perspective(fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    return [f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (far + near) * nf, -1, 0, 0, 2 * far * near * nf, 0];\n  } // Translates a given matrix with given coordinates and returns the matrix combination\n\n\n  static translate(matrix, tX, tY, tZ) {\n    return this.multiply(this.translation(tX, tY, tZ), matrix);\n  } // Scales a given matrix with given dimensions and returns the matrix combination\n\n\n  static scale(matrix, sX, sY, sZ) {\n    return this.multiply(this.scaling(sX, sY, sZ), matrix);\n  } // Rotates a given matrix with given angle in radians and returns the matrix combination\n\n\n  static rotateX(matrix, rad) {\n    return this.multiply(this.rotationX(rad), matrix);\n  } // Rotates a given matrix with given angle in radians and returns the matrix combination\n\n\n  static rotateY(matrix, rad) {\n    return this.multiply(this.rotationY(rad), matrix);\n  } // Rotates a given matrix with given angle in radians and returns the matrix combination\n\n\n  static rotateZ(matrix, rad) {\n    return this.multiply(this.rotationZ(rad), matrix);\n  } // Multiplies a given 4x4-matrix with given 4x1 vector and returns 4x1 vector\n\n\n  static multiplyVector(m, v) {\n    let out = [];\n    out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\n    out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\n    out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\n    out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\n    return out;\n  } // Performs a matrix multiplication with two given matrices and returns the matrix combination\n\n\n  static multiply(a, b) {\n    let out = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let index = 0;\n    let i = 0;\n\n    while (i < 16) {\n      // Each column\n      for (let k = 0; k < 4; ++k) {\n        out[index] = a[k] * b[i] + a[k + 4] * b[i + 1] + a[k + 8] * b[i + 2] + a[k + 12] * b[i + 3];\n        ++index;\n      }\n\n      i = i + 4; // Jump to next row (go pass 4 indexes)\n    }\n\n    return out;\n  }\n  /**\r\n   * Inverts a mat4\r\n   *\r\n   * @param {mat4} out the receiving matrix\r\n   * @param {mat4} a the source matrix\r\n   * @returns {mat4} out\r\n   *\r\n   * Source: https://github.com/toji/gl-matrix/blob/master/src/mat4.js\r\n   */\n\n\n  static invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return out;\n  }\n  /**\r\n   * Rotates a mat4 by the given angle around the given axis\r\n   *\r\n   * @param {mat4} out the receiving matrix\r\n   * @param {mat4} a the matrix to rotate\r\n   * @param {Number} rad the angle to rotate the matrix by\r\n   * @param {Vector3} axis the axis to rotate around\r\n   * @returns {mat4} out\r\n   *\r\n   * Source: https://github.com/toji/gl-matrix/blob/master/src/mat4.js\r\n   */\n\n\n  static rotate(out, a, rad, axis) {\n    let x = axis.x,\n        y = axis.y,\n        z = axis.z;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s = void 0,\n        c = void 0,\n        t = void 0;\n    let a00 = void 0,\n        a01 = void 0,\n        a02 = void 0,\n        a03 = void 0;\n    let a10 = void 0,\n        a11 = void 0,\n        a12 = void 0,\n        a13 = void 0;\n    let a20 = void 0,\n        a21 = void 0,\n        a22 = void 0,\n        a23 = void 0;\n    let b00 = void 0,\n        b01 = void 0,\n        b02 = void 0;\n    let b10 = void 0,\n        b11 = void 0,\n        b12 = void 0;\n    let b20 = void 0,\n        b21 = void 0,\n        b22 = void 0;\n\n    if (Math.abs(len) < 0.001) {\n      return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11]; // Construct the elements of the rotation matrix\n\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    return out;\n  }\n\n}\n\nexport default Matrix4;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\Waves\\procedural-waves\\src\\js\\bluebox\\math\\Matrix4.js"],"names":["Vector3","Matrix4","identity","translation","tX","tY","tZ","scaling","xScale","yScale","zScale","compose","xVec","yVec","zVec","posVec","x","y","z","rotationX","rad","sin","Math","cos","rotationY","rotationZ","perspective","fovy","aspect","near","far","f","tan","nf","translate","matrix","multiply","scale","sX","sY","sZ","rotateX","rotateY","rotateZ","multiplyVector","m","v","out","a","b","index","i","k","invert","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","rotate","axis","len","sqrt","s","c","t","b12","b20","b21","b22","abs"],"mappings":"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","sourcesContent":["/**\r\n * Author: Per Bl√•wiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport Vector3 from './Vector3';\r\n\r\nclass Matrix4 {\r\n    // Returns an identity matrix\r\n    static identity () {\r\n        return [\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a translation matrix\r\n    static translation (tX, tY, tZ) {\r\n        return [\r\n            1,  0,  0,  0,\r\n            0,  1,  0,  0,\r\n            0,  0,  1,  0,\r\n            tX, tY, tZ, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a scaling matrix\r\n    static scaling (xScale, yScale, zScale) {\r\n        return [\r\n            xScale, 0,      0,      0,\r\n            0,      yScale, 0,      0,\r\n            0,      0,      zScale, 0,\r\n            0,      0,      0,      1\r\n        ];\r\n    }\r\n\r\n    static compose (xVec, yVec, zVec, posVec = new Vector3([0.0, 0.0, 0.0])) {\r\n        return [\r\n            xVec.x,    yVec.x,   zVec.x,   0,\r\n            xVec.y,    yVec.y,   zVec.y,   0,\r\n            xVec.z,    yVec.z,   zVec.z,   0,\r\n            posVec.x, posVec.y, posVec.z,  1,\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the x-axis\r\n    static rotationX (rad) {\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            1,  0,   0,   0,\r\n            0,  cos, sin, 0,\r\n            0, -sin, cos, 0,\r\n            0,  0,   0,   1\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the y-axis\r\n    static rotationY (rad) {\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            cos, 0, -sin, 0,\r\n            0,   1,  0,   0,\r\n            sin, 0,  cos, 0,\r\n            0,   0,  0,   1\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the z-axis\r\n    static rotationZ (rad) {\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            cos, sin, 0, 0,\r\n            -sin, cos, 0, 0,\r\n            0,   0,   1, 0,\r\n            0,   0,   0, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a perspective matrix\r\n    static perspective (fovy, aspect, near, far) {\r\n        let f = 1.0 / Math.tan(fovy/2);\r\n        let nf = 1 / (near-far);\r\n\r\n        return [\r\n            f/aspect, 0, 0,              0,\r\n            0,        f, 0,              0,\r\n            0,        0, (far+near)*nf, -1,\r\n            0,        0, 2*far*near*nf,  0\r\n        ];\r\n    }\r\n\r\n    // Translates a given matrix with given coordinates and returns the matrix combination\r\n    static translate (matrix, tX, tY, tZ) {\r\n        return this.multiply(this.translation(tX, tY, tZ), matrix);\r\n    }\r\n\r\n    // Scales a given matrix with given dimensions and returns the matrix combination\r\n    static scale (matrix, sX, sY, sZ) {\r\n        return this.multiply(this.scaling(sX, sY, sZ), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static rotateX (matrix, rad) {\r\n        return this.multiply(this.rotationX(rad), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static rotateY (matrix, rad) {\r\n        return this.multiply(this.rotationY(rad), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static rotateZ (matrix, rad) {\r\n        return this.multiply(this.rotationZ(rad), matrix);\r\n    }\r\n\r\n    // Multiplies a given 4x4-matrix with given 4x1 vector and returns 4x1 vector\r\n    static multiplyVector (m, v) {\r\n        let out = [];\r\n        out[0] = m[0]*v[0] + m[4]*v[1] + m[8]*v[2]  + m[12]*v[3];\r\n        out[1] = m[1]*v[0] + m[5]*v[1] + m[9]*v[2]  + m[13]*v[3];\r\n        out[2] = m[2]*v[0] + m[6]*v[1] + m[10]*v[2] + m[14]*v[3];\r\n        out[3] = m[3]*v[0] + m[7]*v[1] + m[11]*v[2] + m[15]*v[3];\r\n        return out;\r\n    }\r\n\r\n    // Performs a matrix multiplication with two given matrices and returns the matrix combination\r\n    static multiply (a, b) {\r\n        let out =\r\n            [\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0\r\n            ];\r\n        let index = 0;\r\n        let i = 0;\r\n\r\n        while (i < 16) {\r\n            // Each column\r\n            for (let k = 0; k < 4; ++k) {\r\n                out[index] = (a[k]*b[i]) + (a[k+4]*b[i+1]) + (a[k+8]*b[i+2]) + (a[k+12]*b[i+3]);\r\n                ++index;\r\n            }\r\n            i = i + 4; // Jump to next row (go pass 4 indexes)\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Inverts a mat4\r\n     *\r\n     * @param {mat4} out the receiving matrix\r\n     * @param {mat4} a the source matrix\r\n     * @returns {mat4} out\r\n     *\r\n     * Source: https://github.com/toji/gl-matrix/blob/master/src/mat4.js\r\n     */\r\n    static invert (out, a) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7];\r\n        let a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11];\r\n        let a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a mat4 by the given angle around the given axis\r\n     *\r\n     * @param {mat4} out the receiving matrix\r\n     * @param {mat4} a the matrix to rotate\r\n     * @param {Number} rad the angle to rotate the matrix by\r\n     * @param {Vector3} axis the axis to rotate around\r\n     * @returns {mat4} out\r\n     *\r\n     * Source: https://github.com/toji/gl-matrix/blob/master/src/mat4.js\r\n     */\r\n    static rotate (out, a, rad, axis) {\r\n        let x = axis.x,\r\n            y = axis.y,\r\n            z = axis.z;\r\n        let len = Math.sqrt(x * x + y * y + z * z);\r\n        let s = void 0,\r\n            c = void 0,\r\n            t = void 0;\r\n        let a00 = void 0,\r\n            a01 = void 0,\r\n            a02 = void 0,\r\n            a03 = void 0;\r\n        let a10 = void 0,\r\n            a11 = void 0,\r\n            a12 = void 0,\r\n            a13 = void 0;\r\n        let a20 = void 0,\r\n            a21 = void 0,\r\n            a22 = void 0,\r\n            a23 = void 0;\r\n        let b00 = void 0,\r\n            b01 = void 0,\r\n            b02 = void 0;\r\n        let b10 = void 0,\r\n            b11 = void 0,\r\n            b12 = void 0;\r\n        let b20 = void 0,\r\n            b21 = void 0,\r\n            b22 = void 0;\r\n\r\n        if (Math.abs(len) < 0.001) {\r\n            return null;\r\n        }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n        a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n        a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n        // Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        // Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n        if (a !== out) {\r\n            // If the source and destination differ, copy the unchanged last row\r\n            out[12] = a[12];\r\n            out[13] = a[13];\r\n            out[14] = a[14];\r\n            out[15] = a[15];\r\n        }\r\n        return out;\r\n    }\r\n}\r\n\r\nexport default Matrix4;"]},"metadata":{},"sourceType":"module"}
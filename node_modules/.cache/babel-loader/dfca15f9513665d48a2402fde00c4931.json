{"ast":null,"code":"import Transform from \"./Transform\";\nimport Vector3 from \"./math/Vector3\";\n\nclass Bullets {\n  constructor(bulletModel, bulletSpeed, bulletReach) {\n    this.activeBullets = [];\n    this.model = bulletModel;\n    this.speed = bulletSpeed;\n    this.reach = bulletReach;\n  }\n\n  addBullet(origin, direction) {\n    this.activeBullets.push({\n      origin: new Vector3(origin),\n      position: origin,\n      direction: direction,\n      time: 0.0\n    });\n  }\n\n  update() {\n    let bulletTransform = new Transform();\n    let i = 0;\n\n    while (i < this.activeBullets.length) {\n      let v0 = this.speed;\n      let t = this.activeBullets[i].time;\n      let g = -9.82;\n      let x = this.activeBullets[i].origin.x + v0 * t;\n      let y = this.activeBullets[i].origin.y + v0 * t - 0.5 * g * t;\n      let z = this.activeBullets[i].origin.z + v0 * t;\n      this.activeBullets[i].time += 0.1;\n      this.activeBullets[i].position = [x, y, z]; // Set bullets position and move it in the bullet direction\n\n      /*\r\n      bulletTransform.setPosition(this.activeBullets[i].position);\r\n      bulletTransform.translate([this.activeBullets[i].direction.x * this.speed, (this.activeBullets[i].direction.y * this.speed), this.activeBullets[i].direction.z * this.speed]);\r\n        // Check distance from camera and bullet\r\n      if (Vector3.distance(bulletTransform.position, this.activeBullets[i].origin) < this.reach) {\r\n          // Save current position\r\n          this.activeBullets[i].position = [bulletTransform.position.x, bulletTransform.position.y, bulletTransform.position.z];\r\n          ++i;\r\n      }\r\n      else { // Remove bullet if distance is too great\r\n          this.activeBullets.splice(i, 1);\r\n      }\r\n      */\n    }\n  }\n\n  render(shader) {\n    this.activeBullets.forEach(bulletInfo => {\n      // Set bullet position\n      this.model.setPosition(bulletInfo.position); // Draw bullet\n\n      this.model.render(shader);\n    });\n  }\n\n}\n\nexport default Bullets;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Bullets.js"],"names":["Transform","Vector3","Bullets","constructor","bulletModel","bulletSpeed","bulletReach","activeBullets","model","speed","reach","addBullet","origin","direction","push","position","time","update","bulletTransform","i","length","v0","t","g","x","y","z","render","shader","forEach","bulletInfo","setPosition"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,CAAEC,WAAF,EAAeC,WAAf,EAA4BC,WAA5B,EAAyC;AAChD,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,KAAL,GAAaJ,WAAb;AACA,SAAKK,KAAL,GAAaJ,WAAb;AACA,SAAKK,KAAL,GAAaJ,WAAb;AACH;;AAEDK,EAAAA,SAAS,CAACC,MAAD,EAASC,SAAT,EAAoB;AACzB,SAAKN,aAAL,CAAmBO,IAAnB,CAAwB;AACpBF,MAAAA,MAAM,EAAE,IAAIX,OAAJ,CAAYW,MAAZ,CADY;AAEpBG,MAAAA,QAAQ,EAAEH,MAFU;AAGpBC,MAAAA,SAAS,EAAEA,SAHS;AAIpBG,MAAAA,IAAI,EAAE;AAJc,KAAxB;AAMH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,eAAe,GAAG,IAAIlB,SAAJ,EAAtB;AACA,QAAImB,CAAC,GAAG,CAAR;;AACA,WAAMA,CAAC,GAAG,KAAKZ,aAAL,CAAmBa,MAA7B,EAAqC;AAEjC,UAAIC,EAAE,GAAG,KAAKZ,KAAd;AACA,UAAIa,CAAC,GAAG,KAAKf,aAAL,CAAmBY,CAAnB,EAAsBH,IAA9B;AACA,UAAIO,CAAC,GAAG,CAAC,IAAT;AACA,UAAIC,CAAC,GAAG,KAAKjB,aAAL,CAAmBY,CAAnB,EAAsBP,MAAtB,CAA6BY,CAA7B,GAAiCH,EAAE,GAAGC,CAA9C;AACA,UAAIG,CAAC,GAAG,KAAKlB,aAAL,CAAmBY,CAAnB,EAAsBP,MAAtB,CAA6Ba,CAA7B,GAAiCJ,EAAE,GAAGC,CAAtC,GAA2C,MAAIC,CAAJ,GAAMD,CAAzD;AACA,UAAII,CAAC,GAAG,KAAKnB,aAAL,CAAmBY,CAAnB,EAAsBP,MAAtB,CAA6Bc,CAA7B,GAAiCL,EAAE,GAAGC,CAA9C;AACA,WAAKf,aAAL,CAAmBY,CAAnB,EAAsBH,IAAtB,IAA8B,GAA9B;AACA,WAAKT,aAAL,CAAmBY,CAAnB,EAAsBJ,QAAtB,GAAiC,CAACS,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAjC,CATiC,CAWjC;;AACA;;;;;;;;;;;;;AAcH;AACJ;;AAEDC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,SAAKrB,aAAL,CAAmBsB,OAAnB,CAA4BC,UAAD,IAAgB;AACvC;AACA,WAAKtB,KAAL,CAAWuB,WAAX,CAAuBD,UAAU,CAACf,QAAlC,EAFuC,CAGvC;;AACA,WAAKP,KAAL,CAAWmB,MAAX,CAAkBC,MAAlB;AACH,KALD;AAMH;;AAxDS;;AA2Dd,eAAe1B,OAAf","sourcesContent":["import Transform from \"./Transform\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass Bullets {\r\n    constructor (bulletModel, bulletSpeed, bulletReach) {\r\n        this.activeBullets = [];\r\n        this.model = bulletModel;\r\n        this.speed = bulletSpeed;\r\n        this.reach = bulletReach;\r\n    }\r\n\r\n    addBullet(origin, direction) {\r\n        this.activeBullets.push({\r\n            origin: new Vector3(origin),\r\n            position: origin,\r\n            direction: direction,\r\n            time: 0.0\r\n        });\r\n    }\r\n\r\n    update() {\r\n        let bulletTransform = new Transform();\r\n        let i = 0;\r\n        while(i < this.activeBullets.length) {\r\n\r\n            let v0 = this.speed;\r\n            let t = this.activeBullets[i].time;\r\n            let g = -9.82;\r\n            let x = this.activeBullets[i].origin.x + v0 * t;\r\n            let y = this.activeBullets[i].origin.y + v0 * t - (0.5*g*t);\r\n            let z = this.activeBullets[i].origin.z + v0 * t;\r\n            this.activeBullets[i].time += 0.1;\r\n            this.activeBullets[i].position = [x, y, z];\r\n\r\n            // Set bullets position and move it in the bullet direction\r\n            /*\r\n            bulletTransform.setPosition(this.activeBullets[i].position);\r\n            bulletTransform.translate([this.activeBullets[i].direction.x * this.speed, (this.activeBullets[i].direction.y * this.speed), this.activeBullets[i].direction.z * this.speed]);\r\n\r\n            // Check distance from camera and bullet\r\n            if (Vector3.distance(bulletTransform.position, this.activeBullets[i].origin) < this.reach) {\r\n                // Save current position\r\n                this.activeBullets[i].position = [bulletTransform.position.x, bulletTransform.position.y, bulletTransform.position.z];\r\n                ++i;\r\n            }\r\n            else { // Remove bullet if distance is too great\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n            */\r\n        }\r\n    }\r\n\r\n    render(shader) {\r\n        this.activeBullets.forEach((bulletInfo) => {\r\n            // Set bullet position\r\n            this.model.setPosition(bulletInfo.position);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Bullets;"]},"metadata":{},"sourceType":"module"}
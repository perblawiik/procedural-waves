{"ast":null,"code":"class FragmentShader {\n  constructor() {\n    this.file = [// Float precision\n    \"precision mediump float;\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", //\"varying vec4 FragPosLightSpace;\",\n    \"varying vec3 DiffuseColor;\", \"\", // Texture samlers\n    \"uniform sampler2D textureImage;\", \"uniform sampler2D shadowMap;\", \"\", // Shader inputs\n    \"uniform vec3 objectColor;\", \"uniform vec3 viewPosition;\", \"uniform vec3 lightPosition;\", \"uniform vec3 lightColor;\", \"\", \"vec3 lightDirection = normalize(vec3(1.0, 2.0, 3.5));\", this.n, // the shininess parameter\\n\n    this.ka, // the ambient reflection color\n    this.Ia, // the ambient illumination color\n    this.kd, // the diffuse surface reflection color\n    this.Id, // the diffuse illumination color\n    this.ks, // the specular surface reflection color\n    this.Is, // the specular illumination color\n    \"\", \"void main() {\", \"\", \"   kd = fragColor;\", \"   ka *= kd;\", \"   vec3 normal = normalize(Normal);\", \"   vec3 R = normalize(2.0*dot(normal,lightDirection)*normal - lightDirection);\", // Could also have used the function reflect ()\n    \"   float dotNL = max(dot(normal,lightDirection), 0.0) ;\", // If negative , set to zero\n    \"   float dotRV = max(dot(R,normalize(fragViewDirection)), 0.0);\", \"   if ( dotNL == 0.0) dotRV = 0.0;\", // Do not show highlight on the dark side\n    \"   vec3 shadedColor = Ia*ka + Id*kd*dotNL + Is*kd*pow(dotRV, n);\", \"\", \"\tgl_FragColor = vec4(shadedColor, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n  SetDiffuseColor(intensity, surface) {\n    this.Id = \"vec3 Id = vec3(\" + intensity[0] + \",\" + intensity[1] + \",\" + intensity[2] + \");\"; // the diffuse illumination color\n\n    this.kd = \"vec3 kd = vec3(\" + surface[0] + \",\" + surface[1] + \",\" + surface[2] + \");\"; // the diffuse illumination color\n  }\n\n}\n\nexport default FragmentShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\FragmentShader.js"],"names":["FragmentShader","constructor","file","n","ka","Ia","kd","Id","ks","Is","join","SetDiffuseColor","intensity","surface"],"mappings":"AAEA,MAAMA,cAAN,CAAqB;AAEjBC,EAAAA,WAAW,GAAG;AACV,SAAKC,IAAL,GAAY,CACR;AACA,8BAFQ,EAGR;AACA,6BAJQ,EAKR,sBALQ,EAMR,4BANQ,EAOR;AACA,gCARQ,EASR,EATQ,EAUR;AACA,qCAXQ,EAYR,8BAZQ,EAaR,EAbQ,EAcR;AACA,+BAfQ,EAgBR,4BAhBQ,EAiBR,6BAjBQ,EAkBR,0BAlBQ,EAmBR,EAnBQ,EAoBR,uDApBQ,EAqBR,KAAKC,CArBG,EAqBA;AACR,SAAKC,EAtBG,EAsBC;AACT,SAAKC,EAvBG,EAuBC;AACT,SAAKC,EAxBG,EAwBC;AACT,SAAKC,EAzBG,EAyBC;AACT,SAAKC,EA1BG,EA0BC;AACT,SAAKC,EA3BG,EA2BC;AACT,MA5BQ,EA6BR,eA7BQ,EA8BR,EA9BQ,EA+BR,oBA/BQ,EAgCR,cAhCQ,EAiCR,qCAjCQ,EAkCR,gFAlCQ,EAkC0E;AAClF,6DAnCQ,EAmCmD;AAC3D,qEApCQ,EAqCR,oCArCQ,EAqC8B;AACtC,sEAtCQ,EAuCR,EAvCQ,EAwCR,yCAxCQ,EAyCR,GAzCQ,EA0CVC,IA1CU,CA0CL,IA1CK,CAAZ;AA2CH;;AAEDC,EAAAA,eAAe,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAChC,SAAKN,EAAL,GAAU,oBAAoBK,SAAS,CAAC,CAAD,CAA7B,GAAmC,GAAnC,GAAyCA,SAAS,CAAC,CAAD,CAAlD,GAAwD,GAAxD,GAA8DA,SAAS,CAAC,CAAD,CAAvE,GAA6E,IAAvF,CADgC,CAC6D;;AAC7F,SAAKN,EAAL,GAAU,oBAAoBO,OAAO,CAAC,CAAD,CAA3B,GAAiC,GAAjC,GAAuCA,OAAO,CAAC,CAAD,CAA9C,GAAoD,GAApD,GAA0DA,OAAO,CAAC,CAAD,CAAjE,GAAuE,IAAjF,CAFgC,CAEuD;AAC1F;;AAnDgB;;AAsDrB,eAAeb,cAAf","sourcesContent":["\r\n\r\nclass FragmentShader {\r\n\r\n    constructor() {\r\n        this.file = [\r\n            // Float precision\r\n            \"precision mediump float;\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            //\"varying vec4 FragPosLightSpace;\",\r\n            \"varying vec3 DiffuseColor;\",\r\n            \"\",\r\n            // Texture samlers\r\n            \"uniform sampler2D textureImage;\",\r\n            \"uniform sampler2D shadowMap;\",\r\n            \"\",\r\n            // Shader inputs\r\n            \"uniform vec3 objectColor;\",\r\n            \"uniform vec3 viewPosition;\",\r\n            \"uniform vec3 lightPosition;\",\r\n            \"uniform vec3 lightColor;\",\r\n            \"\",\r\n            \"vec3 lightDirection = normalize(vec3(1.0, 2.0, 3.5));\",\r\n            this.n, // the shininess parameter\\n\r\n            this.ka, // the ambient reflection color\r\n            this.Ia, // the ambient illumination color\r\n            this.kd, // the diffuse surface reflection color\r\n            this.Id, // the diffuse illumination color\r\n            this.ks, // the specular surface reflection color\r\n            this.Is, // the specular illumination color\r\n            \"\",\r\n            \"void main() {\",\r\n            \"\",\r\n            \"   kd = fragColor;\",\r\n            \"   ka *= kd;\",\r\n            \"   vec3 normal = normalize(Normal);\",\r\n            \"   vec3 R = normalize(2.0*dot(normal,lightDirection)*normal - lightDirection);\", // Could also have used the function reflect ()\r\n            \"   float dotNL = max(dot(normal,lightDirection), 0.0) ;\", // If negative , set to zero\r\n            \"   float dotRV = max(dot(R,normalize(fragViewDirection)), 0.0);\",\r\n            \"   if ( dotNL == 0.0) dotRV = 0.0;\", // Do not show highlight on the dark side\r\n            \"   vec3 shadedColor = Ia*ka + Id*kd*dotNL + Is*kd*pow(dotRV, n);\",\r\n            \"\",\r\n            \"\tgl_FragColor = vec4(shadedColor, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    SetDiffuseColor(intensity, surface) {\r\n        this.Id = \"vec3 Id = vec3(\" + intensity[0] + \",\" + intensity[1] + \",\" + intensity[2] + \");\"; // the diffuse illumination color\r\n        this.kd = \"vec3 kd = vec3(\" + surface[0] + \",\" + surface[1] + \",\" + surface[2] + \");\"; // the diffuse illumination color\r\n    }\r\n}\r\n\r\nexport default FragmentShader;"]},"metadata":{},"sourceType":"module"}
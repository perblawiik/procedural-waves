{"ast":null,"code":"class VertexShader {\n  constructor() {\n    this.file = [\"precision mediump float;\", \"\", // Attribute locations\n    \"attribute vec3 vertPosition;\", \"attribute vec3 vertNormal;\", \"attribute vec2 vertTexCoord;\", \"\", // Time variable\n    \"uniform float time;\", \"\", // Transformation matrices\n    \"uniform mat4 cameraViewMatrix;\", \"uniform mat4 worldViewMatrix;\", \"uniform mat4 projectionMatrix;\", \"\", \"varying vec3 fragColor;\", \"varying vec3 interpolatedNormal;\", //\"varying vec3 fragLightDirection;\",\n    \"varying vec3 fragViewDirection;\", \"\", \"uniform vec3 vertColor;\", //\"uniform vec3 vertLightDirection;\",\n    \"\", \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"varying vec4 FragPosLightSpace;\", \"\", \"void main() {\", \"\tfragColor = vertColor;\", \"   fragViewDirection = vec3(cameraViewMatrix*vec4(0.0, 0.0, 0.0, 1.0));\", // Set the view direction the same as the camera\n    \"   interpolatedNormal = mat3(worldViewMatrix)*vertNormal;\", // To avoid translation of the normals use only 3x3 from our 4x4 transformation matrix\n    \"\tgl_Position = projectionMatrix * cameraViewMatrix * worldViewMatrix * vec4(vertPosition, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default VertexShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\VertexShader.js"],"names":["VertexShader","constructor","file","join"],"mappings":"AAEA,MAAMA,YAAN,CAAmB;AAEfC,EAAAA,WAAW,GAAG;AAEV,SAAKC,IAAL,GAAY,CACR,0BADQ,EAER,EAFQ,EAGR;AACA,kCAJQ,EAKR,4BALQ,EAMR,8BANQ,EAOR,EAPQ,EAQR;AACA,yBATQ,EAUR,EAVQ,EAWR;AACA,oCAZQ,EAaR,+BAbQ,EAcR,gCAdQ,EAeR,EAfQ,EAgBR,yBAhBQ,EAiBR,kCAjBQ,EAkBR;AACA,qCAnBQ,EAoBR,EApBQ,EAqBR,yBArBQ,EAsBR;AACA,MAvBQ,EAwBR,yBAxBQ,EAyBR,sBAzBQ,EA0BR,4BA1BQ,EA2BR,iCA3BQ,EA4BR,EA5BQ,EA6BR,eA7BQ,EA8BR,yBA9BQ,EA+BR,yEA/BQ,EA+BmE;AAC3E,+DAhCQ,EAgCqD;AAC7D,qGAjCQ,EAkCR,GAlCQ,EAmCVC,IAnCU,CAmCL,IAnCK,CAAZ;AAoCH;;AAxCc;;AA2CnB,eAAeH,YAAf","sourcesContent":["\r\n\r\nclass VertexShader {\r\n\r\n    constructor() {\r\n\r\n        this.file = [\r\n            \"precision mediump float;\",\r\n            \"\",\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n            \"\",\r\n            // Time variable\r\n            \"uniform float time;\",\r\n            \"\",\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraViewMatrix;\",\r\n            \"uniform mat4 worldViewMatrix;\",\r\n            \"uniform mat4 projectionMatrix;\",\r\n            \"\",\r\n            \"varying vec3 fragColor;\",\r\n            \"varying vec3 interpolatedNormal;\",\r\n            //\"varying vec3 fragLightDirection;\",\r\n            \"varying vec3 fragViewDirection;\",\r\n            \"\",\r\n            \"uniform vec3 vertColor;\",\r\n            //\"uniform vec3 vertLightDirection;\",\r\n            \"\",\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"varying vec4 FragPosLightSpace;\",\r\n            \"\",\r\n            \"void main() {\",\r\n            \"\tfragColor = vertColor;\",\r\n            \"   fragViewDirection = vec3(cameraViewMatrix*vec4(0.0, 0.0, 0.0, 1.0));\", // Set the view direction the same as the camera\r\n            \"   interpolatedNormal = mat3(worldViewMatrix)*vertNormal;\", // To avoid translation of the normals use only 3x3 from our 4x4 transformation matrix\r\n            \"\tgl_Position = projectionMatrix * cameraViewMatrix * worldViewMatrix * vec4(vertPosition, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default VertexShader;"]},"metadata":{},"sourceType":"module"}
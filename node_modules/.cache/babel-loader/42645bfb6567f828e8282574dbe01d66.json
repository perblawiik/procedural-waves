{"ast":null,"code":"// JavaScript components\nimport Shader from \"./ShaderHandle\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./EventHandler\";\nimport Scene from \"./Scene\";\nimport PointLightSource from \"./PointLightSource\"; // Shader files\n\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\nimport AmbientShader from \"./shaders/AmbientShader\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 5.0, 50.0];\nconst CAMERA_ROTATION = [-5.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER: 2,\n  PLANE: 3\n};\n\nclass GraphicsEngine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0;\n    this.shaders = new Map(); // Scenes should work like blocks in the game world.\n    // The active scenes are based on the cameras distance to the origin of each scene.\n\n    this.scenes = [];\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n    this.updateViewportDimensions(); // Handle camera navigation\n\n    this.eventHandler.processCameraNavigation(this.camera); // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw the 3D scene\n\n    this.scenes[0].draw(); // Display fps and other information\n\n    this.drawTextElements();\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let aspectRatio = this.canvas.width / this.canvas.height; // Update the projection matrix for the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniformAspectRatio(aspectRatio);\n    }); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  preload() {\n    // Initiate the mouse event handler\n    this.eventHandler = new EventHandler(); // 2D Canvas for text display\n\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    } // Set the viewport dimensions to the same as the canvas\n\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW); // Create shaders\n\n    let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\n    let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\n    this.shaders.set(\"phong\", mainShader);\n    this.shaders.set(\"ambient\", ambientShader); // Initialize the main camera\n\n    this.camera = new Camera(this.shaders);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create a scene for the objects\n\n    let defaultScene = new Scene(this.shaders);\n    defaultScene.setPosition([0.0, 0.0, 50.0]);\n    this.scenes.push(defaultScene); // Create scene objects\n\n    this.loadDefaultSceneObjects();\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 50;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.gl);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER) {\n      mesh.createCylinder(32, 1);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    return obj;\n  }\n\n  createPointLightSource(settings) {\n    let lightSource = new PointLightSource(settings.name);\n    lightSource.setPosition(settings.position);\n    lightSource.setScale(settings.scale);\n    lightSource.setLightColor(settings.color);\n    lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic); // Create a model for the light source\n\n    let lightSourceModel = new Mesh(this.gl);\n    lightSourceModel.createSphere(8);\n    lightSourceModel.setColor(settings.color);\n    lightSource.addMesh(lightSourceModel);\n    return lightSource;\n  }\n\n  loadDefaultSceneObjects() {\n    // Create a point lights for the scene\n    // Add the light source to our scene\n    this.scenes[0].addLightSource(this.createPointLightSource({\n      name: \"Middle Lamp\",\n      scale: [0.5, 0.5, 0.5],\n      position: [0.0, 9.5, -35.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // These constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    this.scenes[0].addLightSource(this.createPointLightSource({\n      name: \"Right Lamp\",\n      scale: [0.5, 0.5, 0.5],\n      position: [37.5, 9.5, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // These constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    this.scenes[0].addLightSource(this.createPointLightSource({\n      name: \"Left Lamp\",\n      scale: [0.5, 0.5, 0.5],\n      position: [-37.5, 9.5, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // These constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    })); // Create a red cube\n\n    this.scenes[0].addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [1.0, 1.0, 1.0],\n      position: [0.0, 1.0, 0.0],\n      color: [1.0, 0.0, 0.0]\n    })); // Create a green sphere\n\n    this.scenes[0].addGameObject(this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [1.0, 1.0, 1.0],\n      position: [4.0, 2.0, 2.0],\n      color: [0.0, 1.0, 0.0]\n    })); // Create a magenta cylinder\n\n    this.scenes[0].addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER,\n      name: 'Magenta Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-4.0, 2.0, 2.0],\n      color: [1.0, 0.0, 1.0]\n    })); // Create gray roof\n\n    this.scenes[0].addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [40.0, 0.1, 20.0],\n      position: [0.0, 10.0, -20.0],\n      color: [0.5, 0.5, 0.5]\n    })); // Create gray floor\n\n    this.scenes[0].addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [40.0, 0.1, 40.0],\n      position: [0.0, 0.0, 0.0],\n      color: [0.75, 0.75, 0.75]\n    })); // Create Walls\n\n    let wallColor = [0.0, 0.2, 1.0];\n    this.scenes[0].addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Left Wall',\n      scale: [0.1, 5.0, 20.0],\n      position: [-40.0, 5.0, -20.0],\n      color: wallColor\n    }));\n    this.scenes[0].addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Right Wall',\n      scale: [0.1, 5.0, 20.0],\n      position: [40.0, 5.0, -20.0],\n      color: wallColor\n    }));\n    this.scenes[0].addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Back Wall',\n      scale: [40.0, 5.0, 0.1],\n      position: [0.0, 5.0, -40.0],\n      color: wallColor\n    }));\n  }\n\n}\n\nexport default GraphicsEngine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\GraphicsEngine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","Scene","PointLightSource","PhongLightingShader","AmbientShader","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER","PLANE","GraphicsEngine","constructor","lastTime","frameCount","fps","currentTextOffset","shaders","Map","scenes","run","updateViewportDimensions","eventHandler","processCameraNavigation","camera","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","draw","drawTextElements","aspectRatio","canvas","width","height","forEach","shader","activate","setProjectionUniformAspectRatio","viewport","preload","canvas2D","document","getElementById","ctx","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","mainShader","vertex","fragment","ambientShader","set","setPosition","setRotation","defaultScene","push","loadDefaultSceneObjects","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","fillText","length","pos","transform","position","cameraPositionText","x","toFixed","y","z","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinder","createPlane","setColor","color","obj","name","setScale","scale","addMesh","createPointLightSource","lightSource","setLightColor","setAttenuation","attenuation","kLinear","kQuadratic","lightSourceModel","addLightSource","addGameObject","wallColor"],"mappings":"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","sourcesContent":["// JavaScript components\r\nimport Shader from \"./ShaderHandle\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./EventHandler\";\r\nimport Scene from \"./Scene\";\r\nimport PointLightSource from \"./PointLightSource\";\r\n\r\n// Shader files\r\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\r\nimport AmbientShader from \"./shaders/AmbientShader\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 5.0, 50.0];\r\nconst CAMERA_ROTATION = [-5.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER: 2,\r\n    PLANE: 3\r\n};\r\n\r\nclass GraphicsEngine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n        this.shaders = new Map();\r\n\r\n        // Scenes should work like blocks in the game world.\r\n        // The active scenes are based on the cameras distance to the origin of each scene.\r\n        this.scenes = [];\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Handle camera navigation\r\n        this.eventHandler.processCameraNavigation(this.camera);\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw the 3D scene\r\n        this.scenes[0].draw();\r\n\r\n        // Display fps and other information\r\n        this.drawTextElements();\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let aspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Update the projection matrix for the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniformAspectRatio(aspectRatio);\r\n        });\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    preload() {\r\n        // Initiate the mouse event handler\r\n        this.eventHandler = new EventHandler();\r\n\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        // Create shaders\r\n        let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\r\n        let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\r\n\r\n        this.shaders.set(\"phong\", mainShader);\r\n        this.shaders.set(\"ambient\", ambientShader);\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.shaders);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create a scene for the objects\r\n        let defaultScene = new Scene(this.shaders);\r\n        defaultScene.setPosition([0.0, 0.0, 50.0]);\r\n        this.scenes.push(defaultScene);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects();\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 50;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.gl);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER) {\r\n            mesh.createCylinder(32,1);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        return obj;\r\n    }\r\n\r\n    createPointLightSource(settings) {\r\n        let lightSource = new PointLightSource(settings.name);\r\n        lightSource.setPosition(settings.position);\r\n        lightSource.setScale(settings.scale);\r\n        lightSource.setLightColor(settings.color);\r\n        lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic);\r\n\r\n        // Create a model for the light source\r\n        let lightSourceModel = new Mesh(this.gl);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor(settings.color);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        return lightSource;\r\n    }\r\n\r\n    loadDefaultSceneObjects() {\r\n        // Create a point lights for the scene\r\n        // Add the light source to our scene\r\n        this.scenes[0].addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [0.5, 0.5, 0.5],\r\n            position: [0.0, 9.5, -35.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // These constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        this.scenes[0].addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [0.5, 0.5, 0.5],\r\n            position: [37.5, 9.5, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // These constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        this.scenes[0].addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [0.5, 0.5, 0.5],\r\n            position: [-37.5, 9.5, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // These constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n\r\n        // Create a red cube\r\n        this.scenes[0].addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Red Cube',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [0.0, 1.0, 0.0],\r\n                color: [1.0, 0.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a green sphere\r\n        this.scenes[0].addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.SPHERE,\r\n                name: 'Green Sphere',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [4.0, 2.0, 2.0],\r\n                color: [0.0, 1.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a magenta cylinder\r\n        this.scenes[0].addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER,\r\n                name: 'Magenta Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-4.0, 2.0, 2.0],\r\n                color: [1.0, 0.0, 1.0]\r\n            })\r\n        );\r\n\r\n        // Create gray roof\r\n        this.scenes[0].addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Floor',\r\n                scale: [40.0, 0.1, 20.0],\r\n                position: [0.0, 10.0, -20.0],\r\n                color: [0.5, 0.5, 0.5]\r\n            })\r\n        );\r\n\r\n        // Create gray floor\r\n        this.scenes[0].addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Roof',\r\n                scale: [40.0, 0.1, 40.0],\r\n                position: [0.0, 0.0, 0.0],\r\n                color: [0.75, 0.75, 0.75]\r\n            })\r\n        );\r\n\r\n        // Create Walls\r\n        let wallColor = [0.0, 0.2, 1.0];\r\n        this.scenes[0].addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Left Wall',\r\n                scale: [0.1, 5.0, 20.0],\r\n                position: [-40.0, 5.0, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        this.scenes[0].addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Right Wall',\r\n                scale: [0.1, 5.0, 20.0],\r\n                position: [40.0, 5.0, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        this.scenes[0].addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Back Wall',\r\n                scale: [40.0, 5.0, 0.1],\r\n                position: [0.0, 5.0, -40.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\nexport default GraphicsEngine;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"class FragmentShader {\n  static get file() {\n    return [// Float precision\n    \"precision mediump float;\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"\", // Shader inputs\n    \"uniform vec3 viewPosition;\", \"uniform vec3 lightPosition;\", \"uniform vec3 diffuseColor;\", \"uniform vec3 lightColor;\", \"\", \"void main() {\", \"   vec3 viewDirection = normalize(viewPosition - FragPosition);\", \"   vec3 lightDirection = normalize(lightPosition - FragPosition);\", \"   vec3 reflectDirection = reflect(-lightDirection, Normal);\", \"\", // Ambient lighting\n    \"   float ambientStrength = 0.05;\", \"   vec3 ambient = ambientStrength * lightColor;\", \"\", // Diffuse lighting\n    \"   float diff = max(dot(Normal, lightDirection), 0.0);\", \"   vec3 diffuse = (diff * lightColor);\", \"\", // Specular lighting\n    \"   float specularStrength = 0.5;\", \"   float shininess = 32.0;\", \"   float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\", \"   vec3 specular = specularStrength * spec * lightColor;\", \"\", // Calculate the intensity decrement\n    \"   float dist = distance(lightPosition, FragPosition);\", \"   float intensity = min(100.0 / dist, 1.0);\", // Phong lighting model\n    \"   vec3 phong = (ambient + diffuse + specular) * diffuseColor * 1.0;\", // Final shaded color (texture * lighting)\n    \"\tgl_FragColor = vec4 (phong, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default FragmentShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\FragmentShader.js"],"names":["FragmentShader","file","join"],"mappings":"AACA,MAAMA,cAAN,CAAqB;AACjB,aAAWC,IAAX,GAAmB;AACf,WAAO,CACH;AACA,8BAFG,EAGH;AACA,6BAJG,EAKH,sBALG,EAMH,4BANG,EAOH,EAPG,EAQH;AACA,gCATG,EAUH,6BAVG,EAWH,4BAXG,EAYH,0BAZG,EAaH,EAbG,EAcH,eAdG,EAeH,iEAfG,EAgBH,mEAhBG,EAiBH,8DAjBG,EAkBH,EAlBG,EAmBH;AACA,sCApBG,EAqBH,iDArBG,EAsBH,EAtBG,EAuBH;AACA,4DAxBG,EAyBH,wCAzBG,EA0BH,EA1BG,EA2BH;AACA,sCA5BG,EA6BH,4BA7BG,EA8BH,iFA9BG,EA+BH,0DA/BG,EAgCH,EAhCG,EAiCH;AACA,4DAlCG,EAmCH,8CAnCG,EAoCH;AACA,0EArCG,EAsCH;AACA,wCAvCG,EAwCH,GAxCG,EAyCLC,IAzCK,CAyCA,IAzCA,CAAP;AA0CH;;AA5CgB;;AA+CrB,eAAeF,cAAf","sourcesContent":["\r\nclass FragmentShader {\r\n    static get file () {\r\n        return [\r\n            // Float precision\r\n            \"precision mediump float;\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"\",\r\n            // Shader inputs\r\n            \"uniform vec3 viewPosition;\",\r\n            \"uniform vec3 lightPosition;\",\r\n            \"uniform vec3 diffuseColor;\",\r\n            \"uniform vec3 lightColor;\",\r\n            \"\",\r\n            \"void main() {\",\r\n            \"   vec3 viewDirection = normalize(viewPosition - FragPosition);\",\r\n            \"   vec3 lightDirection = normalize(lightPosition - FragPosition);\",\r\n            \"   vec3 reflectDirection = reflect(-lightDirection, Normal);\",\r\n            \"\",\r\n            // Ambient lighting\r\n            \"   float ambientStrength = 0.05;\",\r\n            \"   vec3 ambient = ambientStrength * lightColor;\",\r\n            \"\",\r\n            // Diffuse lighting\r\n            \"   float diff = max(dot(Normal, lightDirection), 0.0);\",\r\n            \"   vec3 diffuse = (diff * lightColor);\",\r\n            \"\",\r\n            // Specular lighting\r\n            \"   float specularStrength = 0.5;\",\r\n            \"   float shininess = 32.0;\",\r\n            \"   float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\",\r\n            \"   vec3 specular = specularStrength * spec * lightColor;\",\r\n            \"\",\r\n            // Calculate the intensity decrement\r\n            \"   float dist = distance(lightPosition, FragPosition);\",\r\n            \"   float intensity = min(100.0 / dist, 1.0);\",\r\n            // Phong lighting model\r\n            \"   vec3 phong = (ambient + diffuse + specular) * diffuseColor * 1.0;\",\r\n            // Final shaded color (texture * lighting)\r\n            \"\tgl_FragColor = vec4 (phong, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default FragmentShader;"]},"metadata":{},"sourceType":"module"}
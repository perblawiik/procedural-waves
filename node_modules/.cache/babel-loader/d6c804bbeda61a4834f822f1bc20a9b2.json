{"ast":null,"code":"class FragmentShader {\n  constructor() {\n    this.n = \"float n = 60.0;\"; // the shininess parameter\\n\n\n    this.ka = \"vec3 ka = vec3(0.15, 0.15, 0.15);\"; // the ambient reflection color;\n\n    this.Ia = \"vec3 Ia = vec3(1.0, 1.0, 1.0);\"; // the ambient illumination color\n\n    this.kd = \"vec3 kd = vec3(0.0, 0.0, 0.0);\"; // the diffuse surface reflection color\n\n    this.Id = \"vec3 Id = vec3(1.0, 1.0, 1.0);\"; // the diffuse illumination color\n\n    this.ks = \"vec3 ks = vec3(0.5, 0.5, 0.5);\"; // the specular surface reflection color\n\n    this.Is = \"vec3 Is = vec3(1.0, 1.0, 1.0);\"; // the specular illumination color\n\n    this.file = [\"precision mediump float;\", \"\", \"varying vec3 fragColor;\", \"varying vec3 interpolatedNormal;\", \"varying vec3 fragViewDirection;\", \"\", \"vec3 lightDirection = normalize(vec3(1.0, 2.0, 3.5));\", this.n, // the shininess parameter\\n\n    this.ka, // the ambient reflection color\n    this.Ia, // the ambient illumination color\n    this.kd, // the diffuse surface reflection color\n    this.Id, // the diffuse illumination color\n    this.ks, // the specular surface reflection color\n    this.Is, // the specular illumination color\n    \"\", \"void main() {\", \"\", \"   kd = fragColor;\", \"   ka *= kd;\", \"   vec3 normal = normalize(interpolatedNormal);\", \"   vec3 R = normalize(2.0*dot(normal,lightDirection)*normal - lightDirection);\", // Could also have used the function reflect ()\n    \"   float dotNL = max(dot(normal,lightDirection), 0.0) ;\", // If negative , set to zero\n    \"   float dotRV = max(dot(R,normalize(fragViewDirection)), 0.0);\", \"   if ( dotNL == 0.0) dotRV = 0.0;\", // Do not show highlight on the dark side\n    \"   vec3 shadedColor = Ia*ka + Id*kd*dotNL + Is*kd*pow(dotRV, n);\", \"\", \"\tgl_FragColor = vec4(shadedColor, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n  SetDiffuseColor(intensity, surface) {\n    this.Id = \"vec3 Id = vec3(\" + intensity[0] + \",\" + intensity[1] + \",\" + intensity[2] + \");\"; // the diffuse illumination color\n\n    this.kd = \"vec3 kd = vec3(\" + surface[0] + \",\" + surface[1] + \",\" + surface[2] + \");\"; // the diffuse illumination color\n  }\n\n}\n\nexport default FragmentShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\FragmentShader.js"],"names":["FragmentShader","constructor","n","ka","Ia","kd","Id","ks","Is","file","join","SetDiffuseColor","intensity","surface"],"mappings":"AAEA,MAAMA,cAAN,CAAqB;AAEjBC,EAAAA,WAAW,GAAG;AAEV,SAAKC,CAAL,GAAS,iBAAT,CAFU,CAEkB;;AAC5B,SAAKC,EAAL,GAAU,mCAAV,CAHU,CAGqC;;AAC/C,SAAKC,EAAL,GAAU,gCAAV,CAJU,CAIkC;;AAC5C,SAAKC,EAAL,GAAU,gCAAV,CALU,CAKkC;;AAC5C,SAAKC,EAAL,GAAU,gCAAV,CANU,CAMkC;;AAC5C,SAAKC,EAAL,GAAU,gCAAV,CAPU,CAOkC;;AAC5C,SAAKC,EAAL,GAAU,gCAAV,CARU,CAQkC;;AAE5C,SAAKC,IAAL,GAAY,CACR,0BADQ,EAER,EAFQ,EAGR,yBAHQ,EAIR,kCAJQ,EAKR,iCALQ,EAMR,EANQ,EAOR,uDAPQ,EAQR,KAAKP,CARG,EAQA;AACR,SAAKC,EATG,EASC;AACT,SAAKC,EAVG,EAUC;AACT,SAAKC,EAXG,EAWC;AACT,SAAKC,EAZG,EAYC;AACT,SAAKC,EAbG,EAaC;AACT,SAAKC,EAdG,EAcC;AACT,MAfQ,EAgBR,eAhBQ,EAiBR,EAjBQ,EAkBR,oBAlBQ,EAmBR,cAnBQ,EAoBR,iDApBQ,EAqBR,gFArBQ,EAqB0E;AAClF,6DAtBQ,EAsBmD;AAC3D,qEAvBQ,EAwBR,oCAxBQ,EAwB8B;AACtC,sEAzBQ,EA0BR,EA1BQ,EA2BR,yCA3BQ,EA4BR,GA5BQ,EA6BVE,IA7BU,CA6BL,IA7BK,CAAZ;AA8BH;;AAEDC,EAAAA,eAAe,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAChC,SAAKP,EAAL,GAAU,oBAAoBM,SAAS,CAAC,CAAD,CAA7B,GAAmC,GAAnC,GAAyCA,SAAS,CAAC,CAAD,CAAlD,GAAwD,GAAxD,GAA8DA,SAAS,CAAC,CAAD,CAAvE,GAA6E,IAAvF,CADgC,CAC6D;;AAC7F,SAAKP,EAAL,GAAU,oBAAoBQ,OAAO,CAAC,CAAD,CAA3B,GAAiC,GAAjC,GAAuCA,OAAO,CAAC,CAAD,CAA9C,GAAoD,GAApD,GAA0DA,OAAO,CAAC,CAAD,CAAjE,GAAuE,IAAjF,CAFgC,CAEuD;AAC1F;;AA/CgB;;AAkDrB,eAAeb,cAAf","sourcesContent":["\r\n\r\nclass FragmentShader {\r\n\r\n    constructor() {\r\n\r\n        this.n = \"float n = 60.0;\"; // the shininess parameter\\n\r\n        this.ka = \"vec3 ka = vec3(0.15, 0.15, 0.15);\"; // the ambient reflection color;\r\n        this.Ia = \"vec3 Ia = vec3(1.0, 1.0, 1.0);\"; // the ambient illumination color\r\n        this.kd = \"vec3 kd = vec3(0.0, 0.0, 0.0);\"; // the diffuse surface reflection color\r\n        this.Id = \"vec3 Id = vec3(1.0, 1.0, 1.0);\"; // the diffuse illumination color\r\n        this.ks = \"vec3 ks = vec3(0.5, 0.5, 0.5);\"; // the specular surface reflection color\r\n        this.Is = \"vec3 Is = vec3(1.0, 1.0, 1.0);\"; // the specular illumination color\r\n        \r\n        this.file = [\r\n            \"precision mediump float;\",\r\n            \"\",\r\n            \"varying vec3 fragColor;\",\r\n            \"varying vec3 interpolatedNormal;\",\r\n            \"varying vec3 fragViewDirection;\",\r\n            \"\",\r\n            \"vec3 lightDirection = normalize(vec3(1.0, 2.0, 3.5));\",\r\n            this.n, // the shininess parameter\\n\r\n            this.ka, // the ambient reflection color\r\n            this.Ia, // the ambient illumination color\r\n            this.kd, // the diffuse surface reflection color\r\n            this.Id, // the diffuse illumination color\r\n            this.ks, // the specular surface reflection color\r\n            this.Is, // the specular illumination color\r\n            \"\",\r\n            \"void main() {\",\r\n            \"\",\r\n            \"   kd = fragColor;\",\r\n            \"   ka *= kd;\",\r\n            \"   vec3 normal = normalize(interpolatedNormal);\",\r\n            \"   vec3 R = normalize(2.0*dot(normal,lightDirection)*normal - lightDirection);\", // Could also have used the function reflect ()\r\n            \"   float dotNL = max(dot(normal,lightDirection), 0.0) ;\", // If negative , set to zero\r\n            \"   float dotRV = max(dot(R,normalize(fragViewDirection)), 0.0);\",\r\n            \"   if ( dotNL == 0.0) dotRV = 0.0;\", // Do not show highlight on the dark side\r\n            \"   vec3 shadedColor = Ia*ka + Id*kd*dotNL + Is*kd*pow(dotRV, n);\",\r\n            \"\",\r\n            \"\tgl_FragColor = vec4(shadedColor, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    SetDiffuseColor(intensity, surface) {\r\n        this.Id = \"vec3 Id = vec3(\" + intensity[0] + \",\" + intensity[1] + \",\" + intensity[2] + \");\"; // the diffuse illumination color\r\n        this.kd = \"vec3 kd = vec3(\" + surface[0] + \",\" + surface[1] + \",\" + surface[2] + \");\"; // the diffuse illumination color\r\n    }\r\n}\r\n\r\nexport default FragmentShader;"]},"metadata":{},"sourceType":"module"}
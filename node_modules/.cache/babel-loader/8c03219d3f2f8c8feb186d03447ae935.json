{"ast":null,"code":"class PhongLightingShader {\n  static get vertex() {\n    return [\"precision highp float;\", \"\", // Attribute locations\n    \"attribute vec3 vertPosition;\", \"attribute vec3 vertNormal;\", \"attribute vec2 vertTexCoord;\", \"\", // Transformation matrices\n    \"uniform mat4 cameraView;\", \"uniform mat4 modelView;\", \"uniform mat4 perspective;\", \"\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"\", \"void main() {\", // Final transformation ( Perspective multiplied with the model view )\n    \"   mat4 T = perspective * cameraView * modelView;\", // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\n    \"   gl_Position = T * vec4(vertPosition, 1.0);\", \"\", // Fragment shader input variables\n    \"   Normal = normalize(mat3(modelView)*vertNormal);\", \"   TexCoords = vertTexCoord;\", \"   FragPosition = vec3(modelView * vec4(vertPosition, 1.0));\", \"}\"].join(\"\\n\");\n  }\n\n  static get fragment() {\n    return [// Float precision\n    \"precision highp float;\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"\", // Shader inputs\n    \"uniform vec3 viewPosition;\", \"uniform vec3 lightPosition;\", \"uniform vec3 diffuseColor;\", \"uniform vec3 lightColor;\", \"\", \"void main() {\", \"vec3 viewDirection = normalize(viewPosition - FragPosition);\", \"vec3 lightDirection = normalize(lightPosition - FragPosition);\", \"vec3 reflectDirection = reflect(-lightDirection, Normal);\", \"\", // Ambient lighting\n    \"float ambientStrength = 0.05;\", \"vec3 ambient = ambientStrength * lightColor * diffuseColor;\", \"\", // Diffuse lighting\n    \"   float diff = max(dot(Normal, lightDirection), 0.0);\", \"   vec3 diffuse = (diff * lightColor * diffuseColor);\", \"\", // Specular lighting\n    \"float specularStrength = 0.5;\", \"float shininess = 32.0;\", \"float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\", \"vec3 specular = specularStrength * spec * lightColor * diff;\", \"\", // Calculate the intensity decrement\n    \"float dist = distance(lightPosition, FragPosition);\", \"float intensity = min(80.0 / dist, 1.0);\", \"\", // Phong lighting model\n    \"vec3 phong = ambient + ((diffuse + specular) * intensity);\", // Final shaded color (texture * lighting)\n    \"gl_FragColor = vec4 (phong, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default PhongLightingShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\PhongLightingShader.js"],"names":["PhongLightingShader","vertex","join","fragment"],"mappings":"AAAA,MAAMA,mBAAN,CAA0B;AACtB,aAAWC,MAAX,GAAqB;AACjB,WAAO,CACH,wBADG,EAEH,EAFG,EAGH;AACA,kCAJG,EAKH,4BALG,EAMH,8BANG,EAOH,EAPG,EAQH;AACA,8BATG,EAUH,yBAVG,EAWH,2BAXG,EAYH,EAZG,EAaH;AACA,6BAdG,EAeH,sBAfG,EAgBH,4BAhBG,EAiBH,EAjBG,EAkBH,eAlBG,EAmBH;AACA,uDApBG,EAqBH;AACA,mDAtBG,EAuBH,EAvBG,EAwBH;AACA,wDAzBG,EA0BH,8BA1BG,EA2BH,8DA3BG,EA4BH,GA5BG,EA6BLC,IA7BK,CA6BA,IA7BA,CAAP;AA8BH;;AAED,aAAWC,QAAX,GAAuB;AACnB,WAAO,CACH;AACA,4BAFG,EAGH;AACA,6BAJG,EAKH,sBALG,EAMH,4BANG,EAOH,EAPG,EAQH;AACA,gCATG,EAUH,6BAVG,EAWH,4BAXG,EAYH,0BAZG,EAaH,EAbG,EAcH,eAdG,EAeC,8DAfD,EAgBC,gEAhBD,EAiBC,2DAjBD,EAkBC,EAlBD,EAmBC;AACA,mCApBD,EAqBC,6DArBD,EAsBC,EAtBD,EAuBC;AACA,4DAxBD,EAyBC,uDAzBD,EA0BC,EA1BD,EA2BC;AACA,mCA5BD,EA6BC,yBA7BD,EA8BC,8EA9BD,EA+BC,8DA/BD,EAgCC,EAhCD,EAiCC;AACA,yDAlCD,EAmCC,0CAnCD,EAoCC,EApCD,EAqCC;AACA,gEAtCD,EAuCC;AACA,uCAxCD,EAyCH,GAzCG,EA0CLD,IA1CK,CA0CA,IA1CA,CAAP;AA2CH;;AA9EqB;;AAiF1B,eAAeF,mBAAf","sourcesContent":["class PhongLightingShader {\r\n    static get vertex () {\r\n        return [\r\n            \"precision highp float;\",\r\n            \"\",\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n            \"\",\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n            \"\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"\",\r\n            \"void main() {\",\r\n            // Final transformation ( Perspective multiplied with the model view )\r\n            \"   mat4 T = perspective * cameraView * modelView;\",\r\n            // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\r\n            \"   gl_Position = T * vec4(vertPosition, 1.0);\",\r\n            \"\",\r\n            // Fragment shader input variables\r\n            \"   Normal = normalize(mat3(modelView)*vertNormal);\",\r\n            \"   TexCoords = vertTexCoord;\",\r\n            \"   FragPosition = vec3(modelView * vec4(vertPosition, 1.0));\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    static get fragment () {\r\n        return [\r\n            // Float precision\r\n            \"precision highp float;\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"\",\r\n            // Shader inputs\r\n            \"uniform vec3 viewPosition;\",\r\n            \"uniform vec3 lightPosition;\",\r\n            \"uniform vec3 diffuseColor;\",\r\n            \"uniform vec3 lightColor;\",\r\n            \"\",\r\n            \"void main() {\",\r\n                \"vec3 viewDirection = normalize(viewPosition - FragPosition);\",\r\n                \"vec3 lightDirection = normalize(lightPosition - FragPosition);\",\r\n                \"vec3 reflectDirection = reflect(-lightDirection, Normal);\",\r\n                \"\",\r\n                // Ambient lighting\r\n                \"float ambientStrength = 0.05;\",\r\n                \"vec3 ambient = ambientStrength * lightColor * diffuseColor;\",\r\n                \"\",\r\n                // Diffuse lighting\r\n                \"   float diff = max(dot(Normal, lightDirection), 0.0);\",\r\n                \"   vec3 diffuse = (diff * lightColor * diffuseColor);\",\r\n                \"\",\r\n                // Specular lighting\r\n                \"float specularStrength = 0.5;\",\r\n                \"float shininess = 32.0;\",\r\n                \"float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\",\r\n                \"vec3 specular = specularStrength * spec * lightColor * diff;\",\r\n                \"\",\r\n                // Calculate the intensity decrement\r\n                \"float dist = distance(lightPosition, FragPosition);\",\r\n                \"float intensity = min(80.0 / dist, 1.0);\",\r\n                \"\",\r\n                // Phong lighting model\r\n                \"vec3 phong = ambient + ((diffuse + specular) * intensity);\",\r\n                // Final shaded color (texture * lighting)\r\n                \"gl_FragColor = vec4 (phong, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default PhongLightingShader;"]},"metadata":{},"sourceType":"module"}
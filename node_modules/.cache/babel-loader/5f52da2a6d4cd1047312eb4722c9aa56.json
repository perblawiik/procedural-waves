{"ast":null,"code":"// JavaScript\nimport Shader from \"./Shader\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./EventHandler\";\nimport GraphicsEngine from \"./GraphicsEngine\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 100.0, 500.0];\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER: 2,\n  PLANE: 3\n};\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.sceneObjects = [];\n    this.graphicsEngine = new GraphicsEngine();\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Keeps track of time passed and delta time\n    Time.update();\n    graphicsEngine.run();\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let aspectRatio = this.canvas.width / this.canvas.height; // Update the projection matrix\n\n    this.mainShader.setProjectionMatrix(aspectRatio); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  preload() {\n    // Initiate the mouse event handler\n    this.eventHandler = new EventHandler(this.sceneObjects); // 2D Canvas for text display\n\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    }\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas);\n    this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create scene objects\n\n    this.loadDefaultSceneObjects(); // Define event listeners for mouse events\n    //this.setUpEventListeners();\n  }\n\n  drawScene() {\n    // Clear screen 3D\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scene objects\n\n    this.sceneObjects.forEach(object => {\n      object.render();\n    }); // Clear depth so that local coordinate axes is visible through models\n    // Draw local coordinate axes UI\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.mainShader);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER) {\n      mesh.createCylinder(32, 1);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name, this.mainShader);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    this.sceneObjects.push(obj);\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Set text font style\n      this.ctx.font = \"20px Consolas\";\n      this.ctx.fillStyle = 'white'; // Fps = the number of frames\n\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0; // Clear previous\n\n      this.ctx.clearRect(0, 0, this.canvas.width, 30); // Draw fps and frame time in milliseconds\n\n      this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 10, 25);\n    } else {\n      ++this.frameCount;\n    }\n  }\n\n  loadDefaultSceneObjects() {\n    // Create a white sphere\n    this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Lamp',\n      scale: [10.0, 10.0, 10.0],\n      position: [150.0, 75.0, -150.0],\n      color: [1.0, 1.0, 1.0]\n    }); // Set light position to the same as the white sphere\n\n    this.mainShader.setLightPosition(this.sceneObjects[0].transform.position); // Create a red cube\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [10.0, 10.0, 10.0],\n      position: [0.0, 10.0, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); // Create a green sphere\n\n    this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [10.0, 10.0, 10.0],\n      position: [40.0, 20.0, 20.0],\n      color: [0.0, 1.0, 0.0]\n    }); // Create a magenta cylinder\n\n    this.createGameObject({\n      shape: SHAPE.CYLINDER,\n      name: 'Magenta Cylinder',\n      scale: [10.0, 10.0, 10.0],\n      position: [-40.0, 20.0, 20.0],\n      color: [1.0, 0.0, 1.0]\n    }); // Create gray floor\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 100.0, 0.0],\n      color: [0.5, 0.5, 0.5]\n    }); // Create gray roof\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    }); // Create Walls\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 01',\n      scale: [1.0, 50.0, 200.0],\n      position: [-200.0, 50.0, 0],\n      color: [0.0, 0.0, 0.25]\n    });\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 02',\n      scale: [1.0, 50.0, 200.0],\n      position: [200.0, 50.0, 0],\n      color: [0.0, 0.0, 0.25]\n    });\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 03',\n      scale: [200.0, 50.0, 1.0],\n      position: [0.0, 50.0, -200],\n      color: [0.0, 0.0, 0.25]\n    });\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","GraphicsEngine","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER","PLANE","Engine","constructor","lastTime","frameCount","fps","sceneObjects","graphicsEngine","run","update","updateViewportDimensions","aspectRatio","canvas","width","height","mainShader","setProjectionMatrix","gl","viewport","preload","eventHandler","canvas2D","document","getElementById","ctx","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","camera","cameraViewUniformLocation","setPosition","setRotation","loadDefaultSceneObjects","drawScene","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","forEach","object","render","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinder","createPlane","setColor","color","obj","name","position","setScale","scale","addMesh","push","displayFrameRate","currentTime","time","font","fillStyle","clearRect","fillText","setLightPosition","transform"],"mappings":"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","sourcesContent":["// JavaScript\r\nimport Shader from \"./Shader\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./EventHandler\";\r\nimport GraphicsEngine from \"./GraphicsEngine\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 100.0, 500.0];\r\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER: 2,\r\n    PLANE: 3\r\n};\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.sceneObjects = [];\r\n\r\n        this.graphicsEngine = new GraphicsEngine();\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Keeps track of time passed and delta time\r\n        Time.update();\r\n\r\n        graphicsEngine.run();\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let aspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Update the projection matrix\r\n        this.mainShader.setProjectionMatrix(aspectRatio);\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    preload() {\r\n        // Initiate the mouse event handler\r\n        this.eventHandler = new EventHandler(this.sceneObjects);\r\n\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects();\r\n\r\n        // Define event listeners for mouse events\r\n        //this.setUpEventListeners();\r\n    }\r\n\r\n    drawScene() {\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scene objects\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render();\r\n        });\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n\r\n        // Draw local coordinate axes UI\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.mainShader);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER) {\r\n            mesh.createCylinder(32,1);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name, this.mainShader);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        this.sceneObjects.push(obj);\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Set text font style\r\n            this.ctx.font = \"20px Consolas\";\r\n            this.ctx.fillStyle = 'white';\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n            // Clear previous\r\n            this.ctx.clearRect(0, 0, this.canvas.width, 30);\r\n            // Draw fps and frame time in milliseconds\r\n            this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 10, 25);\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n    }\r\n\r\n    loadDefaultSceneObjects() {\r\n        // Create a white sphere\r\n        this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Lamp',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [150.0, 75.0, -150.0],\r\n            color: [1.0, 1.0, 1.0]\r\n        });\r\n\r\n        // Set light position to the same as the white sphere\r\n        this.mainShader.setLightPosition(this.sceneObjects[0].transform.position);\r\n\r\n        // Create a red cube\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [0.0, 10.0, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n\r\n        // Create a green sphere\r\n        this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Green Sphere',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [40.0, 20.0, 20.0],\r\n            color: [0.0, 1.0, 0.0]\r\n        });\r\n\r\n        // Create a magenta cylinder\r\n        this.createGameObject({\r\n            shape: SHAPE.CYLINDER,\r\n            name: 'Magenta Cylinder',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [-40.0, 20.0, 20.0],\r\n            color: [1.0, 0.0, 1.0]\r\n        });\r\n\r\n        // Create gray floor\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Floor',\r\n            scale: [200.0, 1.0, 200.0],\r\n            position: [0.0, 100.0, 0.0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n\r\n        // Create gray roof\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Roof',\r\n            scale: [200.0, 1.0, 200.0],\r\n            position: [0.0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n\r\n        // Create Walls\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 01',\r\n            scale: [1.0, 50.0, 200.0],\r\n            position: [-200.0, 50.0, 0],\r\n            color: [0.0, 0.0, 0.25]\r\n        });\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 02',\r\n            scale: [1.0, 50.0, 200.0],\r\n            position: [200.0, 50.0, 0],\r\n            color: [0.0, 0.0, 0.25]\r\n        });\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 03',\r\n            scale: [200.0, 50.0, 1.0],\r\n            position: [0.0, 50.0, -200],\r\n            color: [0.0, 0.0, 0.25]\r\n        });\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
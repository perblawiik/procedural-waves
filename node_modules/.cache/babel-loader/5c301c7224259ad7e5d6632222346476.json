{"ast":null,"code":"import Time from \"./Time\";\nimport Vector3 from \"./math/Vector3\";\n\nclass Scene {\n  constructor(shaders) {\n    this.sceneObjects = [];\n    this.lightSources = [];\n    this.shaders = shaders;\n  }\n\n  addGameObject(gameObject) {\n    this.sceneObjects.push(gameObject);\n  }\n\n  addLightSource(lightSource) {\n    this.lightSources.push(lightSource);\n    let lightPositions = [];\n\n    for (let i = 0; i < this.lightSources.length; ++i) {\n      lightPositions[i * 3] = this.lightSources[i].transform.position.x;\n      lightPositions[i * 3 + 1] = this.lightSources[i].transform.position.y;\n      lightPositions[i * 3 + 2] = this.lightSources[i].transform.position.z;\n    }\n\n    lightPositions[3] = 150.0;\n    lightPositions[4] = 75.0;\n    lightPositions[5] = -150.0;\n    lightPositions[6] = -150.0;\n    lightPositions[7] = 75.0;\n    lightPositions[8] = -150.0;\n    let lightPositionsUniformLoc = this.shaders.get(\"main\").getUniformLoc(\"lightPositions\");\n    let lightColorUniformLoc = this.shaders.get(\"main\").getUniformLoc(\"lightColor\");\n    this.shaders.get(\"main\").setUniformVec3Array(lightPositionsUniformLoc, lightPositions);\n    this.shaders.get(\"main\").setUniformVec3Array(lightColorUniformLoc, new Vector3([1.0, 1.0, 1.0]));\n  }\n\n  draw() {\n    this.sceneObjects.forEach(object => {\n      object.render(this.shaders.get(\"main\"));\n    });\n    this.lightSources.forEach(lightSource => {\n      //let currentPos = lightSource.transform.position;\n      //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\n      //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\n      lightSource.render(this.shaders.get(\"ambient\"));\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Scene.js"],"names":["Time","Vector3","Scene","constructor","shaders","sceneObjects","lightSources","addGameObject","gameObject","push","addLightSource","lightSource","lightPositions","i","length","transform","position","x","y","z","lightPositionsUniformLoc","get","getUniformLoc","lightColorUniformLoc","setUniformVec3Array","draw","forEach","object","render"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKF,OAAL,GAAeA,OAAf;AACH;;AAEDG,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKH,YAAL,CAAkBI,IAAlB,CAAuBD,UAAvB;AACH;;AAEDE,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB,SAAKL,YAAL,CAAkBG,IAAlB,CAAuBE,WAAvB;AAEA,QAAIC,cAAc,GAAG,EAArB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKP,YAAL,CAAkBQ,MAAtC,EAA8C,EAAED,CAAhD,EAAmD;AAC/CD,MAAAA,cAAc,CAACC,CAAC,GAAG,CAAL,CAAd,GAAwB,KAAKP,YAAL,CAAkBO,CAAlB,EAAqBE,SAArB,CAA+BC,QAA/B,CAAwCC,CAAhE;AACAL,MAAAA,cAAc,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAd,GAA4B,KAAKP,YAAL,CAAkBO,CAAlB,EAAqBE,SAArB,CAA+BC,QAA/B,CAAwCE,CAApE;AACAN,MAAAA,cAAc,CAACC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAd,GAA4B,KAAKP,YAAL,CAAkBO,CAAlB,EAAqBE,SAArB,CAA+BC,QAA/B,CAAwCG,CAApE;AACH;;AAEDP,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,KAApB;AACAA,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,IAApB;AACAA,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAAC,KAArB;AAEAA,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAAC,KAArB;AACAA,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,IAApB;AACAA,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoB,CAAC,KAArB;AAEA,QAAIQ,wBAAwB,GAAG,KAAKhB,OAAL,CAAaiB,GAAb,CAAiB,MAAjB,EAAyBC,aAAzB,CAAuC,gBAAvC,CAA/B;AACA,QAAIC,oBAAoB,GAAG,KAAKnB,OAAL,CAAaiB,GAAb,CAAiB,MAAjB,EAAyBC,aAAzB,CAAuC,YAAvC,CAA3B;AACA,SAAKlB,OAAL,CAAaiB,GAAb,CAAiB,MAAjB,EAAyBG,mBAAzB,CAA6CJ,wBAA7C,EAAuER,cAAvE;AACA,SAAKR,OAAL,CAAaiB,GAAb,CAAiB,MAAjB,EAAyBG,mBAAzB,CAA6CD,oBAA7C,EAAmE,IAAItB,OAAJ,CAAY,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAZ,CAAnE;AACH;;AAEDwB,EAAAA,IAAI,GAAG;AACH,SAAKpB,YAAL,CAAkBqB,OAAlB,CAA2BC,MAAD,IAAW;AACjCA,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKxB,OAAL,CAAaiB,GAAb,CAAiB,MAAjB,CAAd;AACH,KAFD;AAIA,SAAKf,YAAL,CAAkBoB,OAAlB,CAA2Bf,WAAD,IAAiB;AACvC;AACA;AACA;AACAA,MAAAA,WAAW,CAACiB,MAAZ,CAAmB,KAAKxB,OAAL,CAAaiB,GAAb,CAAiB,SAAjB,CAAnB;AACH,KALD;AAMH;;AA9CO;;AAiDZ,eAAenB,KAAf","sourcesContent":["import Time from \"./Time\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n    }\r\n\r\n    addGameObject(gameObject) {\r\n        this.sceneObjects.push(gameObject);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        this.lightSources.push(lightSource);\r\n\r\n        let lightPositions = [];\r\n        for (let i = 0; i < this.lightSources.length; ++i) {\r\n            lightPositions[i * 3] = this.lightSources[i].transform.position.x;\r\n            lightPositions[i * 3 + 1] = this.lightSources[i].transform.position.y;\r\n            lightPositions[i * 3 + 2] = this.lightSources[i].transform.position.z;\r\n        }\r\n\r\n        lightPositions[3] = 150.0;\r\n        lightPositions[4] = 75.0;\r\n        lightPositions[5] = -150.0;\r\n\r\n        lightPositions[6] = -150.0;\r\n        lightPositions[7] = 75.0;\r\n        lightPositions[8] = -150.0;\r\n\r\n        let lightPositionsUniformLoc = this.shaders.get(\"main\").getUniformLoc(\"lightPositions\");\r\n        let lightColorUniformLoc = this.shaders.get(\"main\").getUniformLoc(\"lightColor\");\r\n        this.shaders.get(\"main\").setUniformVec3Array(lightPositionsUniformLoc, lightPositions);\r\n        this.shaders.get(\"main\").setUniformVec3Array(lightColorUniformLoc, new Vector3([1.0, 1.0, 1.0]));\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(\"main\"));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            //let currentPos = lightSource.transform.position;\r\n            //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\r\n            //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}
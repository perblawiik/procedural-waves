{"ast":null,"code":"import Vector3 from \"./math/Vector3\";\nimport RigidBody from \"./RigidBody\";\n\nclass Bullets {\n  constructor(bulletModel, bulletSpeed, bulletReach) {\n    this.activeBullets = [];\n    this.model = bulletModel;\n    this.speed = bulletSpeed;\n    this.reach = bulletReach;\n    this.gravityIsEnabled = false;\n    this.gravity = 9.82;\n    this.rigidBodies = [];\n  }\n\n  addBullet(origin, direction) {\n    this.activeBullets.push({\n      origin: new Vector3(origin),\n      position: origin,\n      direction: direction,\n      time: 0.0\n    });\n    let rb = new RigidBody([origin.x, origin.y, origin.z]);\n    rb.setVelocity([direction.x * this.speed, direction.y * this.speed, direction.z * this.speed]);\n    this.rigidBodies.push(rb);\n    console.log(rb);\n  }\n\n  calculateProjectileMotion(timeStep) {\n    let i = 0;\n\n    while (i < this.activeBullets.length) {\n      let t = this.activeBullets[i].time;\n      let x = this.activeBullets[i].origin.x + this.activeBullets[i].direction.x * this.speed * t;\n      let y = this.activeBullets[i].origin.y + this.activeBullets[i].direction.y * this.speed * t;\n      let z = this.activeBullets[i].origin.z + this.activeBullets[i].direction.z * this.speed * t; // Add gravity if it's enabled\n\n      if (this.gravityIsEnabled) {\n        y -= 0.5 * this.gravity * t * t;\n      }\n\n      if (Vector3.distance(new Vector3([x, y, z]), this.activeBullets[i].origin) < this.reach) {\n        // Save current position\n        this.activeBullets[i].position = [x, y, z];\n        this.activeBullets[i].time += timeStep;\n        ++i;\n      } else {\n        // Remove bullet if distance is too great\n        this.activeBullets.splice(i, 1);\n      }\n    }\n  }\n\n  enableGravity() {\n    this.gravityIsEnabled = true;\n  }\n\n  disableGravity() {\n    this.gravityIsEnabled = false;\n  }\n\n  update(timeStep) {\n    //this.calculateProjectileMotion(timeStep);\n    let i = 0;\n\n    while (i < this.rigidBodies.length) {\n      this.rigidBodies[i].update(timeStep);\n\n      if (Vector3.distance(this.rigidBodies[i].position, this.activeBullets[i].origin) < this.reach) {\n        ++i;\n      } else {\n        // Remove bullet if distance is too great\n        this.rigidBodies.splice(i, 1);\n        this.activeBullets.splice(i, 1);\n      }\n    }\n  }\n\n  render(shader) {\n    /*\r\n    this.activeBullets.forEach((bulletInfo) => {\r\n        // Set bullet position\r\n        this.model.setPosition(bulletInfo.position);\r\n        // Draw bullet\r\n        this.model.render(shader);\r\n    });\r\n    */\n    this.rigidBodies.forEach(rb => {\n      // Set bullet position\n      this.model.setPosition([rb.position.x, rb.position.y, rb.position.z]); // Draw bullet\n\n      this.model.render(shader);\n    });\n  }\n\n}\n\nexport default Bullets;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Bullets.js"],"names":["Vector3","RigidBody","Bullets","constructor","bulletModel","bulletSpeed","bulletReach","activeBullets","model","speed","reach","gravityIsEnabled","gravity","rigidBodies","addBullet","origin","direction","push","position","time","rb","x","y","z","setVelocity","console","log","calculateProjectileMotion","timeStep","i","length","t","distance","splice","enableGravity","disableGravity","update","render","shader","forEach","setPosition"],"mappings":"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","sourcesContent":["import Vector3 from \"./math/Vector3\";\r\nimport RigidBody from \"./RigidBody\";\r\n\r\nclass Bullets {\r\n    constructor (bulletModel, bulletSpeed, bulletReach) {\r\n        this.activeBullets = [];\r\n        this.model = bulletModel;\r\n        this.speed = bulletSpeed;\r\n        this.reach = bulletReach;\r\n\r\n        this.gravityIsEnabled = false;\r\n        this.gravity = 9.82;\r\n\r\n        this.rigidBodies = [];\r\n    }\r\n\r\n    addBullet(origin, direction) {\r\n        this.activeBullets.push({\r\n            origin: new Vector3(origin),\r\n            position: origin,\r\n            direction: direction,\r\n            time: 0.0\r\n        });\r\n\r\n        let rb = new RigidBody([origin.x, origin.y, origin.z]);\r\n        rb.setVelocity([direction.x * this.speed, direction.y * this.speed, direction.z * this.speed]);\r\n        this.rigidBodies.push(rb);\r\n\r\n        console.log(rb);\r\n    }\r\n\r\n    calculateProjectileMotion(timeStep) {\r\n        let i = 0;\r\n        while(i < this.activeBullets.length) {\r\n            let t = this.activeBullets[i].time;\r\n            let x = this.activeBullets[i].origin.x + (this.activeBullets[i].direction.x * this.speed * t);\r\n            let y = this.activeBullets[i].origin.y + (this.activeBullets[i].direction.y * this.speed * t);\r\n            let z = this.activeBullets[i].origin.z + (this.activeBullets[i].direction.z * this.speed * t);\r\n\r\n            // Add gravity if it's enabled\r\n            if (this.gravityIsEnabled) {\r\n                y -= (0.5 * this.gravity * t * t);\r\n            }\r\n\r\n            if (Vector3.distance(new Vector3([x, y, z]), this.activeBullets[i].origin) < this.reach) {\r\n                // Save current position\r\n                this.activeBullets[i].position = [x, y, z];\r\n                this.activeBullets[i].time += timeStep;\r\n                ++i;\r\n            }\r\n            else { // Remove bullet if distance is too great\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    enableGravity() {\r\n        this.gravityIsEnabled = true;\r\n    }\r\n\r\n    disableGravity() {\r\n        this.gravityIsEnabled = false;\r\n    }\r\n\r\n    update(timeStep) {\r\n        //this.calculateProjectileMotion(timeStep);\r\n\r\n        let i = 0;\r\n        while(i < this.rigidBodies.length) {\r\n            this.rigidBodies[i].update(timeStep);\r\n            if (Vector3.distance(this.rigidBodies[i].position, this.activeBullets[i].origin) < this.reach) {\r\n                ++i;\r\n            }\r\n            else {// Remove bullet if distance is too great\r\n                this.rigidBodies.splice(i, 1);\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(shader) {\r\n        /*\r\n        this.activeBullets.forEach((bulletInfo) => {\r\n            // Set bullet position\r\n            this.model.setPosition(bulletInfo.position);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        });\r\n        */\r\n        this.rigidBodies.forEach((rb) => {\r\n            // Set bullet position\r\n            this.model.setPosition([rb.position.x, rb.position.y, rb.position.z]);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        })\r\n    }\r\n}\r\n\r\nexport default Bullets;"]},"metadata":{},"sourceType":"module"}
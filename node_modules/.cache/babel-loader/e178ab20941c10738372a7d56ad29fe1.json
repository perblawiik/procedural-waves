{"ast":null,"code":"import SphereCollider from \"./SphereCollider\";\nimport Vector3 from \"./math/Vector3\";\nimport Raycast from \"./Raycast\";\nimport CollisionManager from \"./CollisionManager\";\n\nclass RigidBody {\n  constructor(position, mass = 1.0) {\n    this.id = -1;\n    this.position = new Vector3(position);\n    this.velocity = new Vector3([0.0, 0.0, 0.0]);\n    this.acceleration = new Vector3([0.0, 0.0, 0.0]);\n    this.collider = new SphereCollider();\n    this.mass = mass;\n    this.enableGravity(true);\n    this.inCollision = false;\n  }\n\n  setVelocity(vel) {\n    this.velocity.set(vel);\n  }\n\n  setAcceleration(acc) {\n    this.acceleration.set(acc);\n  }\n\n  setPosition(pos) {\n    this.position.set(pos);\n  }\n\n  enableGravity(state) {\n    if (state) this.gravity = 9.82;else this.gravity = 0.0;\n  }\n\n  get gravityIsEnabled() {\n    return this.gravity > 0.1;\n  }\n\n  update(timeStep) {\n    this.updateMotion(timeStep);\n    this.handlePlaneCollisions(timeStep);\n    this.scanForBodyCollisions(timeStep);\n    this.handleBodyCollisions(timeStep);\n    return true;\n  }\n\n  updateMotion(timeStep) {\n    this.velocity.set([this.velocity.x + this.acceleration.x * timeStep, this.velocity.y + (this.acceleration.y - this.gravity) * timeStep, this.velocity.z + this.acceleration.z * timeStep]);\n    this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]);\n  }\n\n  handlePlaneCollisions(timeStep) {\n    let planes = CollisionManager.getPlaneColliders();\n    let rayDir = this.velocity.normalized();\n    let rayOrigin = this.position.clone(); // Find closest intersectionPoint\n\n    planes.forEach(plane => {\n      // If the plane intersection test returns null, no plane was found\n      let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\n\n      if (intersectionPoint !== null) {\n        // Calculate the closest distance from the rigid body collider and the plane\n        let distanceToPlane = Vector3.dot(plane.normal, Vector3.subtract(rayOrigin, intersectionPoint)); // Check if the sphere is intersecting the plane\n\n        if (distanceToPlane < this.collider.radius) {\n          // Move the object to the plane surface\n          let diff = this.collider.radius - distanceToPlane;\n          this.position.set([this.position.x + plane.normal.x * diff, this.position.y + plane.normal.y * diff, this.position.z + plane.normal.z * diff]); // Calculate the bounce velocity\n\n          let bounce = this.velocity.magnitude * 0.8;\n          let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir);\n          this.velocity.set([-reflectDirection.x * bounce, -reflectDirection.y * bounce, -reflectDirection.z * bounce]);\n          this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]);\n        }\n      }\n    });\n  }\n\n  scanForBodyCollisions(timeStep) {\n    // If the rigid body is not moving, don't check for target collisions\n    if (this.velocity.magnitude < 0.1) {\n      return;\n    } //TODO: Optimize collision scanning (if two bodies have collided, we dont need to check collision again in this update\n\n\n    let sceneRigidBodies = CollisionManager.getRigidBodies();\n    sceneRigidBodies.forEach(target => {\n      // Dont check for collision with itself\n      if (this.id !== target.id) {\n        let targetDistance = Vector3.distance(target.position, this.position); // If target distance is within this collider radius and target collider radius, we have a collision\n\n        if (targetDistance < target.collider.radius + this.collider.radius) {\n          this.handleBodyCollisions(timeStep, target, targetDistance);\n        }\n      }\n    });\n  }\n\n  handleBodyCollisions(timeStep, target, targetDistance) {\n    console.log(target); // Get velocity directions\n\n    let thisVelocityDirection = this.velocity.normalized();\n    let targetVelocityDirection = target.velocity.normalized(); // Move the body outside of collision area\n\n    let diff = this.collider.radius + target.collider.radius - targetDistance;\n    this.position.set([this.position.x - thisVelocityDirection.x * diff, this.position.y - thisVelocityDirection.y * diff, this.position.z - thisVelocityDirection.z * diff]);\n    let toTarget = Vector3.subtract(target.position, this.position).normalized();\n    let fromTarget = toTarget.inverted();\n    let thisNewDirection = Vector3.add(toTarget, thisVelocityDirection).normalized();\n    let targetNewDirection = Vector3.add(fromTarget, targetVelocityDirection).normalized();\n    let thisMultiplier = Math.abs(Vector3.dot(thisVelocityDirection, toTarget));\n    let targetMultiplier = Math.abs(Vector3.dot(targetVelocityDirection, fromTarget));\n    let thisSpeedBefore = this.velocity.magnitude;\n    let targetSpeedBefore = target.velocity.magnitude; // Elastic Collision Coefficients\n\n    let denominator = this.mass + target.mass;\n    let A = 2.0 * this.mass / denominator;\n    let B = (target.mass - this.mass) / denominator; // Set new velocity and position for target\n\n    target.velocity.set([toTarget.x * thisSpeedBefore * A + fromTarget.x * targetSpeedBefore * B, toTarget.y * thisSpeedBefore * A + fromTarget.y * targetSpeedBefore * B, toTarget.z * thisSpeedBefore * A + fromTarget.z * targetSpeedBefore * B]);\n    target.position.set([target.position.x + target.velocity.x * timeStep, target.position.y + target.velocity.y * timeStep, target.position.z + target.velocity.z * timeStep]); // Elastic Collision Coefficients\n\n    A = (this.mass - target.mass) / denominator;\n    B = 2.0 * target.mass / denominator; // Set new velocity and position\n\n    this.velocity.set([toTarget.x * thisSpeedBefore * A + fromTarget.x * targetSpeedBefore * B, toTarget.x * thisSpeedBefore * A + fromTarget.x * targetSpeedBefore * B, toTarget.x * thisSpeedBefore * A + fromTarget.x * targetSpeedBefore * B]);\n    this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]);\n  }\n\n}\n\nexport default RigidBody;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\RigidBody.js"],"names":["SphereCollider","Vector3","Raycast","CollisionManager","RigidBody","constructor","position","mass","id","velocity","acceleration","collider","enableGravity","inCollision","setVelocity","vel","set","setAcceleration","acc","setPosition","pos","state","gravity","gravityIsEnabled","update","timeStep","updateMotion","handlePlaneCollisions","scanForBodyCollisions","handleBodyCollisions","x","y","z","planes","getPlaneColliders","rayDir","normalized","rayOrigin","clone","forEach","plane","intersectionPoint","planeIntersectionTest","distanceToPlane","dot","normal","subtract","radius","diff","bounce","magnitude","reflectDirection","multipleBy","sceneRigidBodies","getRigidBodies","target","targetDistance","distance","console","log","thisVelocityDirection","targetVelocityDirection","toTarget","fromTarget","inverted","thisNewDirection","add","targetNewDirection","thisMultiplier","Math","abs","targetMultiplier","thisSpeedBefore","targetSpeedBefore","denominator","A","B"],"mappings":"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","sourcesContent":["import SphereCollider from \"./SphereCollider\";\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Raycast from \"./Raycast\";\r\nimport CollisionManager from \"./CollisionManager\";\r\n\r\nclass RigidBody {\r\n    constructor(position, mass = 1.0) {\r\n        this.id = -1;\r\n        this.position = new Vector3(position);\r\n        this.velocity = new Vector3([0.0, 0.0, 0.0]);\r\n        this.acceleration = new Vector3([0.0, 0.0, 0.0]);\r\n\r\n        this.collider = new SphereCollider();\r\n\r\n        this.mass = mass;\r\n        this.enableGravity(true);\r\n\r\n        this.inCollision = false;\r\n    }\r\n\r\n    setVelocity(vel) {\r\n        this.velocity.set(vel);\r\n    }\r\n\r\n    setAcceleration(acc) {\r\n        this.acceleration.set(acc);\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.position.set(pos);\r\n    }\r\n\r\n    enableGravity(state) {\r\n        if (state)\r\n            this.gravity = 9.82;\r\n        else\r\n            this.gravity = 0.0;\r\n    }\r\n\r\n    get gravityIsEnabled () {\r\n        return this.gravity > 0.1;\r\n    }\r\n\r\n    update(timeStep) {\r\n\r\n        this.updateMotion(timeStep);\r\n        this.handlePlaneCollisions(timeStep);\r\n\r\n        this.scanForBodyCollisions(timeStep);\r\n        this.handleBodyCollisions(timeStep);\r\n\r\n        return true;\r\n    }\r\n\r\n    updateMotion(timeStep) {\r\n        this.velocity.set([\r\n            this.velocity.x + this.acceleration.x * timeStep,\r\n            this.velocity.y + (this.acceleration.y - this.gravity) * timeStep,\r\n            this.velocity.z + this.acceleration.z * timeStep,\r\n        ]);\r\n        this.position.set([\r\n            this.position.x + this.velocity.x * timeStep,\r\n            this.position.y + this.velocity.y * timeStep,\r\n            this.position.z + this.velocity.z * timeStep,\r\n        ]);\r\n    }\r\n\r\n    handlePlaneCollisions(timeStep) {\r\n        let planes = CollisionManager.getPlaneColliders();\r\n\r\n        let rayDir = this.velocity.normalized();\r\n        let rayOrigin = this.position.clone();\r\n\r\n        // Find closest intersectionPoint\r\n        planes.forEach((plane) => {\r\n            // If the plane intersection test returns null, no plane was found\r\n            let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\r\n            if (intersectionPoint !== null) {\r\n                // Calculate the closest distance from the rigid body collider and the plane\r\n                let distanceToPlane = Vector3.dot(plane.normal, Vector3.subtract(rayOrigin, intersectionPoint));\r\n\r\n                // Check if the sphere is intersecting the plane\r\n                if (distanceToPlane < this.collider.radius) {\r\n                    // Move the object to the plane surface\r\n                    let diff = (this.collider.radius - distanceToPlane);\r\n                    this.position.set([\r\n                        this.position.x + plane.normal.x * diff,\r\n                        this.position.y + plane.normal.y * diff,\r\n                        this.position.z + plane.normal.z * diff\r\n                    ]);\r\n\r\n                    // Calculate the bounce velocity\r\n                    let bounce = this.velocity.magnitude*0.8;\r\n                    let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir);\r\n\r\n                    this.velocity.set([\r\n                        -reflectDirection.x*bounce,\r\n                        -reflectDirection.y*bounce,\r\n                        -reflectDirection.z*bounce\r\n                    ]);\r\n                    this.position.set([\r\n                        this.position.x + this.velocity.x * timeStep,\r\n                        this.position.y + this.velocity.y * timeStep,\r\n                        this.position.z + this.velocity.z * timeStep,\r\n                    ]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    scanForBodyCollisions(timeStep) {\r\n        // If the rigid body is not moving, don't check for target collisions\r\n        if (this.velocity.magnitude < 0.1) {\r\n            return;\r\n        }\r\n\r\n        //TODO: Optimize collision scanning (if two bodies have collided, we dont need to check collision again in this update\r\n\r\n        let sceneRigidBodies = CollisionManager.getRigidBodies();\r\n        sceneRigidBodies.forEach((target) => {\r\n            // Dont check for collision with itself\r\n            if (this.id !== target.id){\r\n\r\n                let targetDistance = Vector3.distance(target.position, this.position);\r\n                // If target distance is within this collider radius and target collider radius, we have a collision\r\n                if ( targetDistance < (target.collider.radius + this.collider.radius)) {\r\n                    this.handleBodyCollisions(timeStep, target, targetDistance);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleBodyCollisions(timeStep, target, targetDistance) {\r\n        console.log(target);\r\n        // Get velocity directions\r\n        let thisVelocityDirection = this.velocity.normalized();\r\n        let targetVelocityDirection = target.velocity.normalized();\r\n\r\n        // Move the body outside of collision area\r\n        let diff = (this.collider.radius + target.collider.radius) - targetDistance;\r\n        this.position.set([\r\n            this.position.x - thisVelocityDirection.x * diff,\r\n            this.position.y - thisVelocityDirection.y * diff,\r\n            this.position.z - thisVelocityDirection.z * diff\r\n        ]);\r\n\r\n        let toTarget = Vector3.subtract(target.position, this.position).normalized();\r\n        let fromTarget = toTarget.inverted();\r\n\r\n        let thisNewDirection = Vector3.add(toTarget, thisVelocityDirection).normalized();\r\n        let targetNewDirection = Vector3.add(fromTarget, targetVelocityDirection).normalized();\r\n\r\n        let thisMultiplier = Math.abs(Vector3.dot(thisVelocityDirection, toTarget));\r\n        let targetMultiplier = Math.abs(Vector3.dot(targetVelocityDirection, fromTarget));\r\n\r\n        let thisSpeedBefore = this.velocity.magnitude;\r\n        let targetSpeedBefore = target.velocity.magnitude;\r\n\r\n        // Elastic Collision Coefficients\r\n        let denominator = this.mass + target.mass;\r\n        let A = (2.0 * this.mass) / denominator;\r\n        let B = (target.mass - this.mass) / denominator;\r\n\r\n        // Set new velocity and position for target\r\n        target.velocity.set([\r\n            toTarget.x * thisSpeedBefore * A + fromTarget.x * targetSpeedBefore * B,\r\n            toTarget.y * thisSpeedBefore * A + fromTarget.y * targetSpeedBefore * B,\r\n            toTarget.z * thisSpeedBefore * A + fromTarget.z * targetSpeedBefore * B\r\n        ]);\r\n        target.position.set([\r\n            target.position.x + target.velocity.x * timeStep,\r\n            target.position.y + target.velocity.y * timeStep,\r\n            target.position.z + target.velocity.z * timeStep,\r\n        ]);\r\n\r\n        // Elastic Collision Coefficients\r\n        A = (this.mass - target.mass) / denominator;\r\n        B = (2.0 * target.mass) / denominator;\r\n\r\n        // Set new velocity and position\r\n        this.velocity.set([\r\n            toTarget.x * thisSpeedBefore * A + fromTarget.x * targetSpeedBefore * B,\r\n            toTarget.x * thisSpeedBefore * A + fromTarget.x * targetSpeedBefore * B,\r\n            toTarget.x * thisSpeedBefore * A + fromTarget.x * targetSpeedBefore * B\r\n        ]);\r\n        this.position.set([\r\n            this.position.x + this.velocity.x * timeStep,\r\n            this.position.y + this.velocity.y * timeStep,\r\n            this.position.z + this.velocity.z * timeStep,\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default RigidBody;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import FragmentShader from './FragmentShader';\nimport VertexShader from './VertexShader';\nimport Matrix4 from './Matrix4';\n\nclass Shader {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.gl = this.canvas.getContext(\"webgl\");\n    this.Initiate();\n  }\n\n  Initiate() {\n    let fragShader = new FragmentShader();\n    let vertShader = new VertexShader(); // Set up the vertex and fragment shaders (glsl)\n\n    let vertexShader = this.CreateShader(this.gl.VERTEX_SHADER, vertShader.file);\n    let fragmentShader = this.CreateShader(this.gl.FRAGMENT_SHADER, fragShader.file); // Attach shaders to our program\n\n    let program = this.CreateProgram(vertexShader, fragmentShader); // Catches additional errors /\n\n    /****(ONLY USED IN TESTING)****/\n\n    this.gl.validateProgram(program);\n\n    if (!this.gl.getProgramParameter(program, this.gl.VALIDATE_STATUS)) {\n      console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(program));\n    }\n    /****(ONLY USED IN TESTING)****/\n    // Tell OpenGL state machine which program should be active\n\n\n    this.gl.useProgram(program); //Get attribute location from vertex shader text (glsl)\n\n    this.positionAttributeLocation = this.gl.getAttribLocation(program, \"vertPosition\");\n    this.normalAttributeLocation = this.gl.getAttribLocation(program, \"vertNormal\");\n    this.textureAttributeLocation = this.gl.getAttribLocation(program, \"vertTexCoord\"); // Get uniform location from shaders\n    // mat4\n\n    this.worldViewUniformLocation = this.gl.getUniformLocation(program, \"worldViewMatrix\");\n    this.cameraViewUniformLocation = this.gl.getUniformLocation(program, \"cameraViewMatrix\");\n    this.projectionMatrixUniformLocation = this.gl.getUniformLocation(program, \"projectionMatrix\"); // vec3\n\n    this.colorUniformLocation = this.gl.getUniformLocation(program, \"vertColor\"); //var lightDirectionLocation = this.gl.getUniformLocation(program, \"lightDirection\");\n\n    this.timeUniformLocation = this.gl.getUniformLocation(program, \"time\"); // The world view matrix represent all transformations in the \"world room\" (All 3D object movements and positioning)\n\n    this.worldViewMatrix = Matrix4.Identity(); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.worldViewUniformLocation, this.gl.FALSE, this.worldViewMatrix); // The projection matrix adds 3D perspective (depth) to the graphics\n\n    this.projectionMatrix = Matrix4.Perspective(Math.PI / 5, this.canvas.width / this.canvas.height, 0.1, 10000.0); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix); // Camera view\n\n    this.cameraViewMatrix = Matrix4.Identity(); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, this.cameraViewMatrix);\n  }\n\n  CreateShader(type, source) {\n    let shader = this.gl.createShader(type);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader); // Check for errors\n\n    if (this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n      return shader;\n    }\n\n    console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\n    this.gl.deleteShader(shader);\n  }\n\n  CreateProgram(vertexShader, fragmentShader) {\n    let program = this.gl.createProgram();\n    this.gl.attachShader(program, vertexShader);\n    this.gl.attachShader(program, fragmentShader);\n    this.gl.linkProgram(program); // Check for errors\n\n    if (this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\n      return program;\n    }\n\n    console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\n    this.gl.deleteProgram(program);\n  }\n\n}\n\nexport default Shader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\Shader.js"],"names":["FragmentShader","VertexShader","Matrix4","Shader","constructor","canvas","gl","getContext","Initiate","fragShader","vertShader","vertexShader","CreateShader","VERTEX_SHADER","file","fragmentShader","FRAGMENT_SHADER","program","CreateProgram","validateProgram","getProgramParameter","VALIDATE_STATUS","console","error","getProgramInfoLog","useProgram","positionAttributeLocation","getAttribLocation","normalAttributeLocation","textureAttributeLocation","worldViewUniformLocation","getUniformLocation","cameraViewUniformLocation","projectionMatrixUniformLocation","colorUniformLocation","timeUniformLocation","worldViewMatrix","Identity","uniformMatrix4fv","FALSE","projectionMatrix","Perspective","Math","PI","width","height","cameraViewMatrix","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createProgram","attachShader","linkProgram","LINK_STATUS","deleteProgram"],"mappings":"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","sourcesContent":["import FragmentShader from './FragmentShader';\r\nimport VertexShader from './VertexShader';\r\nimport Matrix4 from './Matrix4';\r\n\r\nclass Shader {\r\n\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n        this.Initiate();\r\n    }\r\n\r\n    Initiate() {\r\n        let fragShader = new FragmentShader();\r\n        let vertShader = new VertexShader();\r\n\r\n        // Set up the vertex and fragment shaders (glsl)\r\n        let vertexShader = this.CreateShader(this.gl.VERTEX_SHADER, vertShader.file);\r\n        let fragmentShader = this.CreateShader(this.gl.FRAGMENT_SHADER, fragShader.file);\r\n\r\n        // Attach shaders to our program\r\n        let program = this.CreateProgram(vertexShader, fragmentShader);\r\n\r\n        // Catches additional errors /\r\n        /****(ONLY USED IN TESTING)****/\r\n        this.gl.validateProgram(program);\r\n        if(!this.gl.getProgramParameter(program, this.gl.VALIDATE_STATUS)) {\r\n            console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(program));\r\n        }\r\n        /****(ONLY USED IN TESTING)****/\r\n\r\n        // Tell OpenGL state machine which program should be active\r\n        this.gl.useProgram(program);\r\n\r\n        //Get attribute location from vertex shader text (glsl)\r\n        this.positionAttributeLocation = this.gl.getAttribLocation(program, \"vertPosition\");\r\n        this.normalAttributeLocation = this.gl.getAttribLocation(program, \"vertNormal\");\r\n        this.textureAttributeLocation = this.gl.getAttribLocation(program, \"vertTexCoord\");\r\n\r\n        // Get uniform location from shaders\r\n        // mat4\r\n        this.worldViewUniformLocation = this.gl.getUniformLocation(program, \"worldViewMatrix\");\r\n        this.cameraViewUniformLocation = this.gl.getUniformLocation(program, \"cameraViewMatrix\");\r\n        this.projectionMatrixUniformLocation = this.gl.getUniformLocation(program, \"projectionMatrix\");\r\n        // vec3\r\n        this.colorUniformLocation = this.gl.getUniformLocation(program, \"vertColor\");\r\n        //var lightDirectionLocation = this.gl.getUniformLocation(program, \"lightDirection\");\r\n        this.timeUniformLocation = this.gl.getUniformLocation(program, \"time\");\r\n\r\n        // The world view matrix represent all transformations in the \"world room\" (All 3D object movements and positioning)\r\n        this.worldViewMatrix = Matrix4.Identity();\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.worldViewUniformLocation, this.gl.FALSE, this.worldViewMatrix);\r\n        // The projection matrix adds 3D perspective (depth) to the graphics\r\n        this.projectionMatrix = Matrix4.Perspective(Math.PI / 5, this.canvas.width / this.canvas.height, 0.1, 10000.0);\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix);\r\n\r\n        // Camera view\r\n        this.cameraViewMatrix = Matrix4.Identity();\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, this.cameraViewMatrix);\r\n    }\r\n\r\n    CreateShader(type, source) {\r\n\r\n        let shader = this.gl.createShader(type);\r\n        this.gl.shaderSource(shader, source);\r\n        this.gl.compileShader(shader);\r\n\r\n        // Check for errors\r\n        if(this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            return shader;\r\n        }\r\n\r\n        console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\r\n        this.gl.deleteShader(shader);\r\n    }\r\n\r\n    CreateProgram(vertexShader, fragmentShader) {\r\n\r\n        let program = this.gl.createProgram();\r\n        this.gl.attachShader(program, vertexShader);\r\n        this.gl.attachShader(program, fragmentShader);\r\n        this.gl.linkProgram(program);\r\n\r\n        // Check for errors\r\n        if(this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\r\n            return program;\r\n        }\r\n\r\n        console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\r\n        this.gl.deleteProgram(program);\r\n    }\r\n}\r\n\r\nexport default Shader;"]},"metadata":{},"sourceType":"module"}
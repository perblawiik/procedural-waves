{"ast":null,"code":"//TODO: Implement a sky box background\n//TODO: Implement cubic shadow mapping\n//TODO: Implement a ParticleSystem component\n// JavaScript components\nimport Shader from \"./ShaderHandle\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./EventHandler\";\nimport Scene from \"./Scene\";\nimport PointLightSource from \"./PointLightSource\"; // Shader files\n\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\nimport AmbientShader from \"./shaders/AmbientShader\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 5.0, 80.0];\nconst CAMERA_ROTATION = [-5.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER_SMOOTH: 2,\n  CYLINDER_SHARP: 3,\n  PLANE: 4\n};\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0;\n    this.shaders = new Map();\n    this.viewportAspectRatio = 1.0; // Scenes works like blocks in the game world.\n    // The active scenes are based on the cameras distance to the origin of each scene.\n\n    this.scenes = [];\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Update time clock\n    Time.update(); // Handle camera navigation\n\n    this.eventHandler.processCameraNavigation(this.camera); // Render graphics\n\n    this.render();\n  }\n\n  render() {\n    // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n    this.updateViewportDimensions(); // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scenes\n\n    this.scenes.forEach(scene => {\n      scene.updateLightPositions();\n      scene.draw();\n    }); // Display fps and other information\n\n    this.drawTextElements();\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let currentAspectRatio = this.canvas.width / this.canvas.height; // Check if the aspect ratio has changed before going further\n\n    if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001) return; // Update the projection matrix for the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniformAspectRatio(currentAspectRatio);\n    }); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Save current aspect ratio\n\n    this.viewportAspectRatio = currentAspectRatio;\n  } // This function is called before the game loop is initiated\n\n\n  preload() {\n    // Initiate the mouse event handler\n    this.eventHandler = new EventHandler(); // Sets up webgl 2D and 3D context from html canvas. Also sets viewport and render settings.\n\n    this.setUpWebGL(); // Create shaders\n\n    let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\n    let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\n    this.shaders.set(\"phong\", mainShader);\n    this.shaders.set(\"ambient\", ambientShader); // Initialize the main camera\n\n    this.camera = new Camera(this.shaders);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create a scene for the objects\n\n    let defaultScene = new Scene(this.shaders);\n    let defaultScene2 = new Scene(this.shaders);\n    let defaultScene3 = new Scene(this.shaders);\n    let defaultScene4 = new Scene(this.shaders); // Create scene objects\n\n    this.loadDefaultSceneObjects(defaultScene);\n    this.loadDefaultSceneObjects(defaultScene2);\n    this.loadDefaultSceneObjects(defaultScene3);\n    this.loadDefaultSceneObjects(defaultScene4);\n    defaultScene3.setPosition([0.0, 0.0, 80.0]);\n    defaultScene3.setRotation([0.0, 180.0, 0.0]);\n    defaultScene2.setPosition([0.0, 60.0, 0.0]);\n    defaultScene2.setRotation([0.0, 0.0, 180.0]);\n    defaultScene4.setPosition([0.0, 60.0, 80.0]);\n    defaultScene4.setRotation([0.0, 180.0, 180.0]); // Add to scenes\n\n    this.scenes.push(defaultScene);\n    this.scenes.push(defaultScene2);\n    this.scenes.push(defaultScene3);\n    this.scenes.push(defaultScene4);\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 50;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.gl);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\n      mesh.createCylinderSmooth(32, 1, 1, 2);\n    } else if (settings.shape === SHAPE.CYLINDER_SHARP) {\n      mesh.createCylinderSharp(8, 1, 2);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    return obj;\n  }\n\n  createPointLightSource(settings) {\n    let lightSource = new PointLightSource(settings.name);\n    lightSource.setPosition(settings.position);\n    lightSource.setScale(settings.scale);\n    lightSource.setLightColor(settings.color);\n    lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic); // Create a model for the light source\n\n    let lightSourceModel = new Mesh(this.gl);\n    lightSourceModel.createSphere(8);\n    lightSourceModel.setColor(settings.color);\n    lightSource.addMesh(lightSourceModel);\n    return lightSource;\n  }\n\n  loadDefaultSceneObjects(scene) {\n    // Create a red cube\n    let cube = this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [1.0, 1.0, 1.0],\n      position: [0.0, 1.5, 0.0],\n      color: [1.0, 0.0, 0.0]\n    });\n    scene.addGameObject(cube); // Create a green sphere\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [1.0, 1.0, 1.0],\n      position: [4.0, 2.0, 2.0],\n      color: [0.0, 1.0, 0.0]\n    })); // Create a smooth magenta cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SMOOTH,\n      name: 'Magenta Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-4.0, 2.0, 2.0],\n      color: [1.0, 0.0, 1.0]\n    })); // Create a sharp orange cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SHARP,\n      name: 'Orange Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-8.0, 2.0, 2.0],\n      color: [1.0, 0.5, 0.0]\n    })); // Create gray floor\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [40.0, 0.1, 40.0],\n      position: [0.0, 0.0, 0.0],\n      color: [0.75, 0.75, 0.75]\n    })); // Create blue walls\n\n    let wallColor = [0.0, 0.2, 1.0];\n    let wallHeight = 10.0;\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Left Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [-40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Right Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Back Wall',\n      scale: [40.0, wallHeight, 0.1],\n      position: [0.0, wallHeight, -40.0],\n      color: wallColor\n    })); // Create gray roof\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [40.0, 0.1, 20.0],\n      position: [0.0, wallHeight * 2.0, -20.0],\n      color: [0.5, 0.5, 0.5]\n    })); // Create a point lights for the scene\n    // Add the light source to our scene\n\n    let lampRadius = 0.5;\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Middle Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Right Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Left Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n  }\n\n  setUpWebGL() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    } // Set the viewport dimensions to the same as the canvas\n\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","Scene","PointLightSource","PhongLightingShader","AmbientShader","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER_SMOOTH","CYLINDER_SHARP","PLANE","Engine","constructor","lastTime","frameCount","fps","currentTextOffset","shaders","Map","viewportAspectRatio","scenes","run","update","eventHandler","processCameraNavigation","camera","render","updateViewportDimensions","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","forEach","scene","updateLightPositions","draw","drawTextElements","currentAspectRatio","canvas","width","height","Math","abs","shader","activate","setProjectionUniformAspectRatio","viewport","preload","setUpWebGL","mainShader","vertex","fragment","ambientShader","set","setPosition","setRotation","defaultScene","defaultScene2","defaultScene3","defaultScene4","loadDefaultSceneObjects","push","ctx","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","fillText","length","pos","transform","position","cameraPositionText","x","toFixed","y","z","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinderSmooth","createCylinderSharp","createPlane","setColor","color","obj","name","setScale","scale","addMesh","createPointLightSource","lightSource","setLightColor","setAttenuation","attenuation","kLinear","kQuadratic","lightSourceModel","cube","addGameObject","wallColor","wallHeight","lampRadius","addLightSource","canvas2D","document","getElementById","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW"],"mappings":"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","sourcesContent":["//TODO: Implement a sky box background\r\n//TODO: Implement cubic shadow mapping\r\n//TODO: Implement a ParticleSystem component\r\n\r\n// JavaScript components\r\nimport Shader from \"./ShaderHandle\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./EventHandler\";\r\nimport Scene from \"./Scene\";\r\nimport PointLightSource from \"./PointLightSource\";\r\n\r\n// Shader files\r\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\r\nimport AmbientShader from \"./shaders/AmbientShader\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 5.0, 80.0];\r\nconst CAMERA_ROTATION = [-5.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER_SMOOTH: 2,\r\n    CYLINDER_SHARP: 3,\r\n    PLANE: 4\r\n};\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n        this.shaders = new Map();\r\n        this.viewportAspectRatio = 1.0;\r\n\r\n        // Scenes works like blocks in the game world.\r\n        // The active scenes are based on the cameras distance to the origin of each scene.\r\n        this.scenes = [];\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Update time clock\r\n        Time.update();\r\n\r\n        // Handle camera navigation\r\n        this.eventHandler.processCameraNavigation(this.camera);\r\n\r\n        // Render graphics\r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scenes\r\n        this.scenes.forEach((scene) => {\r\n            scene.updateLightPositions();\r\n            scene.draw();\r\n        });\r\n\r\n        // Display fps and other information\r\n        this.drawTextElements();\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let currentAspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Check if the aspect ratio has changed before going further\r\n        if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001)\r\n            return;\r\n\r\n        // Update the projection matrix for the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniformAspectRatio(currentAspectRatio);\r\n        });\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Save current aspect ratio\r\n        this.viewportAspectRatio = currentAspectRatio;\r\n    }\r\n\r\n    // This function is called before the game loop is initiated\r\n    preload() {\r\n        // Initiate the mouse event handler\r\n        this.eventHandler = new EventHandler();\r\n\r\n        // Sets up webgl 2D and 3D context from html canvas. Also sets viewport and render settings.\r\n        this.setUpWebGL();\r\n\r\n        // Create shaders\r\n        let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\r\n        let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\r\n\r\n        this.shaders.set(\"phong\", mainShader);\r\n        this.shaders.set(\"ambient\", ambientShader);\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.shaders);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create a scene for the objects\r\n        let defaultScene = new Scene(this.shaders);\r\n        let defaultScene2 = new Scene(this.shaders);\r\n        let defaultScene3 = new Scene(this.shaders);\r\n        let defaultScene4 = new Scene(this.shaders);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects(defaultScene);\r\n        this.loadDefaultSceneObjects(defaultScene2);\r\n        this.loadDefaultSceneObjects(defaultScene3);\r\n        this.loadDefaultSceneObjects(defaultScene4);\r\n\r\n        defaultScene3.setPosition([0.0, 0.0, 80.0]);\r\n        defaultScene3.setRotation([0.0, 180.0, 0.0]);\r\n\r\n        defaultScene2.setPosition([0.0, 60.0, 0.0]);\r\n        defaultScene2.setRotation([0.0, 0.0, 180.0]);\r\n\r\n        defaultScene4.setPosition([0.0, 60.0, 80.0]);\r\n        defaultScene4.setRotation([0.0, 180.0, 180.0]);\r\n\r\n        // Add to scenes\r\n        this.scenes.push(defaultScene);\r\n        this.scenes.push(defaultScene2);\r\n        this.scenes.push(defaultScene3);\r\n        this.scenes.push(defaultScene4);\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 50;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.gl);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\r\n            mesh.createCylinderSmooth(32, 1, 1, 2);\r\n        }\r\n        else if(settings.shape === SHAPE.CYLINDER_SHARP) {\r\n            mesh.createCylinderSharp(8, 1, 2);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        return obj;\r\n    }\r\n\r\n    createPointLightSource(settings) {\r\n        let lightSource = new PointLightSource(settings.name);\r\n        lightSource.setPosition(settings.position);\r\n        lightSource.setScale(settings.scale);\r\n        lightSource.setLightColor(settings.color);\r\n        lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic);\r\n\r\n        // Create a model for the light source\r\n        let lightSourceModel = new Mesh(this.gl);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor(settings.color);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        return lightSource;\r\n    }\r\n\r\n    loadDefaultSceneObjects(scene) {\r\n        // Create a red cube\r\n        let cube = this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [1.0, 1.0, 1.0],\r\n            position: [0.0, 1.5, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n        scene.addGameObject(cube);\r\n\r\n        // Create a green sphere\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.SPHERE,\r\n                name: 'Green Sphere',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [4.0, 2.0, 2.0],\r\n                color: [0.0, 1.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a smooth magenta cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SMOOTH,\r\n                name: 'Magenta Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-4.0, 2.0, 2.0],\r\n                color: [1.0, 0.0, 1.0]\r\n            })\r\n        );\r\n\r\n        // Create a sharp orange cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SHARP,\r\n                name: 'Orange Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-8.0, 2.0, 2.0],\r\n                color: [1.0, 0.5, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create gray floor\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Roof',\r\n                scale: [40.0, 0.1, 40.0],\r\n                position: [0.0, 0.0, 0.0],\r\n                color: [0.75, 0.75, 0.75]\r\n            })\r\n        );\r\n\r\n        // Create blue walls\r\n        let wallColor = [0.0, 0.2, 1.0];\r\n        let wallHeight = 10.0;\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Left Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [-40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Right Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Back Wall',\r\n                scale: [40.0, wallHeight, 0.1],\r\n                position: [0.0, wallHeight, -40.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n\r\n        // Create gray roof\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Floor',\r\n                scale: [40.0, 0.1, 20.0],\r\n                position: [0.0, wallHeight * 2.0, -20.0],\r\n                color: [0.5, 0.5, 0.5]\r\n            })\r\n        );\r\n\r\n        // Create a point lights for the scene\r\n        // Add the light source to our scene\r\n        let lampRadius = 0.5;\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n    }\r\n\r\n    setUpWebGL() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
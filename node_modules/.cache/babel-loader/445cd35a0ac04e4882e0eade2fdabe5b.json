{"ast":null,"code":"//TODO: Implement a sky box background\n//TODO: Implement cubic shadow mapping\n//TODO: Implement a ParticleSystem component\n// JavaScript components\nimport Shader from \"./ShaderHandle\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./events/EventHandler\";\nimport MouseEvent from \"./events/MouseEvent\";\nimport Scene from \"./Scene\";\nimport PointLightSource from \"./PointLightSource\";\nimport IntersectionField from \"./IntersectionField\";\nimport Vector3 from \"./math/Vector3\";\nimport Matrix4 from \"./math/Matrix4\"; // Shader files\n\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\nimport AmbientShader from \"./shaders/AmbientShader\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\nconst CAMERA_ROTATION = [-5.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER_SMOOTH: 2,\n  CYLINDER_SHARP: 3,\n  PLANE: 4\n};\nconst MS_PER_UPDATE = 2.0;\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0;\n    this.viewportAspectRatio = 1.0;\n    this.lag = 0.0; // Scenes works like blocks in the game world.\n    // The active scenes are based on the cameras distance to the origin of each scene.\n\n    this.scenes = [];\n    this.shaders = new Map();\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Time start of the loop\n    let startTime = Time.now; // Update time clock\n\n    Time.update(); // Add elapsed time to the lag variable\n\n    this.lag += Time.deltaTime;\n\n    while (this.lag >= MS_PER_UPDATE) {\n      this.update();\n      this.lag -= MS_PER_UPDATE;\n    } // Render graphics\n\n\n    this.render(this.lag / MS_PER_UPDATE); // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\n    //while ((Time.now - startTime) < 16.0) ; // Sleep\n  }\n\n  update() {\n    // Handle camera navigation\n    this.processCameraNavigation(this.camera);\n    this.scenes.forEach(scene => {\n      scene.update();\n    });\n\n    if (MouseEvent.mouseDown) {\n      console.log(\"X: \" + MouseEvent.offsetX + \", Y: \" + MouseEvent.offsetY);\n      console.log(\"canvas width: \" + this.intersect.canvasWidth + \", canvas height: \" + this.intersect.canvasHeight);\n      this.intersectionTest(MouseEvent.offsetX, MouseEvent.offsetY);\n    }\n\n    EventHandler.resetMouseEvents();\n  }\n\n  render(residualLag) {\n    // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n    this.updateViewportDimensions(); // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scenes\n\n    this.scenes.forEach(scene => {\n      scene.updateLightPositions();\n      scene.draw();\n    }); ///// INTERSECTION TEST //////\n\n    this.intersect.updateBorders(this.camera, this.scenes[0].sceneObjects[0].transform.matrix, this.canvas.width, this.canvas.height);\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctx.strokeStyle = \"yellow\";\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.intersect.borders.xMin, this.intersect.borders.yMin);\n    this.ctx.lineTo(this.intersect.borders.xMax, this.intersect.borders.yMin);\n    this.ctx.lineTo(this.intersect.borders.xMax, this.intersect.borders.yMax);\n    this.ctx.lineTo(this.intersect.borders.xMin, this.intersect.borders.yMax);\n    this.ctx.closePath();\n    this.ctx.stroke(); ///// INTERSECTION TEST //////\n    // Display fps and other information\n\n    this.drawTextElements();\n  } // This function is called before the game loop is initiated\n\n\n  preload() {\n    // Initiate time tracker component\n    Time.init(); // Initiate the event handler\n\n    EventHandler.init(); // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\n\n    this.setUpWebGL(); // Create shaders\n\n    let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\n    let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\n    this.shaders.set(\"phong\", mainShader);\n    this.shaders.set(\"ambient\", ambientShader); // Initialize the main camera\n\n    this.camera = new Camera(this.shaders);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create a scene for the objects\n\n    let defaultScene = new Scene(this.shaders); // Create scene objects\n\n    this.loadDefaultSceneObjects(defaultScene); // Add to scenes\n\n    this.scenes.push(defaultScene); ///// INTERSECTION TEST //////\n\n    this.intersect = new IntersectionField();\n    this.cubeMatrix = this.scenes[0].sceneObjects[0].transform.matrix;\n    this.intersect.updateBorders(this.camera, this.cubeMatrix, this.canvas.width, this.canvas.height); ///// INTERSECTION TEST //////\n    ///// MULTIPLE SCENE TEST ///////\n\n    /*\r\n    let defaultScene2 = new Scene(this.shaders);\r\n    let defaultScene3 = new Scene(this.shaders);\r\n    let defaultScene4 = new Scene(this.shaders);\r\n      this.loadDefaultSceneObjects(defaultScene2);\r\n    this.loadDefaultSceneObjects(defaultScene3);\r\n    this.loadDefaultSceneObjects(defaultScene4);\r\n      defaultScene3.setPosition([0.0, 0.0, 80.0]);\r\n    defaultScene3.setRotation([0.0, 180.0, 0.0]);\r\n      defaultScene2.setPosition([0.0, 60.0, 0.0]);\r\n    defaultScene2.setRotation([0.0, 0.0, 180.0]);\r\n      defaultScene4.setPosition([0.0, 60.0, 80.0]);\r\n    defaultScene4.setRotation([0.0, 180.0, 180.0]);\r\n      this.scenes.push(defaultScene2);\r\n    this.scenes.push(defaultScene3);\r\n    this.scenes.push(defaultScene4);\r\n    */\n    ///// MULTIPLE SCENE TEST ///////\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let currentAspectRatio = this.canvas.width / this.canvas.height; // Check if the aspect ratio has changed before going further\n\n    if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001) return; // Update the projection matrix for the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniformAspectRatio(currentAspectRatio);\n    }); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Save current aspect ratio\n\n    this.viewportAspectRatio = currentAspectRatio;\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 10;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.gl);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\n      mesh.createCylinderSmooth(32, 1, 1, 2);\n    } else if (settings.shape === SHAPE.CYLINDER_SHARP) {\n      mesh.createCylinderSharp(8, 1, 2);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    return obj;\n  }\n\n  createPointLightSource(settings) {\n    // Create the light source component\n    let lightSource = new PointLightSource(settings.name);\n    lightSource.setPosition(settings.position);\n    lightSource.setScale(settings.scale);\n    lightSource.setLightColor(settings.color);\n    lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic); // Create a model for the light source\n\n    let lightSourceModel = new Mesh(this.gl);\n    lightSourceModel.createSphere(8);\n    lightSourceModel.setColor(settings.color);\n    lightSource.addMesh(lightSourceModel);\n    return lightSource;\n  }\n\n  loadDefaultSceneObjects(scene) {\n    // Create a red cube\n    let cube = this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [1.0, 1.0, 1.0],\n      position: [0.0, 1.5, 0.0],\n      color: [1.0, 0.0, 0.0]\n    });\n    scene.addGameObject(cube); // Create a green sphere\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [1.0, 1.0, 1.0],\n      position: [4.0, 2.0, 2.0],\n      color: [0.0, 1.0, 0.0]\n    })); // Create a smooth magenta cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SMOOTH,\n      name: 'Magenta Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-4.0, 2.0, 2.0],\n      color: [1.0, 0.0, 1.0]\n    })); // Create a sharp orange cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SHARP,\n      name: 'Orange Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-8.0, 2.0, 2.0],\n      color: [1.0, 0.5, 0.0]\n    })); // Create gray floor\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [40.0, 0.1, 40.0],\n      position: [0.0, 0.0, 0.0],\n      color: [0.75, 0.75, 0.75]\n    })); // Create blue walls\n\n    let wallColor = [0.0, 0.2, 1.0];\n    let wallHeight = 10.0;\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Left Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [-40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Right Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Back Wall',\n      scale: [40.0, wallHeight, 0.1],\n      position: [0.0, wallHeight, -40.0],\n      color: wallColor\n    })); // Create gray roof\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [40.0, 0.1, 20.0],\n      position: [0.0, wallHeight * 2.0, -20.0],\n      color: [0.5, 0.5, 0.5]\n    })); // Create a point lights for the scene\n    // Add the light source to our scene\n\n    let lampRadius = 0.5;\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Middle Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Right Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Left Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n  }\n\n  processCameraNavigation() {\n    // Zoom camera view in and out\n    if (MouseEvent.isPressed.middleButton) {\n      this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX) / 20.0]);\n    } // Pan the camera view\n    else if (MouseEvent.isPressed.leftButton) {\n        this.camera.translate([-MouseEvent.movementX / 40.0, MouseEvent.movementY / 40.0, 0.0]);\n      } // Rotate the camera view\n      else if (MouseEvent.isPressed.rightButton) {\n          this.camera.rotate([-MouseEvent.movementY / 10.0, -MouseEvent.movementX / 10.0, 0.0]);\n        }\n\n    if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\n      if (MouseEvent.wheelDelta > 0.0) {\n        this.camera.translate([0.0, 0.0, 0.5]);\n      } else this.camera.translate([0.0, 0.0, -0.5]);\n    }\n  }\n\n  setUpWebGL() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    } // Set the viewport dimensions to the same as the canvas\n\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n  }\n\n  intersectionTest(mouseX, mouseY) {\n    // Scale the range from pixel values to [-1, 1]\n    let x = 2.0 * mouseX / this.canvas.width - 1.0;\n    let y = 1.0 - 2.0 * mouseY / this.canvas.height; // Reverse Y direction\n\n    let z = 1.0; // Normalized device coordinates\n\n    let rayNdc = [x, y, z]; // Homogeneous clip coordinates\n\n    let rayClip = [x, y, -z, 1.0]; // Camera space coordinates\n\n    let fieldOfView = Math.PI / 6;\n    let aspectRatio = this.canvas.width / this.canvas.height;\n    let projection = Matrix4.perspective(fieldOfView, aspectRatio, 0.1, 1000.0);\n    Matrix4.invert(projection, projection);\n    let rayCam = Matrix4.multiplyVector(projection, rayClip);\n    rayCam[2] = -1.0;\n    rayCam[3] = 1.0; // World coordinates\n\n    let cameraMatrix = this.camera.transform.matrix;\n    Matrix4.invert(cameraMatrix, cameraMatrix);\n    let rayWorld = Matrix4.multiplyVector(cameraMatrix, rayCam);\n    let rayWorldNormalized = new Vector3([rayWorld[0], rayWorld[1], rayWorld[2]]);\n    console.log(rayWorldNormalized); //console.log(rayWorldNormalized.normalized());\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","MouseEvent","Scene","PointLightSource","IntersectionField","Vector3","Matrix4","PhongLightingShader","AmbientShader","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER_SMOOTH","CYLINDER_SHARP","PLANE","MS_PER_UPDATE","Engine","constructor","lastTime","frameCount","fps","currentTextOffset","viewportAspectRatio","lag","scenes","shaders","Map","run","startTime","now","update","deltaTime","render","processCameraNavigation","camera","forEach","scene","mouseDown","console","log","offsetX","offsetY","intersect","canvasWidth","canvasHeight","intersectionTest","resetMouseEvents","residualLag","updateViewportDimensions","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","updateLightPositions","draw","updateBorders","sceneObjects","transform","matrix","canvas","width","height","ctx","clearRect","strokeStyle","beginPath","moveTo","borders","xMin","yMin","lineTo","xMax","yMax","closePath","stroke","drawTextElements","preload","init","setUpWebGL","mainShader","vertex","fragment","ambientShader","set","setPosition","setRotation","defaultScene","loadDefaultSceneObjects","push","cubeMatrix","currentAspectRatio","Math","abs","shader","activate","setProjectionUniformAspectRatio","viewport","font","fillStyle","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","toFixed","fillText","length","pos","position","cameraPositionText","x","y","z","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinderSmooth","createCylinderSharp","createPlane","setColor","color","obj","name","setScale","scale","addMesh","createPointLightSource","lightSource","setLightColor","setAttenuation","attenuation","kLinear","kQuadratic","lightSourceModel","cube","addGameObject","wallColor","wallHeight","lampRadius","addLightSource","isPressed","middleButton","translate","movementY","movementX","leftButton","rightButton","rotate","wheelDelta","canvas2D","document","getElementById","getContext","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","mouseX","mouseY","rayNdc","rayClip","fieldOfView","PI","aspectRatio","projection","perspective","invert","rayCam","multiplyVector","cameraMatrix","rayWorld","rayWorldNormalized"],"mappings":"AAAA;AACA;AACA;AAEA;AACA,OAAOA,MAAP,MAAmB,gBAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,OAAP,MAAoB,gBAApB,C,CAEA;;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAEA;AACA;;AACA,MAAMC,eAAe,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,CAAxB;AACA,MAAMC,eAAe,GAAG,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,CAAxB,C,CAEA;;AACA,MAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE,CADI;AAEVC,EAAAA,MAAM,EAAE,CAFE;AAGVC,EAAAA,eAAe,EAAE,CAHP;AAIVC,EAAAA,cAAc,EAAE,CAJN;AAKVC,EAAAA,KAAK,EAAE;AALG,CAAd;AAQA,MAAMC,aAAa,GAAG,GAAtB;;AAEA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,QAAL,GAAgB,GAAhB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,GAAL,GAAW,CAAX;AACA,SAAKC,iBAAL,GAAyB,CAAzB;AACA,SAAKC,mBAAL,GAA2B,GAA3B;AAEA,SAAKC,GAAL,GAAW,GAAX,CARU,CAUV;AACA;;AACA,SAAKC,MAAL,GAAc,EAAd;AAEA,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACH;AAED;;;;;AAGAC,EAAAA,GAAG,GAAG;AACF;AACA,QAAIC,SAAS,GAAIlC,IAAI,CAACmC,GAAtB,CAFE,CAIF;;AACAnC,IAAAA,IAAI,CAACoC,MAAL,GALE,CAOF;;AACA,SAAKP,GAAL,IAAY7B,IAAI,CAACqC,SAAjB;;AAEA,WAAO,KAAKR,GAAL,IAAYR,aAAnB,EAAkC;AAC9B,WAAKe,MAAL;AACA,WAAKP,GAAL,IAAYR,aAAZ;AACH,KAbC,CAeF;;;AACA,SAAKiB,MAAL,CAAY,KAAKT,GAAL,GAASR,aAArB,EAhBE,CAkBF;AACA;AACH;;AAEDe,EAAAA,MAAM,GAAG;AACL;AACA,SAAKG,uBAAL,CAA6B,KAAKC,MAAlC;AAEA,SAAKV,MAAL,CAAYW,OAAZ,CAAqBC,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACN,MAAN;AACH,KAFD;;AAIA,QAAG/B,UAAU,CAACsC,SAAd,EAAyB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAQxC,UAAU,CAACyC,OAAnB,GAA6B,OAA7B,GAAuCzC,UAAU,CAAC0C,OAA9D;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB,KAAKG,SAAL,CAAeC,WAAlC,GAAgD,mBAAhD,GAAsE,KAAKD,SAAL,CAAeE,YAAjG;AAEA,WAAKC,gBAAL,CAAsB9C,UAAU,CAACyC,OAAjC,EAA0CzC,UAAU,CAAC0C,OAArD;AACH;;AAED3C,IAAAA,YAAY,CAACgD,gBAAb;AACH;;AAEDd,EAAAA,MAAM,CAACe,WAAD,EAAc;AAChB;AACA,SAAKC,wBAAL,GAFgB,CAIhB;;AACA,SAAKC,EAAL,CAAQC,KAAR,CAAc,KAAKD,EAAL,CAAQE,gBAAR,GAA2B,KAAKF,EAAL,CAAQG,gBAAjD,EALgB,CAOhB;;AACA,SAAK5B,MAAL,CAAYW,OAAZ,CAAqBC,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACiB,oBAAN;AACAjB,MAAAA,KAAK,CAACkB,IAAN;AACH,KAHD,EARgB,CAahB;;AACA,SAAKZ,SAAL,CAAea,aAAf,CAA6B,KAAKrB,MAAlC,EAA0C,KAAKV,MAAL,CAAY,CAAZ,EAAegC,YAAf,CAA4B,CAA5B,EAA+BC,SAA/B,CAAyCC,MAAnF,EAA2F,KAAKC,MAAL,CAAYC,KAAvG,EAA8G,KAAKD,MAAL,CAAYE,MAA1H;AACA,SAAKC,GAAL,CAASC,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKJ,MAAL,CAAYC,KAArC,EAA4C,KAAKD,MAAL,CAAYE,MAAxD;AACA,SAAKC,GAAL,CAASE,WAAT,GAAuB,QAAvB;AACA,SAAKF,GAAL,CAASG,SAAT;AACA,SAAKH,GAAL,CAASI,MAAT,CAAgB,KAAKxB,SAAL,CAAeyB,OAAf,CAAuBC,IAAvC,EAA6C,KAAK1B,SAAL,CAAeyB,OAAf,CAAuBE,IAApE;AACA,SAAKP,GAAL,CAASQ,MAAT,CAAgB,KAAK5B,SAAL,CAAeyB,OAAf,CAAuBI,IAAvC,EAA6C,KAAK7B,SAAL,CAAeyB,OAAf,CAAuBE,IAApE;AACA,SAAKP,GAAL,CAASQ,MAAT,CAAgB,KAAK5B,SAAL,CAAeyB,OAAf,CAAuBI,IAAvC,EAA6C,KAAK7B,SAAL,CAAeyB,OAAf,CAAuBK,IAApE;AACA,SAAKV,GAAL,CAASQ,MAAT,CAAgB,KAAK5B,SAAL,CAAeyB,OAAf,CAAuBC,IAAvC,EAA6C,KAAK1B,SAAL,CAAeyB,OAAf,CAAuBK,IAApE;AACA,SAAKV,GAAL,CAASW,SAAT;AACA,SAAKX,GAAL,CAASY,MAAT,GAvBgB,CAwBhB;AAEA;;AACA,SAAKC,gBAAL;AACH,GAzFQ,CA2FT;;;AACAC,EAAAA,OAAO,GAAG;AACN;AACAlF,IAAAA,IAAI,CAACmF,IAAL,GAFM,CAIN;;AACA/E,IAAAA,YAAY,CAAC+E,IAAb,GALM,CAON;;AACA,SAAKC,UAAL,GARM,CAUN;;AACA,QAAIC,UAAU,GAAG,IAAItF,MAAJ,CAAW,KAAKkE,MAAhB,EAAwBtD,mBAAmB,CAAC2E,MAA5C,EAAoD3E,mBAAmB,CAAC4E,QAAxE,CAAjB;AACA,QAAIC,aAAa,GAAG,IAAIzF,MAAJ,CAAW,KAAKkE,MAAhB,EAAwBrD,aAAa,CAAC0E,MAAtC,EAA8C1E,aAAa,CAAC2E,QAA5D,CAApB;AAEA,SAAKxD,OAAL,CAAa0D,GAAb,CAAiB,OAAjB,EAA0BJ,UAA1B;AACA,SAAKtD,OAAL,CAAa0D,GAAb,CAAiB,SAAjB,EAA4BD,aAA5B,EAfM,CAiBN;;AACA,SAAKhD,MAAL,GAAc,IAAIvC,MAAJ,CAAW,KAAK8B,OAAhB,CAAd;AACA,SAAKS,MAAL,CAAYkD,WAAZ,CAAwB7E,eAAxB;AACA,SAAK2B,MAAL,CAAYmD,WAAZ,CAAwB7E,eAAxB,EApBM,CAsBN;;AACA,QAAI8E,YAAY,GAAG,IAAItF,KAAJ,CAAU,KAAKyB,OAAf,CAAnB,CAvBM,CAyBN;;AACA,SAAK8D,uBAAL,CAA6BD,YAA7B,EA1BM,CA2BN;;AACA,SAAK9D,MAAL,CAAYgE,IAAZ,CAAiBF,YAAjB,EA5BM,CA8BN;;AACA,SAAK5C,SAAL,GAAiB,IAAIxC,iBAAJ,EAAjB;AACA,SAAKuF,UAAL,GAAkB,KAAKjE,MAAL,CAAY,CAAZ,EAAegC,YAAf,CAA4B,CAA5B,EAA+BC,SAA/B,CAAyCC,MAA3D;AACA,SAAKhB,SAAL,CAAea,aAAf,CAA6B,KAAKrB,MAAlC,EAA0C,KAAKuD,UAA/C,EAA2D,KAAK9B,MAAL,CAAYC,KAAvE,EAA8E,KAAKD,MAAL,CAAYE,MAA1F,EAjCM,CAkCN;AAEA;;AACA;;;;;;;;;;;;;;;;;AAsBA;AACH;;AAEDb,EAAAA,wBAAwB,GAAG;AACvB;AACA,QAAI0C,kBAAkB,GAAG,KAAK/B,MAAL,CAAYC,KAAZ,GAAoB,KAAKD,MAAL,CAAYE,MAAzD,CAFuB,CAIvB;;AACA,QAAI8B,IAAI,CAACC,GAAL,CAAS,KAAKtE,mBAAL,GAA2BoE,kBAApC,IAA0D,KAA9D,EACI,OANmB,CAQvB;;AACA,SAAKjE,OAAL,CAAaU,OAAb,CAAsB0D,MAAD,IAAY;AAC7BA,MAAAA,MAAM,CAACC,QAAP;AACAD,MAAAA,MAAM,CAACE,+BAAP,CAAuCL,kBAAvC;AACH,KAHD,EATuB,CAcvB;;AACA,SAAKzC,EAAL,CAAQ+C,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAKrC,MAAL,CAAYC,KAAnC,EAA0C,KAAKD,MAAL,CAAYE,MAAtD,EAfuB,CAiBvB;;AACA,SAAKvC,mBAAL,GAA2BoE,kBAA3B;AACH;;AAEDf,EAAAA,gBAAgB,GAAG;AACf;AACA,SAAKb,GAAL,CAASmC,IAAT,GAAgB,eAAhB;AACA,SAAKnC,GAAL,CAASoC,SAAT,GAAqB,OAArB;AACA,SAAK7E,iBAAL,GAAyB,CAAzB,CAJe,CAMf;;AACA,SAAKyC,GAAL,CAASC,SAAT,CAAmB,KAAK1C,iBAAxB,EAA2C,CAA3C,EAA8C,KAAKsC,MAAL,CAAYwC,WAA1D,EAAuE,EAAvE,EAPe,CASf;;AACA,SAAKC,gBAAL;AACA,SAAKC,qBAAL;AACH;;AAEDD,EAAAA,gBAAgB,GAAG;AACf,QAAIE,WAAW,GAAG5G,IAAI,CAAC6G,IAAvB,CADe,CAEf;;AACA,QAAKD,WAAW,GAAG,KAAKpF,QAApB,IAAiC,MAArC,EAA6C;AACzC;AACA,WAAKE,GAAL,GAAW,KAAKD,UAAhB,CAFyC,CAGzC;;AACA,WAAKD,QAAL,GAAgBoF,WAAhB,CAJyC,CAKzC;;AACA,WAAKnF,UAAL,GAAkB,CAAlB;AACH,KAPD,MAQK;AACD,QAAE,KAAKA,UAAP;AACH,KAbc,CAef;;;AACA,QAAIqF,OAAO,GAAG,iBAAiB,KAAKpF,GAAtB,GAA4B,wBAA5B,GAAuD1B,IAAI,CAACqC,SAAL,CAAe0E,OAAf,CAAuB,CAAvB,CAAvD,GAAmF,MAAjG,CAhBe,CAiBf;;AACA,SAAK3C,GAAL,CAAS4C,QAAT,CAAkBF,OAAlB,EAA2B,EAA3B,EAA+B,EAA/B,EAlBe,CAmBf;;AACA,SAAKnF,iBAAL,GAAyBmF,OAAO,CAACG,MAAR,GAAiB,EAAjB,GAAsB,EAA/C;AACH;;AAEDN,EAAAA,qBAAqB,GAAG;AACpB,QAAIO,GAAG,GAAG,KAAK1E,MAAL,CAAYuB,SAAZ,CAAsBoD,QAAhC,CADoB,CAEpB;;AACA,QAAIC,kBAAkB,GAAG,uBAAuBF,GAAG,CAACG,CAAJ,CAAMN,OAAN,CAAc,CAAd,CAAvB,GAA0C,IAA1C,GAAiDG,GAAG,CAACI,CAAJ,CAAMP,OAAN,CAAc,CAAd,CAAjD,GAAoE,IAApE,GAA2EG,GAAG,CAACK,CAAJ,CAAMR,OAAN,CAAc,CAAd,CAA3E,GAA8F,GAAvH,CAHoB,CAKpB;;AACA,SAAK3C,GAAL,CAAS4C,QAAT,CAAkBI,kBAAlB,EAAsC,KAAKzF,iBAA3C,EAA8D,EAA9D,EANoB,CAOpB;;AACA,SAAKA,iBAAL,GAAyByF,kBAAkB,CAACH,MAAnB,GAA4B,EAArD;AACH;;AAEDO,EAAAA,gBAAgB,CAAEC,QAAF,EAAY;AACxB,QAAIC,IAAI,GAAG,IAAIxH,IAAJ,CAAS,KAAKqD,EAAd,CAAX;;AACA,QAAIkE,QAAQ,CAACE,KAAT,KAAmB5G,KAAK,CAACC,IAA7B,EAAmC;AAC/B0G,MAAAA,IAAI,CAACE,UAAL;AACH,KAFD,MAGK,IAAIH,QAAQ,CAACE,KAAT,KAAmB5G,KAAK,CAACE,MAA7B,EAAqC;AACtCyG,MAAAA,IAAI,CAACG,YAAL,CAAkB,EAAlB;AACH,KAFI,MAGA,IAAIJ,QAAQ,CAACE,KAAT,KAAmB5G,KAAK,CAACG,eAA7B,EAA8C;AAC/CwG,MAAAA,IAAI,CAACI,oBAAL,CAA0B,EAA1B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;AACH,KAFI,MAGA,IAAGL,QAAQ,CAACE,KAAT,KAAmB5G,KAAK,CAACI,cAA5B,EAA4C;AAC7CuG,MAAAA,IAAI,CAACK,mBAAL,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B;AACH,KAFI,MAGA,IAAIN,QAAQ,CAACE,KAAT,KAAmB5G,KAAK,CAACK,KAA7B,EAAoC;AACrCsG,MAAAA,IAAI,CAACM,WAAL,CAAiB,EAAjB,EAAoB,EAApB;AACH;;AACDN,IAAAA,IAAI,CAACO,QAAL,CAAcR,QAAQ,CAACS,KAAvB;AAEA,QAAIC,GAAG,GAAG,IAAIhI,UAAJ,CAAgBsH,QAAQ,CAACW,IAAzB,CAAV;AACAD,IAAAA,GAAG,CAACzC,WAAJ,CAAgB+B,QAAQ,CAACN,QAAzB;AACAgB,IAAAA,GAAG,CAACE,QAAJ,CAAaZ,QAAQ,CAACa,KAAtB;AACAH,IAAAA,GAAG,CAACI,OAAJ,CAAYb,IAAZ;AAEA,WAAOS,GAAP;AACH;;AAEDK,EAAAA,sBAAsB,CAACf,QAAD,EAAW;AAC7B;AACA,QAAIgB,WAAW,GAAG,IAAIlI,gBAAJ,CAAqBkH,QAAQ,CAACW,IAA9B,CAAlB;AACAK,IAAAA,WAAW,CAAC/C,WAAZ,CAAwB+B,QAAQ,CAACN,QAAjC;AACAsB,IAAAA,WAAW,CAACJ,QAAZ,CAAqBZ,QAAQ,CAACa,KAA9B;AACAG,IAAAA,WAAW,CAACC,aAAZ,CAA0BjB,QAAQ,CAACS,KAAnC;AACAO,IAAAA,WAAW,CAACE,cAAZ,CAA2BlB,QAAQ,CAACmB,WAAT,CAAqBC,OAAhD,EAAyDpB,QAAQ,CAACmB,WAAT,CAAqBE,UAA9E,EAN6B,CAQ7B;;AACA,QAAIC,gBAAgB,GAAG,IAAI7I,IAAJ,CAAS,KAAKqD,EAAd,CAAvB;AACAwF,IAAAA,gBAAgB,CAAClB,YAAjB,CAA8B,CAA9B;AACAkB,IAAAA,gBAAgB,CAACd,QAAjB,CAA0BR,QAAQ,CAACS,KAAnC;AACAO,IAAAA,WAAW,CAACF,OAAZ,CAAoBQ,gBAApB;AAEA,WAAON,WAAP;AACH;;AAED5C,EAAAA,uBAAuB,CAACnD,KAAD,EAAQ;AAC3B;AACA,QAAIsG,IAAI,GAAG,KAAKxB,gBAAL,CAAsB;AAC7BG,MAAAA,KAAK,EAAE5G,KAAK,CAACC,IADgB;AAE7BoH,MAAAA,IAAI,EAAE,UAFuB;AAG7BE,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHsB;AAI7BnB,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAJmB;AAK7Be,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AALsB,KAAtB,CAAX;AAOAxF,IAAAA,KAAK,CAACuG,aAAN,CAAoBD,IAApB,EAT2B,CAW3B;;AACAtG,IAAAA,KAAK,CAACuG,aAAN,CACI,KAAKzB,gBAAL,CAAsB;AAClBG,MAAAA,KAAK,EAAE5G,KAAK,CAACE,MADK;AAElBmH,MAAAA,IAAI,EAAE,cAFY;AAGlBE,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHW;AAIlBnB,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAJQ;AAKlBe,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AALW,KAAtB,CADJ,EAZ2B,CAsB3B;;AACAxF,IAAAA,KAAK,CAACuG,aAAN,CACI,KAAKzB,gBAAL,CAAsB;AAClBG,MAAAA,KAAK,EAAE5G,KAAK,CAACG,eADK;AAElBkH,MAAAA,IAAI,EAAE,kBAFY;AAGlBE,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHW;AAIlBnB,MAAAA,QAAQ,EAAE,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,CAJQ;AAKlBe,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AALW,KAAtB,CADJ,EAvB2B,CAiC3B;;AACAxF,IAAAA,KAAK,CAACuG,aAAN,CACI,KAAKzB,gBAAL,CAAsB;AAClBG,MAAAA,KAAK,EAAE5G,KAAK,CAACI,cADK;AAElBiH,MAAAA,IAAI,EAAE,iBAFY;AAGlBE,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHW;AAIlBnB,MAAAA,QAAQ,EAAE,CAAC,CAAC,GAAF,EAAO,GAAP,EAAY,GAAZ,CAJQ;AAKlBe,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AALW,KAAtB,CADJ,EAlC2B,CA4C3B;;AACAxF,IAAAA,KAAK,CAACuG,aAAN,CACI,KAAKzB,gBAAL,CAAsB;AAClBG,MAAAA,KAAK,EAAE5G,KAAK,CAACC,IADK;AAElBoH,MAAAA,IAAI,EAAE,MAFY;AAGlBE,MAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAHW;AAIlBnB,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAJQ;AAKlBe,MAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb;AALW,KAAtB,CADJ,EA7C2B,CAuD3B;;AACA,QAAIgB,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAhB;AACA,QAAIC,UAAU,GAAG,IAAjB;AACAzG,IAAAA,KAAK,CAACuG,aAAN,CACI,KAAKzB,gBAAL,CAAsB;AAClBG,MAAAA,KAAK,EAAE5G,KAAK,CAACC,IADK;AAElBoH,MAAAA,IAAI,EAAE,WAFY;AAGlBE,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAMa,UAAN,EAAkB,IAAlB,CAHW;AAIlBhC,MAAAA,QAAQ,EAAE,CAAC,CAAC,IAAF,EAAQgC,UAAR,EAAoB,CAAC,IAArB,CAJQ;AAKlBjB,MAAAA,KAAK,EAAEgB;AALW,KAAtB,CADJ;AASAxG,IAAAA,KAAK,CAACuG,aAAN,CACI,KAAKzB,gBAAL,CAAsB;AAClBG,MAAAA,KAAK,EAAE5G,KAAK,CAACC,IADK;AAElBoH,MAAAA,IAAI,EAAE,YAFY;AAGlBE,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAMa,UAAN,EAAkB,IAAlB,CAHW;AAIlBhC,MAAAA,QAAQ,EAAE,CAAC,IAAD,EAAOgC,UAAP,EAAmB,CAAC,IAApB,CAJQ;AAKlBjB,MAAAA,KAAK,EAAEgB;AALW,KAAtB,CADJ;AASAxG,IAAAA,KAAK,CAACuG,aAAN,CACI,KAAKzB,gBAAL,CAAsB;AAClBG,MAAAA,KAAK,EAAE5G,KAAK,CAACC,IADK;AAElBoH,MAAAA,IAAI,EAAE,WAFY;AAGlBE,MAAAA,KAAK,EAAE,CAAC,IAAD,EAAOa,UAAP,EAAmB,GAAnB,CAHW;AAIlBhC,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAMgC,UAAN,EAAkB,CAAC,IAAnB,CAJQ;AAKlBjB,MAAAA,KAAK,EAAEgB;AALW,KAAtB,CADJ,EA5E2B,CAsF3B;;AACAxG,IAAAA,KAAK,CAACuG,aAAN,CACI,KAAKzB,gBAAL,CAAsB;AAClBG,MAAAA,KAAK,EAAE5G,KAAK,CAACC,IADK;AAElBoH,MAAAA,IAAI,EAAE,OAFY;AAGlBE,MAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,CAHW;AAIlBnB,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAMgC,UAAU,GAAG,GAAnB,EAAwB,CAAC,IAAzB,CAJQ;AAKlBjB,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AALW,KAAtB,CADJ,EAvF2B,CAiG3B;AACA;;AACA,QAAIkB,UAAU,GAAG,GAAjB;AACA1G,IAAAA,KAAK,CAAC2G,cAAN,CAAqB,KAAKb,sBAAL,CAA4B;AAC7CJ,MAAAA,IAAI,EAAE,aADuC;AAE7CE,MAAAA,KAAK,EAAE,CAACc,UAAD,EAAaA,UAAb,EAAyBA,UAAzB,CAFsC;AAG7CjC,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,MAAMgC,UAAN,GAAmBC,UAAzB,EAAqC,CAAC,IAAtC,CAHmC;AAI7ClB,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAJsC;AAK7CU,MAAAA,WAAW,EAAE;AAAE;AACXC,QAAAA,OAAO,EAAE,KADA;AAETC,QAAAA,UAAU,EAAE;AAFH;AALgC,KAA5B,CAArB;AAUApG,IAAAA,KAAK,CAAC2G,cAAN,CAAqB,KAAKb,sBAAL,CAA4B;AAC7CJ,MAAAA,IAAI,EAAE,YADuC;AAE7CE,MAAAA,KAAK,EAAE,CAACc,UAAD,EAAaA,UAAb,EAAyBA,UAAzB,CAFsC;AAG7CjC,MAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,MAAMgC,UAAN,GAAmBC,UAA1B,EAAsC,CAAC,IAAvC,CAHmC;AAI7ClB,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAJsC;AAK7CU,MAAAA,WAAW,EAAE;AAAE;AACXC,QAAAA,OAAO,EAAE,KADA;AAETC,QAAAA,UAAU,EAAE;AAFH;AALgC,KAA5B,CAArB;AAUApG,IAAAA,KAAK,CAAC2G,cAAN,CAAqB,KAAKb,sBAAL,CAA4B;AAC7CJ,MAAAA,IAAI,EAAE,WADuC;AAE7CE,MAAAA,KAAK,EAAE,CAACc,UAAD,EAAaA,UAAb,EAAyBA,UAAzB,CAFsC;AAG7CjC,MAAAA,QAAQ,EAAE,CAAC,CAAC,IAAF,EAAQ,MAAMgC,UAAN,GAAmBC,UAA3B,EAAuC,CAAC,IAAxC,CAHmC;AAI7ClB,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAJsC;AAK7CU,MAAAA,WAAW,EAAE;AAAE;AACXC,QAAAA,OAAO,EAAE,KADA;AAETC,QAAAA,UAAU,EAAE;AAFH;AALgC,KAA5B,CAArB;AAUH;;AAEDvG,EAAAA,uBAAuB,GAAI;AACvB;AACA,QAAIlC,UAAU,CAACiJ,SAAX,CAAqBC,YAAzB,EAAuC;AACnC,WAAK/G,MAAL,CAAYgH,SAAZ,CAAsB,CAAC,GAAD,EAAM,GAAN,EAAW,EAAEnJ,UAAU,CAACoJ,SAAX,GAAuBpJ,UAAU,CAACqJ,SAApC,IAA+C,IAA1D,CAAtB;AACH,KAFD,CAEE;AAFF,SAGK,IAAGrJ,UAAU,CAACiJ,SAAX,CAAqBK,UAAxB,EAAoC;AACrC,aAAKnH,MAAL,CAAYgH,SAAZ,CAAsB,CAAC,CAACnJ,UAAU,CAACqJ,SAAZ,GAAsB,IAAvB,EAA6BrJ,UAAU,CAACoJ,SAAX,GAAqB,IAAlD,EAAwD,GAAxD,CAAtB;AACH,OAFI,CAEH;AAFG,WAGA,IAAIpJ,UAAU,CAACiJ,SAAX,CAAqBM,WAAzB,EAAsC;AACvC,eAAKpH,MAAL,CAAYqH,MAAZ,CAAmB,CAAC,CAACxJ,UAAU,CAACoJ,SAAZ,GAAsB,IAAvB,EAA6B,CAACpJ,UAAU,CAACqJ,SAAZ,GAAsB,IAAnD,EAAyD,GAAzD,CAAnB;AACH;;AAED,QAAIzD,IAAI,CAACC,GAAL,CAAS7F,UAAU,CAACyJ,UAApB,IAAkC,IAAtC,EAA4C;AACxC,UAAIzJ,UAAU,CAACyJ,UAAX,GAAwB,GAA5B,EAAiC;AAC7B,aAAKtH,MAAL,CAAYgH,SAAZ,CAAsB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAtB;AACH,OAFD,MAII,KAAKhH,MAAL,CAAYgH,SAAZ,CAAsB,CAAC,GAAD,EAAM,GAAN,EAAW,CAAC,GAAZ,CAAtB;AACP;AACJ;;AAEDpE,EAAAA,UAAU,GAAG;AACT;AACA,SAAK2E,QAAL,GAAgBC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAhB;AACA,SAAK7F,GAAL,GAAW,KAAK2F,QAAL,CAAcG,UAAd,CAAyB,IAAzB,CAAX,CAHS,CAKT;;AACA,SAAKjG,MAAL,GAAc+F,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAd,CANS,CAOT;;AACA,SAAK1G,EAAL,GAAU,KAAKU,MAAL,CAAYiG,UAAZ,CAAuB,OAAvB,CAAV,CARS,CAUT;;AACA,QAAI,CAAC,KAAK3G,EAAV,EAAc;AACVX,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAsH,MAAAA,KAAK,CAAC,yEAAD,CAAL;AACA,aAAO,CAAP;AACH,KAfQ,CAiBT;;;AACA,SAAK5G,EAAL,CAAQ+C,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAKrC,MAAL,CAAYC,KAAnC,EAA0C,KAAKD,MAAL,CAAYE,MAAtD,EAlBS,CAmBT;;AACA,SAAKZ,EAAL,CAAQ6G,UAAR,CAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,GAArC,EApBS,CAqBT;;AACA,SAAK7G,EAAL,CAAQ8G,MAAR,CAAe,KAAK9G,EAAL,CAAQ+G,UAAvB,EAtBS,CAuBT;;AACA,SAAK/G,EAAL,CAAQ8G,MAAR,CAAe,KAAK9G,EAAL,CAAQgH,SAAvB;AACA,SAAKhH,EAAL,CAAQiH,QAAR,CAAiB,KAAKjH,EAAL,CAAQkH,IAAzB;AACA,SAAKlH,EAAL,CAAQmH,SAAR,CAAkB,KAAKnH,EAAL,CAAQoH,GAA1B;AACH;;AAEDxH,EAAAA,gBAAgB,CAACyH,MAAD,EAASC,MAAT,EAAiB;AAC7B;AACA,QAAIxD,CAAC,GAAI,MAAMuD,MAAP,GAAiB,KAAK3G,MAAL,CAAYC,KAA7B,GAAqC,GAA7C;AACA,QAAIoD,CAAC,GAAG,MAAO,MAAMuD,MAAP,GAAiB,KAAK5G,MAAL,CAAYE,MAA3C,CAH6B,CAGsB;;AACnD,QAAIoD,CAAC,GAAG,GAAR,CAJ6B,CAM7B;;AACA,QAAIuD,MAAM,GAAG,CAACzD,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAb,CAP6B,CAS7B;;AACA,QAAIwD,OAAO,GAAG,CAAC1D,CAAD,EAAIC,CAAJ,EAAO,CAACC,CAAR,EAAW,GAAX,CAAd,CAV6B,CAY7B;;AACA,QAAIyD,WAAW,GAAG/E,IAAI,CAACgF,EAAL,GAAU,CAA5B;AACA,QAAIC,WAAW,GAAG,KAAKjH,MAAL,CAAYC,KAAZ,GAAoB,KAAKD,MAAL,CAAYE,MAAlD;AACA,QAAIgH,UAAU,GAAGzK,OAAO,CAAC0K,WAAR,CAAoBJ,WAApB,EAAiCE,WAAjC,EAA8C,GAA9C,EAAmD,MAAnD,CAAjB;AACAxK,IAAAA,OAAO,CAAC2K,MAAR,CAAeF,UAAf,EAA2BA,UAA3B;AAEA,QAAIG,MAAM,GAAG5K,OAAO,CAAC6K,cAAR,CAAuBJ,UAAvB,EAAmCJ,OAAnC,CAAb;AACAO,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,CAAC,GAAb;AAAkBA,IAAAA,MAAM,CAAC,CAAD,CAAN,GAAY,GAAZ,CAnBW,CAqB7B;;AACA,QAAIE,YAAY,GAAG,KAAKhJ,MAAL,CAAYuB,SAAZ,CAAsBC,MAAzC;AACAtD,IAAAA,OAAO,CAAC2K,MAAR,CAAeG,YAAf,EAA6BA,YAA7B;AACA,QAAIC,QAAQ,GAAG/K,OAAO,CAAC6K,cAAR,CAAuBC,YAAvB,EAAqCF,MAArC,CAAf;AACA,QAAII,kBAAkB,GAAG,IAAIjL,OAAJ,CAAY,CAACgL,QAAQ,CAAC,CAAD,CAAT,EAAcA,QAAQ,CAAC,CAAD,CAAtB,EAA2BA,QAAQ,CAAC,CAAD,CAAnC,CAAZ,CAAzB;AACA7I,IAAAA,OAAO,CAACC,GAAR,CAAY6I,kBAAZ,EA1B6B,CA2B7B;AACH;;AA7dQ;;AAgeb,eAAepK,MAAf","sourcesContent":["//TODO: Implement a sky box background\r\n//TODO: Implement cubic shadow mapping\r\n//TODO: Implement a ParticleSystem component\r\n\r\n// JavaScript components\r\nimport Shader from \"./ShaderHandle\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./events/EventHandler\";\r\nimport MouseEvent from \"./events/MouseEvent\";\r\nimport Scene from \"./Scene\";\r\nimport PointLightSource from \"./PointLightSource\";\r\nimport IntersectionField from \"./IntersectionField\";\r\n\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Matrix4 from \"./math/Matrix4\";\r\n\r\n// Shader files\r\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\r\nimport AmbientShader from \"./shaders/AmbientShader\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\r\nconst CAMERA_ROTATION = [-5.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER_SMOOTH: 2,\r\n    CYLINDER_SHARP: 3,\r\n    PLANE: 4\r\n};\r\n\r\nconst MS_PER_UPDATE = 2.0;\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n        this.viewportAspectRatio = 1.0;\r\n\r\n        this.lag = 0.0;\r\n\r\n        // Scenes works like blocks in the game world.\r\n        // The active scenes are based on the cameras distance to the origin of each scene.\r\n        this.scenes = [];\r\n\r\n        this.shaders = new Map();\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Time start of the loop\r\n        let startTime =  Time.now;\r\n\r\n        // Update time clock\r\n        Time.update();\r\n\r\n        // Add elapsed time to the lag variable\r\n        this.lag += Time.deltaTime;\r\n\r\n        while (this.lag >= MS_PER_UPDATE) {\r\n            this.update();\r\n            this.lag -= MS_PER_UPDATE;\r\n        }\r\n\r\n        // Render graphics\r\n        this.render(this.lag/MS_PER_UPDATE);\r\n\r\n        // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\r\n        //while ((Time.now - startTime) < 16.0) ; // Sleep\r\n    }\r\n\r\n    update() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation(this.camera);\r\n\r\n        this.scenes.forEach((scene) => {\r\n            scene.update();\r\n        });\r\n\r\n        if(MouseEvent.mouseDown) {\r\n            console.log(\"X: \" + MouseEvent.offsetX + \", Y: \" + MouseEvent.offsetY);\r\n            console.log(\"canvas width: \" + this.intersect.canvasWidth + \", canvas height: \" + this.intersect.canvasHeight);\r\n\r\n            this.intersectionTest(MouseEvent.offsetX, MouseEvent.offsetY);\r\n        }\r\n\r\n        EventHandler.resetMouseEvents();\r\n    }\r\n\r\n    render(residualLag) {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scenes\r\n        this.scenes.forEach((scene) => {\r\n            scene.updateLightPositions();\r\n            scene.draw();\r\n        });\r\n\r\n        ///// INTERSECTION TEST //////\r\n        this.intersect.updateBorders(this.camera, this.scenes[0].sceneObjects[0].transform.matrix, this.canvas.width, this.canvas.height);\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n        this.ctx.strokeStyle = \"yellow\";\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.intersect.borders.xMin, this.intersect.borders.yMin);\r\n        this.ctx.lineTo(this.intersect.borders.xMax, this.intersect.borders.yMin);\r\n        this.ctx.lineTo(this.intersect.borders.xMax, this.intersect.borders.yMax);\r\n        this.ctx.lineTo(this.intersect.borders.xMin, this.intersect.borders.yMax);\r\n        this.ctx.closePath();\r\n        this.ctx.stroke();\r\n        ///// INTERSECTION TEST //////\r\n\r\n        // Display fps and other information\r\n        this.drawTextElements();\r\n    }\r\n\r\n    // This function is called before the game loop is initiated\r\n    preload() {\r\n        // Initiate time tracker component\r\n        Time.init();\r\n\r\n        // Initiate the event handler\r\n        EventHandler.init();\r\n\r\n        // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\r\n        this.setUpWebGL();\r\n\r\n        // Create shaders\r\n        let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\r\n        let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\r\n\r\n        this.shaders.set(\"phong\", mainShader);\r\n        this.shaders.set(\"ambient\", ambientShader);\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.shaders);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create a scene for the objects\r\n        let defaultScene = new Scene(this.shaders);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects(defaultScene);\r\n        // Add to scenes\r\n        this.scenes.push(defaultScene);\r\n\r\n        ///// INTERSECTION TEST //////\r\n        this.intersect = new IntersectionField();\r\n        this.cubeMatrix = this.scenes[0].sceneObjects[0].transform.matrix;\r\n        this.intersect.updateBorders(this.camera, this.cubeMatrix, this.canvas.width, this.canvas.height);\r\n        ///// INTERSECTION TEST //////\r\n\r\n        ///// MULTIPLE SCENE TEST ///////\r\n        /*\r\n        let defaultScene2 = new Scene(this.shaders);\r\n        let defaultScene3 = new Scene(this.shaders);\r\n        let defaultScene4 = new Scene(this.shaders);\r\n\r\n        this.loadDefaultSceneObjects(defaultScene2);\r\n        this.loadDefaultSceneObjects(defaultScene3);\r\n        this.loadDefaultSceneObjects(defaultScene4);\r\n\r\n        defaultScene3.setPosition([0.0, 0.0, 80.0]);\r\n        defaultScene3.setRotation([0.0, 180.0, 0.0]);\r\n\r\n        defaultScene2.setPosition([0.0, 60.0, 0.0]);\r\n        defaultScene2.setRotation([0.0, 0.0, 180.0]);\r\n\r\n        defaultScene4.setPosition([0.0, 60.0, 80.0]);\r\n        defaultScene4.setRotation([0.0, 180.0, 180.0]);\r\n\r\n        this.scenes.push(defaultScene2);\r\n        this.scenes.push(defaultScene3);\r\n        this.scenes.push(defaultScene4);\r\n        */\r\n        ///// MULTIPLE SCENE TEST ///////\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let currentAspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Check if the aspect ratio has changed before going further\r\n        if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001)\r\n            return;\r\n\r\n        // Update the projection matrix for the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniformAspectRatio(currentAspectRatio);\r\n        });\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Save current aspect ratio\r\n        this.viewportAspectRatio = currentAspectRatio;\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 10;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.gl);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\r\n            mesh.createCylinderSmooth(32, 1, 1, 2);\r\n        }\r\n        else if(settings.shape === SHAPE.CYLINDER_SHARP) {\r\n            mesh.createCylinderSharp(8, 1, 2);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        return obj;\r\n    }\r\n\r\n    createPointLightSource(settings) {\r\n        // Create the light source component\r\n        let lightSource = new PointLightSource(settings.name);\r\n        lightSource.setPosition(settings.position);\r\n        lightSource.setScale(settings.scale);\r\n        lightSource.setLightColor(settings.color);\r\n        lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic);\r\n\r\n        // Create a model for the light source\r\n        let lightSourceModel = new Mesh(this.gl);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor(settings.color);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        return lightSource;\r\n    }\r\n\r\n    loadDefaultSceneObjects(scene) {\r\n        // Create a red cube\r\n        let cube = this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [1.0, 1.0, 1.0],\r\n            position: [0.0, 1.5, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n        scene.addGameObject(cube);\r\n\r\n        // Create a green sphere\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.SPHERE,\r\n                name: 'Green Sphere',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [4.0, 2.0, 2.0],\r\n                color: [0.0, 1.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a smooth magenta cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SMOOTH,\r\n                name: 'Magenta Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-4.0, 2.0, 2.0],\r\n                color: [1.0, 0.0, 1.0]\r\n            })\r\n        );\r\n\r\n        // Create a sharp orange cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SHARP,\r\n                name: 'Orange Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-8.0, 2.0, 2.0],\r\n                color: [1.0, 0.5, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create gray floor\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Roof',\r\n                scale: [40.0, 0.1, 40.0],\r\n                position: [0.0, 0.0, 0.0],\r\n                color: [0.75, 0.75, 0.75]\r\n            })\r\n        );\r\n\r\n        // Create blue walls\r\n        let wallColor = [0.0, 0.2, 1.0];\r\n        let wallHeight = 10.0;\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Left Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [-40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Right Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Back Wall',\r\n                scale: [40.0, wallHeight, 0.1],\r\n                position: [0.0, wallHeight, -40.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n\r\n        // Create gray roof\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Floor',\r\n                scale: [40.0, 0.1, 20.0],\r\n                position: [0.0, wallHeight * 2.0, -20.0],\r\n                color: [0.5, 0.5, 0.5]\r\n            })\r\n        );\r\n\r\n        // Create a point lights for the scene\r\n        // Add the light source to our scene\r\n        let lampRadius = 0.5;\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 0.5]);\r\n            }\r\n            else\r\n                this.camera.translate([0.0, 0.0, -0.5]);\r\n        }\r\n    }\r\n\r\n    setUpWebGL() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n    }\r\n\r\n    intersectionTest(mouseX, mouseY) {\r\n        // Scale the range from pixel values to [-1, 1]\r\n        let x = (2.0 * mouseX) / this.canvas.width - 1.0;\r\n        let y = 1.0 - (2.0 * mouseY) / this.canvas.height; // Reverse Y direction\r\n        let z = 1.0;\r\n\r\n        // Normalized device coordinates\r\n        let rayNdc = [x, y, z];\r\n\r\n        // Homogeneous clip coordinates\r\n        let rayClip = [x, y, -z, 1.0];\r\n\r\n        // Camera space coordinates\r\n        let fieldOfView = Math.PI / 6;\r\n        let aspectRatio = this.canvas.width / this.canvas.height;\r\n        let projection = Matrix4.perspective(fieldOfView, aspectRatio, 0.1, 1000.0);\r\n        Matrix4.invert(projection, projection);\r\n\r\n        let rayCam = Matrix4.multiplyVector(projection, rayClip);\r\n        rayCam[2] = -1.0; rayCam[3] = 1.0;\r\n\r\n        // World coordinates\r\n        let cameraMatrix = this.camera.transform.matrix;\r\n        Matrix4.invert(cameraMatrix, cameraMatrix);\r\n        let rayWorld = Matrix4.multiplyVector(cameraMatrix, rayCam);\r\n        let rayWorldNormalized = new Vector3([rayWorld[0], rayWorld[1], rayWorld[2]]);\r\n        console.log(rayWorldNormalized);\r\n        //console.log(rayWorldNormalized.normalized());\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
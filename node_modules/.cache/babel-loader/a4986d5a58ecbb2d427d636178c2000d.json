{"ast":null,"code":"/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\nclass AmbientShader {\n  static get vertex() {\n    return [\"precision mediump float;\", // Attribute locations\n    \"attribute vec3 vertPosition;\", \"attribute vec3 vertNormal;\", \"attribute vec2 vertTexCoord;\", // Transformation matrices\n    \"uniform mat4 cameraView;\", \"uniform mat4 modelView;\", \"uniform mat4 perspective;\", // Fragment shader input variables\n    \"varying vec3 Normal;\", \"void main() {\", // Fragment shader input variables\n    \"Normal = normalize(mat3(modelView)*vertNormal);\", // Final transformation ( Perspective multiplied with the model view )\n    \"mat4 T = perspective * cameraView * modelView;\", // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\n    \"gl_Position = T * vec4(vertPosition, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n  static get fragment() {\n    return [// Float precision\n    \"precision mediump float;\", // Fragment shader input variables\n    \"varying vec3 Normal;\", // Shader inputs\n    \"uniform vec3 viewPosition;\", \"uniform vec3 diffuseColor;\", \"void main() {\", \"gl_FragColor = vec4 (diffuseColor, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default AmbientShader;","map":{"version":3,"sources":["G:/DOKUMENT/Projekt/React/Waves/procedural-waves/src/js/bluebox/shaders/AmbientShader.js"],"names":["AmbientShader","vertex","join","fragment"],"mappings":"AAAA;;;;AAKA,MAAMA,aAAN,CAAoB;AAChB,aAAWC,MAAX,GAAqB;AACjB,WAAO,CACH,0BADG,EAGH;AACA,kCAJG,EAKH,4BALG,EAMH,8BANG,EAQH;AACA,8BATG,EAUH,yBAVG,EAWH,2BAXG,EAaH;AACA,0BAdG,EAgBH,eAhBG,EAiBC;AACA,qDAlBD,EAmBC;AACA,oDApBD,EAqBC;AACA,gDAtBD,EAuBH,GAvBG,EAwBLC,IAxBK,CAwBA,IAxBA,CAAP;AAyBH;;AAED,aAAWC,QAAX,GAAuB;AACnB,WAAO,CACH;AACA,8BAFG,EAIH;AACA,0BALG,EAOH;AACA,gCARG,EASH,4BATG,EAWH,eAXG,EAYC,0CAZD,EAaH,GAbG,EAcLD,IAdK,CAcA,IAdA,CAAP;AAeH;;AA7Ce;;AAgDpB,eAAeF,aAAf","sourcesContent":["/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nclass AmbientShader {\r\n    static get vertex () {\r\n        return [\r\n            \"precision mediump float;\",\r\n\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n\r\n            // Fragment shader input variables\r\n            \"varying vec3 Normal;\",\r\n\r\n            \"void main() {\",\r\n                // Fragment shader input variables\r\n                \"Normal = normalize(mat3(modelView)*vertNormal);\",\r\n                // Final transformation ( Perspective multiplied with the model view )\r\n                \"mat4 T = perspective * cameraView * modelView;\",\r\n                // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\r\n                \"gl_Position = T * vec4(vertPosition, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    static get fragment () {\r\n        return [\r\n            // Float precision\r\n            \"precision mediump float;\",\r\n\r\n            // Fragment shader input variables\r\n            \"varying vec3 Normal;\",\r\n\r\n            // Shader inputs\r\n            \"uniform vec3 viewPosition;\",\r\n            \"uniform vec3 diffuseColor;\",\r\n\r\n            \"void main() {\",\r\n                \"gl_FragColor = vec4 (diffuseColor, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default AmbientShader;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import MouseEvent from \"./events/MouseEvent\";\nimport Raycast from \"./Raycast\";\n\nclass GameEditor {\n  constructor(gl, context2D, shaders, camera, canvas, projectionMatrix) {\n    this.gl = gl;\n    this.context2D = context2D;\n    this.shaders = shaders;\n    this.camera = camera;\n    this.canvas = canvas;\n    this.projectionMatrix = projectionMatrix;\n    this.selectedObject = null;\n  }\n\n  processUserInput() {\n    // Handle camera navigation\n    this.processCameraNavigation(); // If left mouse button is pressed, cast a ray from the mouse cursor position\n\n    if (MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\n      // Create a ray from the camera\n      let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height); //// Test ray intersections ////\n\n      let objectFound = Raycast.findObjectIntersection(ray);\n\n      if (objectFound) {\n        if (this.selectedObject) this.selectedObject.setActive(false);\n        objectFound.setActive(true);\n        this.selectedObject = objectFound;\n      }\n    }\n  }\n\n  processCameraNavigation() {\n    // Zoom camera view in and out\n    if (MouseEvent.isPressed.middleButton) {\n      this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX) / 20.0]);\n    } // Pan the camera view\n    else if (MouseEvent.isPressed.leftButton) {\n        this.camera.translate([-MouseEvent.movementX / 40.0, MouseEvent.movementY / 40.0, 0.0]);\n      } // Rotate the camera view\n      else if (MouseEvent.isPressed.rightButton) {\n          this.camera.rotate([-MouseEvent.movementY / 10.0, -MouseEvent.movementX / 10.0, 0.0]);\n        }\n\n    if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\n      if (MouseEvent.wheelDelta > 0.0) {\n        this.camera.translate([0.0, 0.0, 0.5]);\n      } else this.camera.translate([0.0, 0.0, -0.5]);\n    }\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.context2D.font = \"20px Consolas\";\n    this.context2D.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.context2D.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n}\n\nexport default GameEditor;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\GameEditor.js"],"names":["MouseEvent","Raycast","GameEditor","constructor","gl","context2D","shaders","camera","canvas","projectionMatrix","selectedObject","processUserInput","processCameraNavigation","mouseDown","isPressed","leftButton","ray","raycastFromMouseCursor","offsetX","offsetY","transform","width","height","objectFound","findObjectIntersection","setActive","middleButton","translate","movementY","movementX","rightButton","rotate","Math","abs","wheelDelta","drawTextElements","font","fillStyle","currentTextOffset","clearRect","offsetWidth","displayFrameRate","displayCameraPosition"],"mappings":"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","sourcesContent":["import MouseEvent from \"./events/MouseEvent\";\r\nimport Raycast from \"./Raycast\";\r\n\r\nclass GameEditor {\r\n    constructor(gl, context2D, shaders, camera, canvas, projectionMatrix) {\r\n        this.gl = gl;\r\n        this.context2D = context2D;\r\n        this.shaders = shaders;\r\n        this.camera = camera;\r\n        this.canvas = canvas;\r\n        this.projectionMatrix = projectionMatrix;\r\n\r\n        this.selectedObject = null;\r\n    }\r\n\r\n    processUserInput() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation();\r\n\r\n        // If left mouse button is pressed, cast a ray from the mouse cursor position\r\n        if(MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\r\n            // Create a ray from the camera\r\n            let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height);\r\n\r\n            //// Test ray intersections ////\r\n            let objectFound = Raycast.findObjectIntersection(ray);\r\n            if (objectFound) {\r\n                if (this.selectedObject)\r\n                    this.selectedObject.setActive(false);\r\n\r\n                objectFound.setActive(true);\r\n                this.selectedObject = objectFound;\r\n            }\r\n        }\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 0.5]);\r\n            }\r\n            else\r\n                this.camera.translate([0.0, 0.0, -0.5]);\r\n        }\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.context2D.font = \"20px Consolas\";\r\n        this.context2D.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.context2D.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n}\r\n\r\nexport default GameEditor;"]},"metadata":{},"sourceType":"module"}
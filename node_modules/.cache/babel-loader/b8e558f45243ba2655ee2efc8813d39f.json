{"ast":null,"code":"import Transform from './Transform';\nimport Vector3 from \"./math/Vector3\";\nimport IntersectionField from \"./IntersectionField\"; // TODO: Linear interpolation for transforms (translation and rotation)\n// TODO: Implement visible and interactable local coordinate system for handling game objects in the editor\n// TODO: Implement a RigidBody component for handling velocity, acceleration and mass\n// TODO: Implement a Collider component for handling collision between game objects\n// TODO: Implement a Material component for handling color, textures, etc.\n// TODO: Implement a Script component for game object logic\n\nclass GameObject {\n  constructor(name) {\n    this.nameTag = name;\n    this.meshes = [];\n    this.parent = null;\n    this.transform = new Transform();\n    this.intersectionField = null;\n  }\n\n  setIntersectable(state, canvasWidth, canvasHeight, camera) {\n    if (state) {\n      this.intersectionField = new IntersectionField(canvasWidth, canvasHeight);\n    } else {\n      this.intersectionField = null;\n    }\n  }\n\n  get worldPosition() {\n    return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\n  }\n\n  setNameTag(name) {\n    this.nameTag = name;\n  }\n\n  translate(val) {\n    this.transform.translate(val);\n  }\n\n  rotate(rot) {\n    this.transform.rotate(rot);\n  }\n\n  setPosition(pos) {\n    this.transform.setPosition(pos);\n  }\n\n  setRotation(rot) {\n    this.transform.setRotation(rot);\n  }\n\n  setScale(scale) {\n    this.transform.setScale(scale);\n  }\n\n  addMesh(mesh) {\n    this.transform.addChild(mesh.transform);\n    this.meshes.push(mesh);\n  }\n\n  addCollider(collider) {}\n\n  addRigidBody(rigidBody) {}\n\n  render(shader) {\n    for (let i = 0; i < this.meshes.length; ++i) {\n      this.meshes[i].render(shader);\n    }\n  }\n\n  update() {}\n\n}\n\nexport default GameObject;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\GameObject.js"],"names":["Transform","Vector3","IntersectionField","GameObject","constructor","name","nameTag","meshes","parent","transform","intersectionField","setIntersectable","state","canvasWidth","canvasHeight","camera","worldPosition","matrix","setNameTag","translate","val","rotate","rot","setPosition","pos","setRotation","setScale","scale","addMesh","mesh","addChild","push","addCollider","collider","addRigidBody","rigidBody","render","shader","i","length","update"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAAEC,IAAF,EAAQ;AACf,SAAKC,OAAL,GAAeD,IAAf;AACA,SAAKE,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,SAAL,GAAiB,IAAIT,SAAJ,EAAjB;AAEA,SAAKU,iBAAL,GAAyB,IAAzB;AAEH;;AAEDC,EAAAA,gBAAgB,CAACC,KAAD,EAAQC,WAAR,EAAqBC,YAArB,EAAmCC,MAAnC,EAA2C;AACvD,QAAIH,KAAJ,EAAW;AACP,WAAKF,iBAAL,GAAyB,IAAIR,iBAAJ,CAAsBW,WAAtB,EAAmCC,YAAnC,CAAzB;AACH,KAFD,MAGK;AACD,WAAKJ,iBAAL,GAAyB,IAAzB;AACH;AACJ;;AAED,MAAIM,aAAJ,GAAoB;AAChB,WAAO,IAAIf,OAAJ,CAAY,CAAC,KAAKQ,SAAL,CAAeQ,MAAf,CAAsB,EAAtB,CAAD,EAA4B,KAAKR,SAAL,CAAeQ,MAAf,CAAsB,EAAtB,CAA5B,EAAuD,KAAKR,SAAL,CAAeQ,MAAf,CAAsB,EAAtB,CAAvD,CAAZ,CAAP;AACH;;AAEDC,EAAAA,UAAU,CAACb,IAAD,EAAO;AACb,SAAKC,OAAL,GAAeD,IAAf;AACH;;AAEDc,EAAAA,SAAS,CAAEC,GAAF,EAAO;AACZ,SAAKX,SAAL,CAAeU,SAAf,CAAyBC,GAAzB;AACH;;AAEDC,EAAAA,MAAM,CAACC,GAAD,EAAM;AACR,SAAKb,SAAL,CAAeY,MAAf,CAAsBC,GAAtB;AACH;;AAEDC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKf,SAAL,CAAec,WAAf,CAA2BC,GAA3B;AACH;;AAEDC,EAAAA,WAAW,CAACH,GAAD,EAAM;AACb,SAAKb,SAAL,CAAegB,WAAf,CAA2BH,GAA3B;AACH;;AAEDI,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACZ,SAAKlB,SAAL,CAAeiB,QAAf,CAAwBC,KAAxB;AACH;;AAEDC,EAAAA,OAAO,CAAEC,IAAF,EAAQ;AACX,SAAKpB,SAAL,CAAeqB,QAAf,CAAwBD,IAAI,CAACpB,SAA7B;AACA,SAAKF,MAAL,CAAYwB,IAAZ,CAAiBF,IAAjB;AACH;;AAEDG,EAAAA,WAAW,CAAEC,QAAF,EAAY,CAEtB;;AAEDC,EAAAA,YAAY,CAAEC,SAAF,EAAa,CAExB;;AAEDC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/B,MAAL,CAAYgC,MAAhC,EAAwC,EAAED,CAA1C,EAA6C;AACzC,WAAK/B,MAAL,CAAY+B,CAAZ,EAAeF,MAAf,CAAsBC,MAAtB;AACH;AACJ;;AAEDG,EAAAA,MAAM,GAAG,CAER;;AArEY;;AAwEjB,eAAerC,UAAf","sourcesContent":["import Transform from './Transform';\r\nimport Vector3 from \"./math/Vector3\";\r\nimport IntersectionField from \"./IntersectionField\";\r\n\r\n// TODO: Linear interpolation for transforms (translation and rotation)\r\n// TODO: Implement visible and interactable local coordinate system for handling game objects in the editor\r\n// TODO: Implement a RigidBody component for handling velocity, acceleration and mass\r\n// TODO: Implement a Collider component for handling collision between game objects\r\n// TODO: Implement a Material component for handling color, textures, etc.\r\n// TODO: Implement a Script component for game object logic\r\n\r\nclass GameObject {\r\n    constructor (name) {\r\n        this.nameTag = name;\r\n        this.meshes = [];\r\n        this.parent = null;\r\n        this.transform = new Transform();\r\n\r\n        this.intersectionField = null;\r\n\r\n    }\r\n\r\n    setIntersectable(state, canvasWidth, canvasHeight, camera) {\r\n        if (state) {\r\n            this.intersectionField = new IntersectionField(canvasWidth, canvasHeight);\r\n        }\r\n        else {\r\n            this.intersectionField = null;\r\n        }\r\n    }\r\n\r\n    get worldPosition() {\r\n        return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\r\n    }\r\n\r\n    setNameTag(name) {\r\n        this.nameTag = name;\r\n    }\r\n\r\n    translate (val) {\r\n        this.transform.translate(val);\r\n    }\r\n\r\n    rotate(rot) {\r\n        this.transform.rotate(rot);\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.transform.setPosition(pos);\r\n    }\r\n\r\n    setRotation(rot) {\r\n        this.transform.setRotation(rot);\r\n    }\r\n\r\n    setScale(scale) {\r\n        this.transform.setScale(scale);\r\n    }\r\n\r\n    addMesh (mesh) {\r\n        this.transform.addChild(mesh.transform);\r\n        this.meshes.push(mesh);\r\n    }\r\n\r\n    addCollider (collider) {\r\n\r\n    }\r\n\r\n    addRigidBody (rigidBody) {\r\n\r\n    }\r\n\r\n    render(shader) {\r\n        for (let i = 0; i < this.meshes.length; ++i) {\r\n            this.meshes[i].render(shader);\r\n        }\r\n    }\r\n\r\n    update() {\r\n\r\n    }\r\n}\r\n\r\nexport default GameObject;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Transform from \"./Transform\";\nimport Vector3 from \"./math/Vector3\";\n\nclass Bullets {\n  constructor(bulletModel, bulletSpeed, bulletReach) {\n    this.activeBullets = [];\n    this.model = bulletModel;\n    this.speed = bulletSpeed;\n    this.reach = bulletReach;\n    this.gravity = 9.82;\n    this.mode = \"parabolic\";\n  }\n\n  addBullet(origin, direction) {\n    this.activeBullets.push({\n      origin: new Vector3(origin),\n      position: origin,\n      direction: direction,\n      time: 0.0\n    });\n  }\n\n  computeParabolicMotion() {\n    let i = 0;\n\n    while (i < this.activeBullets.length) {\n      let t = this.activeBullets[i].time;\n      let x = this.activeBullets[i].origin.x + this.speed * t * this.activeBullets[i].direction.x;\n      let y = this.activeBullets[i].origin.y + this.speed * t * this.activeBullets[i].direction.y - 0.5 * this.gravity * t * t;\n      let z = this.activeBullets[i].origin.z + this.speed * t * this.activeBullets[i].direction.z;\n      this.activeBullets[i].time += 0.005;\n      this.activeBullets[i].position = [x, y, z];\n\n      if (Vector3.distance(new Vector3([x, y, z]), this.activeBullets[i].origin) < this.reach) {\n        // Save current position\n        this.activeBullets[i].position = [x, y, z];\n        ++i;\n      } else {\n        // Remove bullet if distance is too great\n        this.activeBullets.splice(i, 1);\n      }\n    }\n  }\n\n  computeLinearMotion() {\n    let bulletTransform = new Transform();\n    let i = 0;\n\n    while (i < this.activeBullets.length) {\n      // Set bullets position and move it in the bullet direction\n      //bulletTransform.setPosition(this.activeBullets[i].position);\n      //bulletTransform.translate([this.activeBullets[i].direction.x * this.speed, (this.activeBullets[i].direction.y * this.speed), this.activeBullets[i].direction.z * this.speed]);\n      let t = this.activeBullets[i].time;\n      bulletTransform.setPosition([this.activeBullets[i].origin.x + this.activeBullets[i].direction.x * this.speed * t, this.activeBullets[i].origin.y + this.activeBullets[i].direction.y * this.speed * t, this.activeBullets[i].origin.z + this.activeBullets[i].direction.z * this.speed * t]); // Check distance from camera and bullet\n\n      if (Vector3.distance(bulletTransform.position, this.activeBullets[i].origin) < this.reach) {\n        // Save current position\n        this.activeBullets[i].position = [bulletTransform.position.x, bulletTransform.position.y, bulletTransform.position.z];\n        ++i;\n      } else {\n        // Remove bullet if distance is too great\n        this.activeBullets.splice(i, 1);\n      }\n    }\n  }\n\n  setMotionMode(mode) {\n    this.mode = mode;\n  }\n\n  update() {\n    if (this.mode === \"parabolic\") {\n      this.computeParabolicMotion();\n    } else if (this.mode === \"parabolic\") {\n      this.computeLinearMotion();\n    }\n  }\n\n  render(shader) {\n    this.activeBullets.forEach(bulletInfo => {\n      // Set bullet position\n      this.model.setPosition(bulletInfo.position); // Draw bullet\n\n      this.model.render(shader);\n    });\n  }\n\n}\n\nexport default Bullets;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Bullets.js"],"names":["Transform","Vector3","Bullets","constructor","bulletModel","bulletSpeed","bulletReach","activeBullets","model","speed","reach","gravity","mode","addBullet","origin","direction","push","position","time","computeParabolicMotion","i","length","t","x","y","z","distance","splice","computeLinearMotion","bulletTransform","setPosition","setMotionMode","update","render","shader","forEach","bulletInfo"],"mappings":"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","sourcesContent":["import Transform from \"./Transform\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass Bullets {\r\n    constructor (bulletModel, bulletSpeed, bulletReach) {\r\n        this.activeBullets = [];\r\n        this.model = bulletModel;\r\n        this.speed = bulletSpeed;\r\n        this.reach = bulletReach;\r\n\r\n        this.gravity = 9.82;\r\n        this.mode = \"parabolic\";\r\n    }\r\n\r\n    addBullet(origin, direction) {\r\n        this.activeBullets.push({\r\n            origin: new Vector3(origin),\r\n            position: origin,\r\n            direction: direction,\r\n            time: 0.0\r\n        });\r\n    }\r\n\r\n    computeParabolicMotion() {\r\n        let i = 0;\r\n        while(i < this.activeBullets.length) {\r\n\r\n            let t = this.activeBullets[i].time;\r\n            let x = this.activeBullets[i].origin.x + this.speed * t * this.activeBullets[i].direction.x;\r\n            let y = this.activeBullets[i].origin.y + this.speed * t * this.activeBullets[i].direction.y - (0.5 * this.gravity * t * t);\r\n            let z = this.activeBullets[i].origin.z + this.speed * t * this.activeBullets[i].direction.z;\r\n            this.activeBullets[i].time += 0.005;\r\n            this.activeBullets[i].position = [x, y, z];\r\n\r\n            if (Vector3.distance(new Vector3([x, y, z]), this.activeBullets[i].origin) < this.reach) {\r\n                // Save current position\r\n                this.activeBullets[i].position = [x, y, z];\r\n                ++i;\r\n            }\r\n            else { // Remove bullet if distance is too great\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    computeLinearMotion() {\r\n        let bulletTransform = new Transform();\r\n        let i = 0;\r\n        while(i < this.activeBullets.length) {\r\n            // Set bullets position and move it in the bullet direction\r\n            //bulletTransform.setPosition(this.activeBullets[i].position);\r\n            //bulletTransform.translate([this.activeBullets[i].direction.x * this.speed, (this.activeBullets[i].direction.y * this.speed), this.activeBullets[i].direction.z * this.speed]);\r\n            let t = this.activeBullets[i].time;\r\n            bulletTransform.setPosition([\r\n                this.activeBullets[i].origin.x + this.activeBullets[i].direction.x * this.speed * t,\r\n                this.activeBullets[i].origin.y + this.activeBullets[i].direction.y * this.speed * t,\r\n                this.activeBullets[i].origin.z + this.activeBullets[i].direction.z * this.speed * t,\r\n            ]);\r\n\r\n            // Check distance from camera and bullet\r\n            if (Vector3.distance(bulletTransform.position, this.activeBullets[i].origin) < this.reach) {\r\n                // Save current position\r\n                this.activeBullets[i].position = [bulletTransform.position.x, bulletTransform.position.y, bulletTransform.position.z];\r\n                ++i;\r\n            }\r\n            else { // Remove bullet if distance is too great\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    setMotionMode(mode) {\r\n        this.mode = mode;\r\n    }\r\n\r\n    update() {\r\n        if (this.mode === \"parabolic\") {\r\n            this.computeParabolicMotion();\r\n        }\r\n        else if (this.mode === \"parabolic\") {\r\n            this.computeLinearMotion();\r\n        }\r\n    }\r\n\r\n    render(shader) {\r\n        this.activeBullets.forEach((bulletInfo) => {\r\n            // Set bullet position\r\n            this.model.setPosition(bulletInfo.position);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Bullets;"]},"metadata":{},"sourceType":"module"}
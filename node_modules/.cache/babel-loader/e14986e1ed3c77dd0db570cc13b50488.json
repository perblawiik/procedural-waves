{"ast":null,"code":"import Vector3 from \"./math/Vector3\";\nimport RigidBody from \"./RigidBody\";\nimport CollisionManager from \"./CollisionManager\";\n\nclass ParticleEmitter {\n  constructor(particleModel, particleSpeed, particleLifeTime) {\n    this.activeParticles = [];\n    this.model = particleModel;\n    this.speed = particleSpeed;\n    this.lifeTime = particleLifeTime;\n    this.gravityIsEnabled = false;\n    this.gravity = 9.82;\n  }\n\n  emitParticle(origin, direction) {\n    let rb = new RigidBody(origin);\n    rb.setVelocity([direction.x * this.speed, direction.y * this.speed, direction.z * this.speed]);\n    rb.enableGravity(this.gravityIsEnabled);\n    let key = CollisionManager.registerRigidBody(rb);\n    this.activeParticles.push({\n      id: key,\n      body: rb,\n      origin: new Vector3(origin),\n      time: 0.0\n    });\n  }\n\n  enableGravity(state) {\n    this.gravityIsEnabled = state;\n    this.activeParticles.forEach(bullet => {\n      bullet.body.enableGravity(state);\n    });\n  }\n\n  update(timeStep) {\n    let i = 0;\n\n    while (i < this.activeParticles.length) {\n      // Update rigid body motion\n      this.activeParticles[i].body.update(timeStep);\n      this.activeParticles[i].time += timeStep; // Check distance from start position\n\n      if (this.activeParticles[i].time < this.lifeTime * 2.0) {\n        ++i;\n      } else {\n        // Remove particle if distance is greater than given reach\n        this.activeParticles.splice(i, 1);\n      }\n    }\n  }\n\n  render(shader) {\n    this.activeParticles.forEach(bullet => {\n      // Set bullet position\n      this.model.setPosition([bullet.body.position.x, bullet.body.position.y, bullet.body.position.z]); // Draw bullet\n\n      this.model.render(shader);\n    });\n  }\n\n}\n\nexport default ParticleEmitter;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\ParticleEmitter.js"],"names":["Vector3","RigidBody","CollisionManager","ParticleEmitter","constructor","particleModel","particleSpeed","particleLifeTime","activeParticles","model","speed","lifeTime","gravityIsEnabled","gravity","emitParticle","origin","direction","rb","setVelocity","x","y","z","enableGravity","key","registerRigidBody","push","id","body","time","state","forEach","bullet","update","timeStep","i","length","splice","render","shader","setPosition","position"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;AAEA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAAEC,aAAF,EAAiBC,aAAjB,EAAgCC,gBAAhC,EAAkD;AACzD,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,KAAL,GAAaJ,aAAb;AACA,SAAKK,KAAL,GAAaJ,aAAb;AACA,SAAKK,QAAL,GAAgBJ,gBAAhB;AAEA,SAAKK,gBAAL,GAAwB,KAAxB;AACA,SAAKC,OAAL,GAAe,IAAf;AACH;;AAEDC,EAAAA,YAAY,CAACC,MAAD,EAASC,SAAT,EAAoB;AAC5B,QAAIC,EAAE,GAAG,IAAIhB,SAAJ,CAAcc,MAAd,CAAT;AACAE,IAAAA,EAAE,CAACC,WAAH,CAAe,CAACF,SAAS,CAACG,CAAV,GAAc,KAAKT,KAApB,EAA2BM,SAAS,CAACI,CAAV,GAAc,KAAKV,KAA9C,EAAqDM,SAAS,CAACK,CAAV,GAAc,KAAKX,KAAxE,CAAf;AACAO,IAAAA,EAAE,CAACK,aAAH,CAAiB,KAAKV,gBAAtB;AAEA,QAAIW,GAAG,GAAGrB,gBAAgB,CAACsB,iBAAjB,CAAmCP,EAAnC,CAAV;AAEA,SAAKT,eAAL,CAAqBiB,IAArB,CAA0B;AACtBC,MAAAA,EAAE,EAAEH,GADkB;AAEtBI,MAAAA,IAAI,EAAEV,EAFgB;AAGtBF,MAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAYe,MAAZ,CAHc;AAItBa,MAAAA,IAAI,EAAE;AAJgB,KAA1B;AAMH;;AAEDN,EAAAA,aAAa,CAACO,KAAD,EAAQ;AACjB,SAAKjB,gBAAL,GAAwBiB,KAAxB;AAEA,SAAKrB,eAAL,CAAqBsB,OAArB,CAA8BC,MAAD,IAAY;AACrCA,MAAAA,MAAM,CAACJ,IAAP,CAAYL,aAAZ,CAA0BO,KAA1B;AACH,KAFD;AAGH;;AAEDG,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAMA,CAAC,GAAG,KAAK1B,eAAL,CAAqB2B,MAA/B,EAAuC;AACnC;AACA,WAAK3B,eAAL,CAAqB0B,CAArB,EAAwBP,IAAxB,CAA6BK,MAA7B,CAAoCC,QAApC;AACA,WAAKzB,eAAL,CAAqB0B,CAArB,EAAwBN,IAAxB,IAAgCK,QAAhC,CAHmC,CAKnC;;AACA,UAAI,KAAKzB,eAAL,CAAqB0B,CAArB,EAAwBN,IAAxB,GAA+B,KAAKjB,QAAL,GAAc,GAAjD,EAAsD;AAClD,UAAEuB,CAAF;AACH,OAFD,MAGK;AAAC;AACF,aAAK1B,eAAL,CAAqB4B,MAArB,CAA4BF,CAA5B,EAA+B,CAA/B;AACH;AACJ;AACJ;;AAEDG,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,SAAK9B,eAAL,CAAqBsB,OAArB,CAA8BC,MAAD,IAAY;AACrC;AACA,WAAKtB,KAAL,CAAW8B,WAAX,CAAuB,CAACR,MAAM,CAACJ,IAAP,CAAYa,QAAZ,CAAqBrB,CAAtB,EAAyBY,MAAM,CAACJ,IAAP,CAAYa,QAAZ,CAAqBpB,CAA9C,EAAiDW,MAAM,CAACJ,IAAP,CAAYa,QAAZ,CAAqBnB,CAAtE,CAAvB,EAFqC,CAGrC;;AACA,WAAKZ,KAAL,CAAW4B,MAAX,CAAkBC,MAAlB;AACH,KALD;AAMH;;AA1DiB;;AA6DtB,eAAenC,eAAf","sourcesContent":["import Vector3 from \"./math/Vector3\";\r\nimport RigidBody from \"./RigidBody\";\r\nimport CollisionManager from \"./CollisionManager\";\r\n\r\nclass ParticleEmitter {\r\n    constructor (particleModel, particleSpeed, particleLifeTime) {\r\n        this.activeParticles = [];\r\n        this.model = particleModel;\r\n        this.speed = particleSpeed;\r\n        this.lifeTime = particleLifeTime;\r\n\r\n        this.gravityIsEnabled = false;\r\n        this.gravity = 9.82;\r\n    }\r\n\r\n    emitParticle(origin, direction) {\r\n        let rb = new RigidBody(origin);\r\n        rb.setVelocity([direction.x * this.speed, direction.y * this.speed, direction.z * this.speed]);\r\n        rb.enableGravity(this.gravityIsEnabled);\r\n\r\n        let key = CollisionManager.registerRigidBody(rb);\r\n\r\n        this.activeParticles.push({\r\n            id: key,\r\n            body: rb,\r\n            origin: new Vector3(origin),\r\n            time: 0.0\r\n        });\r\n    }\r\n\r\n    enableGravity(state) {\r\n        this.gravityIsEnabled = state;\r\n\r\n        this.activeParticles.forEach((bullet) => {\r\n            bullet.body.enableGravity(state);\r\n        });\r\n    }\r\n\r\n    update(timeStep) {\r\n        let i = 0;\r\n        while(i < this.activeParticles.length) {\r\n            // Update rigid body motion\r\n            this.activeParticles[i].body.update(timeStep);\r\n            this.activeParticles[i].time += timeStep;\r\n\r\n            // Check distance from start position\r\n            if (this.activeParticles[i].time < this.lifeTime*2.0) {\r\n                ++i;\r\n            }\r\n            else {// Remove particle if distance is greater than given reach\r\n                this.activeParticles.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(shader) {\r\n        this.activeParticles.forEach((bullet) => {\r\n            // Set bullet position\r\n            this.model.setPosition([bullet.body.position.x, bullet.body.position.y, bullet.body.position.z]);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        })\r\n    }\r\n}\r\n\r\nexport default ParticleEmitter;"]},"metadata":{},"sourceType":"module"}
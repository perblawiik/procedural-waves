{"ast":null,"code":"// JavaScript\nimport Shader from \"./Shader\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\"; // Settings\n\nconst CAMERA_POSITION = [0.0, 50.0, 300.0];\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER: 2,\n  PLANE: 3\n};\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.aspectRatio = 1.0;\n    this.listOfGameObjects = [];\n  }\n\n  run() {\n    // Keeps track of time passed and delta time\n    Time.Update(); // In case the canvas has resized we need to update the viewport dimensions and the aspect ratio for the projection matrix\n\n    this.updateViewportDimensions(); // Draw the 3D scene\n\n    this.drawScene(); // Clear screen 2D\n    //this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\n    // Calculate fps\n\n    this.displayFrameRate();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000) {\n      // Set text font style\n      this.ctx.font = \"20px Consolas\";\n      this.ctx.fillStyle = 'white'; // Fps = the number of frames\n\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0; // Clear previous\n\n      this.ctx.clearRect(0, 0, this.canvas.width, 25); // Draw fps and frame time in milliseconds\n\n      this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\n    } else {\n      ++this.frameCount;\n    }\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let aspectRatio = this.canvas.width / this.canvas.height; // Update the projection matrix\n\n    this.mainShader.setProjectionMatrix(aspectRatio); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  preload() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    }\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.0, 0.1, 0.2, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas);\n    this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\n    this.camera.SetPosition(CAMERA_POSITION);\n    this.camera.SetRotation(CAMERA_ROTATION); // Create a cyan cube\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Cyan Cube',\n      scale: [10.0, 10.0, 10.0],\n      position: [0.0, 10.0, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); //this.SetUpEventListeners();\n  }\n\n  drawScene() {\n    // Clear screen 3D\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw objects\n    // Clear depth so that local coordinate axes is visible through models\n\n    this.listOfGameObjects.forEach(object => {\n      object.Render();\n    }); // Draw local coordinate axes UI\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.mainShader);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.CreateCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.CreateSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER) {\n      mesh.CreateCylinder(32, 1);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.CreatePlane(50, 50);\n    }\n\n    mesh.SetColor(settings.color);\n    let obj = new GameObject(settings.name, this.mainShader);\n    obj.SetPosition(settings.position);\n    obj.SetScale(settings.scale);\n    obj.AddMesh(mesh);\n    this.listOfGameObjects.push(obj);\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER","PLANE","Engine","constructor","lastTime","frameCount","fps","aspectRatio","listOfGameObjects","run","Update","updateViewportDimensions","drawScene","displayFrameRate","currentTime","time","ctx","font","fillStyle","clearRect","canvas","width","fillText","height","mainShader","setProjectionMatrix","gl","viewport","preload","canvas2D","document","getElementById","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","camera","cameraViewUniformLocation","SetPosition","SetRotation","createGameObject","shape","name","scale","position","color","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","forEach","object","Render","settings","mesh","CreateCube","CreateSphere","CreateCylinder","CreatePlane","SetColor","obj","SetScale","AddMesh","push"],"mappings":"AAAA;AACA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,CAAxB;AACA,MAAMC,eAAe,GAAG,CAAC,CAAC,IAAF,EAAQ,GAAR,EAAa,GAAb,CAAxB;AACA,MAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE,CADI;AAEVC,EAAAA,MAAM,EAAE,CAFE;AAGVC,EAAAA,QAAQ,EAAE,CAHA;AAIVC,EAAAA,KAAK,EAAE;AAJG,CAAd;;AAOA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,GAAL,GAAW,CAAX;AACA,SAAKC,WAAL,GAAmB,GAAnB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACH;;AAEDC,EAAAA,GAAG,GAAG;AACF;AACAlB,IAAAA,IAAI,CAACmB,MAAL,GAFE,CAIF;;AACA,SAAKC,wBAAL,GALE,CAOF;;AACA,SAAKC,SAAL,GARE,CAUF;AACA;AAEA;;AACA,SAAKC,gBAAL;AACH;;AAEDA,EAAAA,gBAAgB,GAAG;AACf,QAAIC,WAAW,GAAGvB,IAAI,CAACwB,IAAvB,CADe,CAEf;;AACA,QAAKD,WAAW,GAAG,KAAKV,QAApB,IAAiC,IAArC,EAA2C;AACvC;AACA,WAAKY,GAAL,CAASC,IAAT,GAAgB,eAAhB;AACA,WAAKD,GAAL,CAASE,SAAT,GAAqB,OAArB,CAHuC,CAIvC;;AACA,WAAKZ,GAAL,GAAW,KAAKD,UAAhB,CALuC,CAMvC;;AACA,WAAKD,QAAL,GAAgBU,WAAhB,CAPuC,CAQvC;;AACA,WAAKT,UAAL,GAAkB,CAAlB,CATuC,CAUvC;;AACA,WAAKW,GAAL,CAASG,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKC,MAAL,CAAYC,KAArC,EAA4C,EAA5C,EAXuC,CAYvC;;AACA,WAAKL,GAAL,CAASM,QAAT,CAAkB,iBAAiB,KAAKhB,GAAtB,GAA4B,MAA9C,EAAsD,CAAtD,EAAyD,EAAzD;AACH,KAdD,MAeK;AACD,QAAE,KAAKD,UAAP;AACH;AACJ;;AAEDM,EAAAA,wBAAwB,GAAG;AACvB;AACA,QAAIJ,WAAW,GAAG,KAAKa,MAAL,CAAYC,KAAZ,GAAoB,KAAKD,MAAL,CAAYG,MAAlD,CAFuB,CAIvB;;AACA,SAAKC,UAAL,CAAgBC,mBAAhB,CAAoClB,WAApC,EALuB,CAOvB;;AACA,SAAKmB,EAAL,CAAQC,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAKP,MAAL,CAAYC,KAAnC,EAA0C,KAAKD,MAAL,CAAYG,MAAtD;AACH;;AAEDK,EAAAA,OAAO,GAAG;AACN;AACA,SAAKC,QAAL,GAAgBC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAhB;AACA,SAAKf,GAAL,GAAW,KAAKa,QAAL,CAAcG,UAAd,CAAyB,IAAzB,CAAX,CAHM,CAKN;;AACA,SAAKZ,MAAL,GAAcU,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAd,CANM,CAON;;AACA,SAAKL,EAAL,GAAU,KAAKN,MAAL,CAAYY,UAAZ,CAAuB,OAAvB,CAAV,CARM,CAUN;;AACA,QAAI,CAAC,KAAKN,EAAV,EAAc;AACVO,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAC,MAAAA,KAAK,CAAC,yEAAD,CAAL;AACA,aAAO,CAAP;AACH;;AAED,SAAKT,EAAL,CAAQC,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAKP,MAAL,CAAYC,KAAnC,EAA0C,KAAKD,MAAL,CAAYG,MAAtD,EAjBM,CAkBN;;AACA,SAAKG,EAAL,CAAQU,UAAR,CAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,EAAkC,GAAlC,EAnBM,CAoBN;;AACA,SAAKV,EAAL,CAAQW,MAAR,CAAe,KAAKX,EAAL,CAAQY,UAAvB,EArBM,CAsBN;;AACA,SAAKZ,EAAL,CAAQW,MAAR,CAAe,KAAKX,EAAL,CAAQa,SAAvB;AACA,SAAKb,EAAL,CAAQc,QAAR,CAAiB,KAAKd,EAAL,CAAQe,IAAzB;AACA,SAAKf,EAAL,CAAQgB,SAAR,CAAkB,KAAKhB,EAAL,CAAQiB,GAA1B;AAEA,SAAKnB,UAAL,GAAkB,IAAIlC,MAAJ,CAAW,KAAK8B,MAAhB,CAAlB;AAEA,SAAKwB,MAAL,GAAc,IAAIpD,MAAJ,CAAW,KAAKkC,EAAhB,EAAoB,KAAKF,UAAL,CAAgBqB,yBAApC,CAAd;AACA,SAAKD,MAAL,CAAYE,WAAZ,CAAwBnD,eAAxB;AACA,SAAKiD,MAAL,CAAYG,WAAZ,CAAwBnD,eAAxB,EA/BM,CAiCN;;AACA,SAAKoD,gBAAL,CAAsB;AAClBC,MAAAA,KAAK,EAAEpD,KAAK,CAACC,IADK;AAElBoD,MAAAA,IAAI,EAAE,WAFY;AAGlBC,MAAAA,KAAK,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAHW;AAIlBC,MAAAA,QAAQ,EAAE,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,CAJQ;AAKlBC,MAAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AALW,KAAtB,EAlCM,CA0CN;AACH;;AAEDzC,EAAAA,SAAS,GAAG;AACR;AACA,SAAKc,EAAL,CAAQ4B,KAAR,CAAc,KAAK5B,EAAL,CAAQ6B,gBAAR,GAA2B,KAAK7B,EAAL,CAAQ8B,gBAAjD,EAFQ,CAIR;AAEA;;AACA,SAAKhD,iBAAL,CAAuBiD,OAAvB,CAAgCC,MAAD,IAAW;AACtCA,MAAAA,MAAM,CAACC,MAAP;AACH,KAFD,EAPQ,CAUR;AACH;;AAEDX,EAAAA,gBAAgB,CAAEY,QAAF,EAAY;AACxB,QAAIC,IAAI,GAAG,IAAIpE,IAAJ,CAAS,KAAK+B,UAAd,CAAX;;AACA,QAAIoC,QAAQ,CAACX,KAAT,KAAmBpD,KAAK,CAACC,IAA7B,EAAmC;AAC/B+D,MAAAA,IAAI,CAACC,UAAL;AACH,KAFD,MAGK,IAAIF,QAAQ,CAACX,KAAT,KAAmBpD,KAAK,CAACE,MAA7B,EAAqC;AACtC8D,MAAAA,IAAI,CAACE,YAAL,CAAkB,EAAlB;AACH,KAFI,MAGA,IAAIH,QAAQ,CAACX,KAAT,KAAmBpD,KAAK,CAACG,QAA7B,EAAuC;AACxC6D,MAAAA,IAAI,CAACG,cAAL,CAAoB,EAApB,EAAuB,CAAvB;AACH,KAFI,MAGA,IAAIJ,QAAQ,CAACX,KAAT,KAAmBpD,KAAK,CAACI,KAA7B,EAAoC;AACrC4D,MAAAA,IAAI,CAACI,WAAL,CAAiB,EAAjB,EAAoB,EAApB;AACH;;AACDJ,IAAAA,IAAI,CAACK,QAAL,CAAcN,QAAQ,CAACP,KAAvB;AAEA,QAAIc,GAAG,GAAG,IAAIzE,UAAJ,CAAgBkE,QAAQ,CAACV,IAAzB,EAA+B,KAAK1B,UAApC,CAAV;AACA2C,IAAAA,GAAG,CAACrB,WAAJ,CAAgBc,QAAQ,CAACR,QAAzB;AACAe,IAAAA,GAAG,CAACC,QAAJ,CAAaR,QAAQ,CAACT,KAAtB;AACAgB,IAAAA,GAAG,CAACE,OAAJ,CAAYR,IAAZ;AAEA,SAAKrD,iBAAL,CAAuB8D,IAAvB,CAA4BH,GAA5B;AACH;;AA7IQ;;AAgJb,eAAejE,MAAf","sourcesContent":["// JavaScript\r\nimport Shader from \"./Shader\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\n\r\n// Settings\r\nconst CAMERA_POSITION = [0.0, 50.0, 300.0];\r\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER: 2,\r\n    PLANE: 3\r\n};\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.aspectRatio = 1.0;\r\n        this.listOfGameObjects = [];\r\n    }\r\n\r\n    run() {\r\n        // Keeps track of time passed and delta time\r\n        Time.Update();\r\n\r\n        // In case the canvas has resized we need to update the viewport dimensions and the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Draw the 3D scene\r\n        this.drawScene();\r\n\r\n        // Clear screen 2D\r\n        //this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\r\n\r\n        // Calculate fps\r\n        this.displayFrameRate();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000) {\r\n            // Set text font style\r\n            this.ctx.font = \"20px Consolas\";\r\n            this.ctx.fillStyle = 'white';\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n            // Clear previous\r\n            this.ctx.clearRect(0, 0, this.canvas.width, 25);\r\n            // Draw fps and frame time in milliseconds\r\n            this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let aspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Update the projection matrix\r\n        this.mainShader.setProjectionMatrix(aspectRatio);\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    preload() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.0, 0.1, 0.2, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\r\n        this.camera.SetPosition(CAMERA_POSITION);\r\n        this.camera.SetRotation(CAMERA_ROTATION);\r\n\r\n        // Create a cyan cube\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Cyan Cube',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [0.0, 10.0, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n\r\n        //this.SetUpEventListeners();\r\n    }\r\n\r\n    drawScene() {\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw objects\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n        this.listOfGameObjects.forEach((object)=> {\r\n            object.Render();\r\n        });\r\n        // Draw local coordinate axes UI\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.mainShader);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.CreateCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.CreateSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER) {\r\n            mesh.CreateCylinder(32,1);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.CreatePlane(50,50);\r\n        }\r\n        mesh.SetColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name, this.mainShader);\r\n        obj.SetPosition(settings.position);\r\n        obj.SetScale(settings.scale);\r\n        obj.AddMesh(mesh);\r\n\r\n        this.listOfGameObjects.push(obj);\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
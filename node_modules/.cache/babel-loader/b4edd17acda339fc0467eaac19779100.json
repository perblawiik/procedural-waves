{"ast":null,"code":"//TODO: Implement a sky box background\n//TODO: Implement cubic shadow mapping\n//TODO: Implement a ParticleSystem component\n// JavaScript components\nimport Time from \"./Time\";\nimport Raycast from \"./Raycast\";\nimport EventHandler from \"./events/EventHandler\";\nimport MouseEvent from \"./events/MouseEvent\";\nimport Scene from \"./Scene\";\nimport Camera from \"./Camera\";\nimport GameObject from \"./GameObject\";\nimport Mesh from \"./Mesh\";\nimport PointLightSource from \"./PointLightSource\";\nimport SphereCollider from \"./SphereCollider\";\nimport Bullets from \"./Bullets\";\nimport Vector3 from \"./math/Vector3\";\nimport Matrix4 from \"./math/Matrix4\"; // Shader\n\nimport ShaderHandle from \"./ShaderHandle\";\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\nimport AmbientShader from \"./shaders/AmbientShader\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\nconst CAMERA_ROTATION = [0.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER_SMOOTH: 2,\n  CYLINDER_SHARP: 3,\n  PLANE: 4\n};\nconst MS_PER_UPDATE = 2.0;\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0;\n    this.viewportAspectRatio = 1.0;\n    this.lag = 0.0; // Scenes works like blocks in the game world.\n    // The active scenes are based on the cameras distance to the origin of each scene.\n\n    this.scenes = [];\n    this.shaders = new Map();\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Update game loop clock\n    Time.update(); // Time start of the loop\n\n    let startTime = Time.now; // Process mouse and keyboard inputs\n\n    this.processUserInput(); // Add elapsed time to the lag variable\n\n    this.lag += Time.deltaTime; // Make sure the update function is called on a constant rate\n\n    while (this.lag >= MS_PER_UPDATE) {\n      this.update(); // Clear momentary events\n\n      EventHandler.resetMouseEvents();\n      this.lag -= MS_PER_UPDATE;\n    } // Render graphics\n\n\n    this.render(this.lag / MS_PER_UPDATE); // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\n\n    while (Time.now - startTime < 16.0); // Sleep\n\n  }\n\n  update() {\n    this.scenes.forEach(scene => {\n      scene.update();\n    }); //// RAYCAST BULLETS UPDATE ////\n\n    this.raycastBullets.update(); //// RAYCAST BULLETS UPDATE ////\n  }\n\n  render(residualLag) {\n    // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n    this.updateViewportDimensions(); // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scenes\n\n    this.scenes.forEach(scene => {\n      scene.updateLightPositions();\n      scene.draw();\n    }); // Draw collider visuals\n\n    this.scenes.forEach(scene => {\n      scene.drawColliders(this.sphereColliderModel);\n    }); //// RAYCAST BULLETS RENDER ////\n\n    this.raycastBullets.render(this.shaders.get(\"phong\")); //// RAYCAST BULLETS RENDER ////\n    // Display fps and other information\n\n    this.drawTextElements();\n  }\n\n  processUserInput() {\n    // Handle camera navigation\n    this.processCameraNavigation(this.camera); // If left mouse button is pressed, cast a ray from the mouse cursor position\n\n    if (MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\n      // Create a ray from the camera\n      let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height); //// Test ray intersections ////\n      // Define a sphere placed in the origin\n\n      let sphere = {\n        center: new Vector3([0.0, 1.0, 0.0]),\n        radius: 2.0\n      };\n      Raycast.sphereIntersectionTest(ray, sphere); // Define a xz plane with y = 0;\n\n      let plane = {\n        normal: new Vector3([0.0, 1.0, 0.0]),\n        offset: 0\n      };\n      Raycast.planeIntersectionTest(ray, plane); //// Test ray intersections ////\n      // Create a raycast bullet for visualization\n      // Offset the bullet start point\n\n      const bulletOrigin = [ray.origin.x + ray.direction.x * 2.0, ray.origin.y + ray.direction.y * 2.0, ray.origin.z + ray.direction.z * 2.0];\n      this.raycastBullets.addBullet(bulletOrigin, ray.direction.clone());\n    }\n  } // This function is called before the game loop is started\n\n\n  preload() {\n    // Initiate time tracker component\n    Time.init(); // Initiate the event handler\n\n    EventHandler.init(); // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\n\n    this.setUpWebGL(); // Create shaders\n\n    let mainShader = new ShaderHandle(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\n    let ambientShader = new ShaderHandle(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\n    this.shaders.set(\"phong\", mainShader);\n    this.shaders.set(\"ambient\", ambientShader); // The projection matrix adds 3D perspective (depth) to the graphics\n\n    this.fieldOfView = Math.PI / 6;\n    this.viewportAspectRatio = this.canvas.width / this.canvas.height;\n    this.projectionMatrix = Matrix4.perspective(this.fieldOfView, this.viewportAspectRatio, 0.1, 10000.0); // Initiate the projection matrix in the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniform(this.projectionMatrix);\n    }); // Initialize the main camera\n\n    this.camera = new Camera(this.shaders);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create a scene for the objects\n\n    let defaultScene = new Scene(this.shaders); // Create scene objects\n\n    this.loadDefaultSceneObjects(defaultScene); // Add to scenes\n\n    this.scenes.push(defaultScene); // Create a bullet for displaying raycast\n\n    let bulletModel = this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Cyan Sphere',\n      scale: [0.5, 0.5, 0.5],\n      position: [0.0, 0.0, 0.0],\n      color: [0.0, 1.0, 1.0]\n    });\n    this.raycastBullets = new Bullets(bulletModel, 50.0, 200.0);\n    this.raycastBullets.setMotionMode(\"parabolic\");\n    this.sphereColliderModel = new Mesh(this.gl);\n    this.sphereColliderModel.createSphere(6);\n    this.sphereColliderModel.setColor([0.75, 0.75, 0.75]);\n    this.sphereColliderModel.setDrawMode(this.gl.LINE_STRIP);\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let currentAspectRatio = this.canvas.width / this.canvas.height; // Check if the aspect ratio has changed before going further\n\n    if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001) return; // Create a new projection matrix\n\n    this.projectionMatrix = Matrix4.perspective(this.fieldOfView, currentAspectRatio, 0.1, 10000.0); // Update the projection matrix for the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniform(this.projectionMatrix);\n    }); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Save current aspect ratio\n\n    this.viewportAspectRatio = currentAspectRatio;\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 10;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.gl);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\n      mesh.createCylinderSmooth(32, 1, 1, 2);\n    } else if (settings.shape === SHAPE.CYLINDER_SHARP) {\n      mesh.createCylinderSharp(8, 1, 2);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    return obj;\n  }\n\n  createPointLightSource(settings) {\n    // Create the light source component\n    let lightSource = new PointLightSource(settings.name);\n    lightSource.setPosition(settings.position);\n    lightSource.setScale(settings.scale);\n    lightSource.setLightColor(settings.color);\n    lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic); // Create a model for the light source\n\n    let lightSourceModel = new Mesh(this.gl);\n    lightSourceModel.createSphere(8);\n    lightSourceModel.setColor(settings.color);\n    lightSource.addMesh(lightSourceModel);\n    return lightSource;\n  }\n\n  loadDefaultSceneObjects(scene) {\n    // Create a red cube\n    let cube = this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [1.0, 1.0, 1.0],\n      position: [0.0, 1.5, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); // Add rotation to the cube\n\n    cube.update = function () {\n      this.rotate([0.0, 0.1, 0.0]);\n    };\n\n    let sphereCollider = new SphereCollider();\n    sphereCollider.setVisible(true);\n    cube.addCollider(sphereCollider);\n    scene.addGameObject(cube); // Create a green sphere\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [1.0, 1.0, 1.0],\n      position: [4.0, 2.0, 2.0],\n      color: [0.0, 1.0, 0.0]\n    })); // Create a smooth magenta cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SMOOTH,\n      name: 'Magenta Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-4.0, 2.0, 2.0],\n      color: [1.0, 0.0, 1.0]\n    })); // Create a sharp orange cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SHARP,\n      name: 'Orange Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-8.0, 2.0, 2.0],\n      color: [1.0, 0.5, 0.0]\n    })); // Create gray floor\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [40.0, 0.1, 40.0],\n      position: [0.0, 0.0, 0.0],\n      color: [0.75, 0.75, 0.75]\n    })); // Create blue walls\n\n    let wallColor = [0.0, 0.2, 1.0];\n    let wallHeight = 10.0;\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Left Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [-40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Right Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Back Wall',\n      scale: [40.0, wallHeight, 0.1],\n      position: [0.0, wallHeight, -40.0],\n      color: wallColor\n    })); // Create gray roof\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [40.0, 0.1, 20.0],\n      position: [0.0, wallHeight * 2.0, -20.0],\n      color: [0.65, 0.65, 0.65]\n    })); // Create a point lights for the scene\n    // Add the light source to our scene\n\n    let lampRadius = 0.5;\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Middle Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Right Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Left Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n  }\n\n  processCameraNavigation() {\n    // Zoom camera view in and out\n    if (MouseEvent.isPressed.middleButton) {\n      this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX) / 20.0]);\n    } // Pan the camera view\n    else if (MouseEvent.isPressed.leftButton) {\n        this.camera.translate([-MouseEvent.movementX / 40.0, MouseEvent.movementY / 40.0, 0.0]);\n      } // Rotate the camera view\n      else if (MouseEvent.isPressed.rightButton) {\n          this.camera.rotate([-MouseEvent.movementY / 10.0, -MouseEvent.movementX / 10.0, 0.0]);\n        }\n\n    if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\n      if (MouseEvent.wheelDelta > 0.0) {\n        this.camera.translate([0.0, 0.0, 0.5]);\n      } else this.camera.translate([0.0, 0.0, -0.5]);\n    }\n  }\n\n  setUpWebGL() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    } // Set the viewport dimensions to the same as the canvas\n\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Time","Raycast","EventHandler","MouseEvent","Scene","Camera","GameObject","Mesh","PointLightSource","SphereCollider","Bullets","Vector3","Matrix4","ShaderHandle","PhongLightingShader","AmbientShader","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER_SMOOTH","CYLINDER_SHARP","PLANE","MS_PER_UPDATE","Engine","constructor","lastTime","frameCount","fps","currentTextOffset","viewportAspectRatio","lag","scenes","shaders","Map","run","update","startTime","now","processUserInput","deltaTime","resetMouseEvents","render","forEach","scene","raycastBullets","residualLag","updateViewportDimensions","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","updateLightPositions","draw","drawColliders","sphereColliderModel","get","drawTextElements","processCameraNavigation","camera","mouseDown","isPressed","leftButton","ray","raycastFromMouseCursor","offsetX","offsetY","transform","projectionMatrix","canvas","width","height","sphere","center","radius","sphereIntersectionTest","plane","normal","offset","planeIntersectionTest","bulletOrigin","origin","x","direction","y","z","addBullet","clone","preload","init","setUpWebGL","mainShader","vertex","fragment","ambientShader","set","fieldOfView","Math","PI","perspective","shader","activate","setProjectionUniform","setPosition","setRotation","defaultScene","loadDefaultSceneObjects","push","bulletModel","createGameObject","shape","name","scale","position","color","setMotionMode","createSphere","setColor","setDrawMode","LINE_STRIP","currentAspectRatio","abs","viewport","ctx","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","toFixed","fillText","length","pos","cameraPositionText","settings","mesh","createCube","createCylinderSmooth","createCylinderSharp","createPlane","obj","setScale","addMesh","createPointLightSource","lightSource","setLightColor","setAttenuation","attenuation","kLinear","kQuadratic","lightSourceModel","cube","rotate","sphereCollider","setVisible","addCollider","addGameObject","wallColor","wallHeight","lampRadius","addLightSource","middleButton","translate","movementY","movementX","rightButton","wheelDelta","canvas2D","document","getElementById","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW"],"mappings":"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","sourcesContent":["//TODO: Implement a sky box background\r\n//TODO: Implement cubic shadow mapping\r\n//TODO: Implement a ParticleSystem component\r\n\r\n// JavaScript components\r\nimport Time from \"./Time\";\r\nimport Raycast from \"./Raycast\";\r\n\r\nimport EventHandler from \"./events/EventHandler\";\r\nimport MouseEvent from \"./events/MouseEvent\";\r\n\r\nimport Scene from \"./Scene\";\r\n\r\nimport Camera from \"./Camera\";\r\nimport GameObject from \"./GameObject\";\r\nimport Mesh from \"./Mesh\";\r\nimport PointLightSource from \"./PointLightSource\";\r\nimport SphereCollider from \"./SphereCollider\";\r\nimport Bullets from \"./Bullets\";\r\n\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Matrix4 from \"./math/Matrix4\";\r\n\r\n// Shader\r\nimport ShaderHandle from \"./ShaderHandle\";\r\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\r\nimport AmbientShader from \"./shaders/AmbientShader\";\r\n\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\r\nconst CAMERA_ROTATION = [0.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER_SMOOTH: 2,\r\n    CYLINDER_SHARP: 3,\r\n    PLANE: 4\r\n};\r\n\r\nconst MS_PER_UPDATE = 2.0;\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n        this.viewportAspectRatio = 1.0;\r\n\r\n        this.lag = 0.0;\r\n\r\n        // Scenes works like blocks in the game world.\r\n        // The active scenes are based on the cameras distance to the origin of each scene.\r\n        this.scenes = [];\r\n        this.shaders = new Map();\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Update game loop clock\r\n        Time.update();\r\n\r\n        // Time start of the loop\r\n        let startTime =  Time.now;\r\n\r\n        // Process mouse and keyboard inputs\r\n        this.processUserInput();\r\n\r\n        // Add elapsed time to the lag variable\r\n        this.lag += Time.deltaTime;\r\n\r\n        // Make sure the update function is called on a constant rate\r\n        while (this.lag >= MS_PER_UPDATE) {\r\n            this.update();\r\n            // Clear momentary events\r\n            EventHandler.resetMouseEvents();\r\n            this.lag -= MS_PER_UPDATE;\r\n        }\r\n\r\n        // Render graphics\r\n        this.render(this.lag/MS_PER_UPDATE);\r\n\r\n        // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\r\n        while ((Time.now - startTime) < 16.0) ; // Sleep\r\n    }\r\n\r\n    update() {\r\n        this.scenes.forEach((scene) => {\r\n            scene.update();\r\n        });\r\n\r\n        //// RAYCAST BULLETS UPDATE ////\r\n        this.raycastBullets.update();\r\n        //// RAYCAST BULLETS UPDATE ////\r\n    }\r\n\r\n    render(residualLag) {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scenes\r\n        this.scenes.forEach((scene) => {\r\n            scene.updateLightPositions();\r\n            scene.draw();\r\n        });\r\n\r\n        // Draw collider visuals\r\n        this.scenes.forEach((scene) => {\r\n            scene.drawColliders(this.sphereColliderModel);\r\n        });\r\n\r\n        //// RAYCAST BULLETS RENDER ////\r\n        this.raycastBullets.render(this.shaders.get(\"phong\"));\r\n        //// RAYCAST BULLETS RENDER ////\r\n\r\n        // Display fps and other information\r\n        this.drawTextElements();\r\n    }\r\n\r\n    processUserInput() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation(this.camera);\r\n\r\n        // If left mouse button is pressed, cast a ray from the mouse cursor position\r\n        if(MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\r\n            // Create a ray from the camera\r\n            let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height);\r\n\r\n            //// Test ray intersections ////\r\n            // Define a sphere placed in the origin\r\n            let sphere = {\r\n                center: new Vector3([0.0, 1.0, 0.0]),\r\n                radius: 2.0\r\n            };\r\n            Raycast.sphereIntersectionTest(ray, sphere);\r\n\r\n            // Define a xz plane with y = 0;\r\n            let plane = {\r\n                normal: new Vector3([0.0, 1.0, 0.0]),\r\n                offset: 0\r\n            };\r\n            Raycast.planeIntersectionTest(ray, plane);\r\n            //// Test ray intersections ////\r\n\r\n            // Create a raycast bullet for visualization\r\n            // Offset the bullet start point\r\n            const bulletOrigin = [ray.origin.x + ray.direction.x*2.0, ray.origin.y + ray.direction.y*2.0, ray.origin.z + ray.direction.z*2.0];\r\n            this.raycastBullets.addBullet(bulletOrigin, ray.direction.clone());\r\n        }\r\n    }\r\n\r\n    // This function is called before the game loop is started\r\n    preload() {\r\n        // Initiate time tracker component\r\n        Time.init();\r\n\r\n        // Initiate the event handler\r\n        EventHandler.init();\r\n\r\n        // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\r\n        this.setUpWebGL();\r\n\r\n        // Create shaders\r\n        let mainShader = new ShaderHandle(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\r\n        let ambientShader = new ShaderHandle(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\r\n\r\n        this.shaders.set(\"phong\", mainShader);\r\n        this.shaders.set(\"ambient\", ambientShader);\r\n\r\n        // The projection matrix adds 3D perspective (depth) to the graphics\r\n        this.fieldOfView = Math.PI / 6;\r\n        this.viewportAspectRatio = this.canvas.width / this.canvas.height;\r\n        this.projectionMatrix = Matrix4.perspective(this.fieldOfView, this.viewportAspectRatio, 0.1, 10000.0);\r\n\r\n        // Initiate the projection matrix in the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniform(this.projectionMatrix);\r\n        });\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.shaders);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create a scene for the objects\r\n        let defaultScene = new Scene(this.shaders);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects(defaultScene);\r\n        // Add to scenes\r\n        this.scenes.push(defaultScene);\r\n\r\n        // Create a bullet for displaying raycast\r\n        let bulletModel = this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Cyan Sphere',\r\n            scale: [0.5, 0.5, 0.5],\r\n            position: [0.0, 0.0, 0.0],\r\n            color: [0.0, 1.0, 1.0]\r\n        });\r\n\r\n        this.raycastBullets = new Bullets(bulletModel, 50.0, 200.0);\r\n        this.raycastBullets.setMotionMode(\"parabolic\");\r\n\r\n        this.sphereColliderModel = new Mesh(this.gl);\r\n        this.sphereColliderModel.createSphere(6);\r\n        this.sphereColliderModel.setColor([0.75, 0.75, 0.75]);\r\n        this.sphereColliderModel.setDrawMode(this.gl.LINE_STRIP);\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let currentAspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Check if the aspect ratio has changed before going further\r\n        if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001)\r\n            return;\r\n\r\n        // Create a new projection matrix\r\n        this.projectionMatrix = Matrix4.perspective(this.fieldOfView, currentAspectRatio, 0.1, 10000.0);\r\n\r\n        // Update the projection matrix for the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniform(this.projectionMatrix);\r\n        });\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Save current aspect ratio\r\n        this.viewportAspectRatio = currentAspectRatio;\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 10;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.gl);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\r\n            mesh.createCylinderSmooth(32, 1, 1, 2);\r\n        }\r\n        else if(settings.shape === SHAPE.CYLINDER_SHARP) {\r\n            mesh.createCylinderSharp(8, 1, 2);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        return obj;\r\n    }\r\n\r\n    createPointLightSource(settings) {\r\n        // Create the light source component\r\n        let lightSource = new PointLightSource(settings.name);\r\n        lightSource.setPosition(settings.position);\r\n        lightSource.setScale(settings.scale);\r\n        lightSource.setLightColor(settings.color);\r\n        lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic);\r\n\r\n        // Create a model for the light source\r\n        let lightSourceModel = new Mesh(this.gl);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor(settings.color);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        return lightSource;\r\n    }\r\n\r\n    loadDefaultSceneObjects(scene) {\r\n        // Create a red cube\r\n        let cube = this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [1.0, 1.0, 1.0],\r\n            position: [0.0, 1.5, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n        // Add rotation to the cube\r\n        cube.update = function() {\r\n            this.rotate([0.0, 0.1, 0.0]);\r\n        };\r\n\r\n        let sphereCollider = new SphereCollider();\r\n        sphereCollider.setVisible(true);\r\n        cube.addCollider(sphereCollider);\r\n\r\n        scene.addGameObject(cube);\r\n\r\n        // Create a green sphere\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.SPHERE,\r\n                name: 'Green Sphere',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [4.0, 2.0, 2.0],\r\n                color: [0.0, 1.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a smooth magenta cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SMOOTH,\r\n                name: 'Magenta Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-4.0, 2.0, 2.0],\r\n                color: [1.0, 0.0, 1.0]\r\n            })\r\n        );\r\n\r\n        // Create a sharp orange cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SHARP,\r\n                name: 'Orange Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-8.0, 2.0, 2.0],\r\n                color: [1.0, 0.5, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create gray floor\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Roof',\r\n                scale: [40.0, 0.1, 40.0],\r\n                position: [0.0, 0.0, 0.0],\r\n                color: [0.75, 0.75, 0.75]\r\n            })\r\n        );\r\n\r\n        // Create blue walls\r\n        let wallColor = [0.0, 0.2, 1.0];\r\n        let wallHeight = 10.0;\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Left Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [-40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Right Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Back Wall',\r\n                scale: [40.0, wallHeight, 0.1],\r\n                position: [0.0, wallHeight, -40.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n\r\n        // Create gray roof\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Floor',\r\n                scale: [40.0, 0.1, 20.0],\r\n                position: [0.0, wallHeight * 2.0, -20.0],\r\n                color: [0.65, 0.65, 0.65]\r\n            })\r\n        );\r\n\r\n        // Create a point lights for the scene\r\n        // Add the light source to our scene\r\n        let lampRadius = 0.5;\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 0.5]);\r\n            }\r\n            else\r\n                this.camera.translate([0.0, 0.0, -0.5]);\r\n        }\r\n    }\r\n\r\n    setUpWebGL() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
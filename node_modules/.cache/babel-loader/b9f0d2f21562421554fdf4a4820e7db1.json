{"ast":null,"code":"class VertexShader {\n  static get file() {\n    return [\"precision mediump float;\", \"\", // Attribute locations\n    \"attribute vec3 vertPosition;\", \"attribute vec3 vertNormal;\", \"attribute vec2 vertTexCoord;\", \"\", // Time variable\n    \"uniform float time;\", \"\", // Transformation matrices\n    \"uniform mat4 cameraView;\", \"uniform mat4 modelView;\", \"uniform mat4 perspective;\", \"\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"\", \"void main() {\", // Final transformation ( Perspective multiplied with the model view )\n    \"   mat4 T = perspective * cameraView * modelView;\", // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\n    \"   gl_Position = T * vec4(vertPosition, 1.0);\", \"\", // Fragment shader input variables\n    \"   Normal = normalize(mat3(modelView)*vertNormal);\", \"   TexCoords = vertTexCoord;\", \"   FragPosition = vec3(modelView * vec4(vertPosition, 1.0));\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default VertexShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\VertexShader.js"],"names":["VertexShader","file","join"],"mappings":"AAAA,MAAMA,YAAN,CAAmB;AACf,aAAWC,IAAX,GAAmB;AACf,WAAO,CACH,0BADG,EAEH,EAFG,EAGH;AACA,kCAJG,EAKH,4BALG,EAMH,8BANG,EAOH,EAPG,EAQH;AACA,yBATG,EAUH,EAVG,EAWH;AACA,8BAZG,EAaH,yBAbG,EAcH,2BAdG,EAeH,EAfG,EAgBH;AACA,6BAjBG,EAkBH,sBAlBG,EAmBH,4BAnBG,EAoBH,EApBG,EAqBH,eArBG,EAsBH;AACA,uDAvBG,EAwBH;AACA,mDAzBG,EA0BH,EA1BG,EA2BH;AACA,wDA5BG,EA6BH,8BA7BG,EA8BH,8DA9BG,EA+BH,GA/BG,EAgCLC,IAhCK,CAgCA,IAhCA,CAAP;AAiCH;;AAnCc;;AAsCnB,eAAeF,YAAf","sourcesContent":["class VertexShader {\r\n    static get file () {\r\n        return [\r\n            \"precision mediump float;\",\r\n            \"\",\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n            \"\",\r\n            // Time variable\r\n            \"uniform float time;\",\r\n            \"\",\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n            \"\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"\",\r\n            \"void main() {\",\r\n            // Final transformation ( Perspective multiplied with the model view )\r\n            \"   mat4 T = perspective * cameraView * modelView;\",\r\n            // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\r\n            \"   gl_Position = T * vec4(vertPosition, 1.0);\",\r\n            \"\",\r\n            // Fragment shader input variables\r\n            \"   Normal = normalize(mat3(modelView)*vertNormal);\",\r\n            \"   TexCoords = vertTexCoord;\",\r\n            \"   FragPosition = vec3(modelView * vec4(vertPosition, 1.0));\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default VertexShader;"]},"metadata":{},"sourceType":"module"}
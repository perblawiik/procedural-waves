{"ast":null,"code":"import Vector3 from \"./math/Vector3\";\nimport Matrix4 from \"./math/Matrix4\";\n\nclass Raycast {\n  static raycastFromMouseCursor(mouseX, mouseY, cameraTransform, canvasWidth, canvasHeight, fov) {\n    // Transform from mouse cursor's viewport coordinates from [0 : width/height] to the range [-1.0 : 1.0]\n    let xNorm = mouseX / (canvasWidth * 0.5) - 1.0;\n    let yNorm = 1.0 - mouseY / (canvasHeight * 0.5); // Reverse the Y-axis\n    // Combine a transform matrix for perspective and camera view\n\n    let projectionMatrix = Matrix4.perspective(fov, canvasWidth / canvasHeight, 0.1, 10000.0);\n    let transform = Matrix4.multiply(projectionMatrix, cameraTransform.matrix); // Invert the transform matrix since we are going from normalized device coordinates to world coordinates\n\n    Matrix4.invert(transform, transform); // Transform screen coordinates to world coordinates\n\n    let ndc = [xNorm, yNorm, 1.0, 1.0];\n    let worldCoordinates = Matrix4.multiplyVector(transform, ndc); // Normalize the world coordinates to finish the ray direction vector\n\n    const rayDirection = new Vector3([worldCoordinates[0], worldCoordinates[1], worldCoordinates[2]]).normalized();\n    const rayOrigin = cameraTransform.position.clone();\n    return {\n      direction: rayDirection,\n      origin: rayOrigin\n    };\n  }\n\n  static sphereIntersectionTest(ray, sphere) {\n    let rayToSphere = Vector3.subtract(sphere.center, ray.origin);\n    let tca = Vector3.dot(rayToSphere, ray.direction);\n\n    if (tca < 0.0) {\n      console.log(\"Sphere intersection missed\");\n      return -1;\n    }\n\n    let shortestFromRayToCenter = Math.sqrt(Vector3.dot(rayToSphere, rayToSphere) - tca * tca); // If this distance is greater than the sphere radius the ray has missed the sphere\n\n    if (shortestFromRayToCenter > sphere.radius) {\n      console.log(\"Sphere intersection missed\");\n      return -1;\n    }\n\n    let thc = Math.sqrt(sphere.radius * sphere.radius - shortestFromRayToCenter * shortestFromRayToCenter);\n    let intersectionDistancePoint1 = tca - thc;\n    let intersectionDistancePoint2 = tca + thc;\n    console.log(\"Sphere intersection hit\"); // Return the closest intersection of the two possible intersections\n\n    return intersectionDistancePoint1 < intersectionDistancePoint2 ? intersectionDistancePoint1 : intersectionDistancePoint2;\n  }\n\n  static planeIntersectionTest(ray, plane) {\n    // Compute distance from ray origin and intersection point\n    let intersectionPointDist = -(Vector3.dot(ray.origin, plane.normal) + plane.offset) / Vector3.dot(ray.direction, plane.normal);\n\n    if (intersectionPointDist < 0) {\n      console.log(\"Plane intersection missed\");\n      return false;\n    }\n\n    console.log(\"Intersection point distance: \" + intersectionPointDist);\n    let intersectionPoint = new Vector3([ray.origin.x + ray.direction.x * intersectionPointDist, ray.origin.y + ray.direction.y * intersectionPointDist, ray.origin.z + ray.direction.z * intersectionPointDist]);\n    console.log(\"Intersection point: \" + intersectionPoint.x.toFixed(2) + \", \" + intersectionPoint.y.toFixed(2) + \", \" + intersectionPoint.z.toFixed(2));\n    return true;\n  }\n\n}\n\nexport default Raycast;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Raycast.js"],"names":["Vector3","Matrix4","Raycast","raycastFromMouseCursor","mouseX","mouseY","cameraTransform","canvasWidth","canvasHeight","fov","xNorm","yNorm","projectionMatrix","perspective","transform","multiply","matrix","invert","ndc","worldCoordinates","multiplyVector","rayDirection","normalized","rayOrigin","position","clone","direction","origin","sphereIntersectionTest","ray","sphere","rayToSphere","subtract","center","tca","dot","console","log","shortestFromRayToCenter","Math","sqrt","radius","thc","intersectionDistancePoint1","intersectionDistancePoint2","planeIntersectionTest","plane","intersectionPointDist","normal","offset","intersectionPoint","x","y","z","toFixed"],"mappings":"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","sourcesContent":["import Vector3 from \"./math/Vector3\";\r\nimport Matrix4 from \"./math/Matrix4\";\r\n\r\nclass Raycast {\r\n    static raycastFromMouseCursor(mouseX, mouseY, cameraTransform, canvasWidth, canvasHeight, fov) {\r\n        // Transform from mouse cursor's viewport coordinates from [0 : width/height] to the range [-1.0 : 1.0]\r\n        let xNorm = (mouseX / (canvasWidth  * 0.5)) - 1.0;\r\n        let yNorm = 1.0 - (mouseY / (canvasHeight * 0.5)); // Reverse the Y-axis\r\n\r\n        // Combine a transform matrix for perspective and camera view\r\n        let projectionMatrix = Matrix4.perspective(fov, canvasWidth / canvasHeight, 0.1, 10000.0);\r\n        let transform = Matrix4.multiply(projectionMatrix, cameraTransform.matrix);\r\n\r\n        // Invert the transform matrix since we are going from normalized device coordinates to world coordinates\r\n        Matrix4.invert(transform, transform);\r\n\r\n        // Transform screen coordinates to world coordinates\r\n        let ndc = [xNorm, yNorm, 1.0, 1.0];\r\n        let worldCoordinates = Matrix4.multiplyVector(transform, ndc);\r\n\r\n        // Normalize the world coordinates to finish the ray direction vector\r\n        const rayDirection = (new Vector3([worldCoordinates[0], worldCoordinates[1], worldCoordinates[2]])).normalized();\r\n        const rayOrigin = cameraTransform.position.clone();\r\n\r\n        return {\r\n            direction: rayDirection,\r\n            origin: rayOrigin\r\n        };\r\n    }\r\n\r\n    static sphereIntersectionTest(ray, sphere) {\r\n        let rayToSphere = Vector3.subtract(sphere.center, ray.origin);\r\n        let tca = Vector3.dot(rayToSphere, ray.direction);\r\n        if (tca < 0.0) {\r\n            console.log(\"Sphere intersection missed\");\r\n            return -1;\r\n        }\r\n\r\n        let shortestFromRayToCenter = Math.sqrt(Vector3.dot(rayToSphere, rayToSphere) - tca*tca);\r\n        // If this distance is greater than the sphere radius the ray has missed the sphere\r\n        if (shortestFromRayToCenter > sphere.radius) {\r\n            console.log(\"Sphere intersection missed\");\r\n            return -1;\r\n        }\r\n\r\n        let thc = Math.sqrt(sphere.radius*sphere.radius - shortestFromRayToCenter*shortestFromRayToCenter);\r\n        let intersectionDistancePoint1 = tca - thc;\r\n        let intersectionDistancePoint2 = tca + thc;\r\n\r\n        console.log(\"Sphere intersection hit\");\r\n        // Return the closest intersection of the two possible intersections\r\n        return (intersectionDistancePoint1 < intersectionDistancePoint2) ? intersectionDistancePoint1 : intersectionDistancePoint2;\r\n    }\r\n\r\n    static planeIntersectionTest(ray, plane) {\r\n        // Compute distance from ray origin and intersection point\r\n        let intersectionPointDist = -(Vector3.dot(ray.origin, plane.normal) + plane.offset) / Vector3.dot(ray.direction, plane.normal);\r\n\r\n        if (intersectionPointDist < 0) {\r\n            console.log(\"Plane intersection missed\");\r\n            return false;\r\n        }\r\n\r\n        console.log(\"Intersection point distance: \" + intersectionPointDist);\r\n\r\n        let intersectionPoint = new Vector3([\r\n            ray.origin.x + ray.direction.x*intersectionPointDist,\r\n            ray.origin.y + ray.direction.y*intersectionPointDist,\r\n            ray.origin.z + ray.direction.z*intersectionPointDist,\r\n        ]);\r\n\r\n        console.log(\"Intersection point: \" + intersectionPoint.x.toFixed(2) + \", \" + intersectionPoint.y.toFixed(2) + \", \" + intersectionPoint.z.toFixed(2));\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default Raycast;"]},"metadata":{},"sourceType":"module"}
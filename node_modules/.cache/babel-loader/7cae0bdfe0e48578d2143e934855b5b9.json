{"ast":null,"code":"import Transform from \"./Transform\";\nimport Mesh from \"./Mesh\";\nimport Vector3 from \"./math/Vector3\";\n\nclass SphereCollider {\n  constructor(gl, shader) {\n    this.transform = new Transform();\n    this.transform.setScale([1.5, 1.5, 1.5]);\n    this.model = new Mesh(gl);\n    this.model.createSphere(6);\n    this.model.setColor([0.75, 0.75, 0.75]);\n    this.model.setDrawMode(gl.TRIANGLE_STRIP);\n    this.transform.addChild(this.model.transform);\n    this.isVisible = false;\n    this.shader = shader;\n  }\n\n  get worldPosition() {\n    return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\n  }\n\n  get radius() {\n    return this.transform.scaling.x;\n  }\n\n  setVisible(state) {\n    this.isVisible = state;\n  }\n\n  render() {\n    if (this.isVisible) {\n      this.model.render(this.shader);\n    }\n  }\n\n}\n\nexport default SphereCollider;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\SphereCollider.js"],"names":["Transform","Mesh","Vector3","SphereCollider","constructor","gl","shader","transform","setScale","model","createSphere","setColor","setDrawMode","TRIANGLE_STRIP","addChild","isVisible","worldPosition","matrix","radius","scaling","x","setVisible","state","render"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,EAAD,EAAKC,MAAL,EAAa;AACpB,SAAKC,SAAL,GAAiB,IAAIP,SAAJ,EAAjB;AACA,SAAKO,SAAL,CAAeC,QAAf,CAAwB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAxB;AAEA,SAAKC,KAAL,GAAa,IAAIR,IAAJ,CAASI,EAAT,CAAb;AACA,SAAKI,KAAL,CAAWC,YAAX,CAAwB,CAAxB;AACA,SAAKD,KAAL,CAAWE,QAAX,CAAoB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAApB;AACA,SAAKF,KAAL,CAAWG,WAAX,CAAuBP,EAAE,CAACQ,cAA1B;AAEA,SAAKN,SAAL,CAAeO,QAAf,CAAwB,KAAKL,KAAL,CAAWF,SAAnC;AAEA,SAAKQ,SAAL,GAAiB,KAAjB;AACA,SAAKT,MAAL,GAAcA,MAAd;AACH;;AAED,MAAIU,aAAJ,GAAoB;AAChB,WAAO,IAAId,OAAJ,CAAY,CAAC,KAAKK,SAAL,CAAeU,MAAf,CAAsB,EAAtB,CAAD,EAA4B,KAAKV,SAAL,CAAeU,MAAf,CAAsB,EAAtB,CAA5B,EAAuD,KAAKV,SAAL,CAAeU,MAAf,CAAsB,EAAtB,CAAvD,CAAZ,CAAP;AACH;;AAED,MAAIC,MAAJ,GAAc;AACV,WAAO,KAAKX,SAAL,CAAeY,OAAf,CAAuBC,CAA9B;AACH;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,SAAKP,SAAL,GAAiBO,KAAjB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAG,KAAKR,SAAR,EAAmB;AACf,WAAKN,KAAL,CAAWc,MAAX,CAAkB,KAAKjB,MAAvB;AACH;AACJ;;AAhCgB;;AAmCrB,eAAeH,cAAf","sourcesContent":["import Transform from \"./Transform\";\r\nimport Mesh from \"./Mesh\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass SphereCollider {\r\n    constructor(gl, shader) {\r\n        this.transform = new Transform();\r\n        this.transform.setScale([1.5, 1.5, 1.5]);\r\n\r\n        this.model = new Mesh(gl);\r\n        this.model.createSphere(6);\r\n        this.model.setColor([0.75, 0.75, 0.75]);\r\n        this.model.setDrawMode(gl.TRIANGLE_STRIP);\r\n\r\n        this.transform.addChild(this.model.transform);\r\n\r\n        this.isVisible = false;\r\n        this.shader = shader;\r\n    }\r\n\r\n    get worldPosition() {\r\n        return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\r\n    }\r\n\r\n    get radius () {\r\n        return this.transform.scaling.x;\r\n    }\r\n\r\n    setVisible(state) {\r\n        this.isVisible = state;\r\n    }\r\n\r\n    render() {\r\n        if(this.isVisible) {\r\n            this.model.render(this.shader);\r\n        }\r\n    }\r\n}\r\n\r\nexport default SphereCollider;"]},"metadata":{},"sourceType":"module"}
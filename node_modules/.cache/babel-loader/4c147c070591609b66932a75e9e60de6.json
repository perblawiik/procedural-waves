{"ast":null,"code":"// JavaScript\nimport Transform from './Transform';\nimport Vector3 from './math/Vector3';\n\nclass Camera {\n  constructor(shaders) {\n    this.shaders = shaders;\n    this.shaders[0].activate();\n    this.transform = new Transform();\n    this.updateUniforms();\n  }\n\n  translate(val) {\n    let rightVec = new Vector3([this.transform.matrix[0] * val[0], this.transform.matrix[4] * val[0], this.transform.matrix[8] * val[0]]);\n    let upVec = new Vector3([this.transform.matrix[1] * val[1], this.transform.matrix[5] * val[1], this.transform.matrix[9] * val[1]]);\n    let forwardVec = new Vector3([this.transform.matrix[2] * val[2], this.transform.matrix[6] * val[2], this.transform.matrix[10] * val[2]]);\n    this.setPosition([this.transform.position.x + rightVec.x + upVec.x + forwardVec.x, this.transform.position.y + rightVec.y + upVec.y + forwardVec.y, this.transform.position.z + rightVec.z + upVec.z + forwardVec.z]);\n  }\n\n  rotate(rot) {\n    this.setRotation([this.transform.rotation.x + rot[0], this.transform.rotation.y + rot[1], this.transform.rotation.z + rot[2]]);\n  }\n\n  setPosition(cameraPosition) {\n    this.transform.setPosition(cameraPosition); //this.updateCameraViewUniform();\n    //this.updateCameraPositionUniform();\n\n    this.updateUniforms();\n  }\n\n  setRotation(cameraRotation) {\n    this.transform.setRotation(cameraRotation); //this.updateCameraViewUniform();\n\n    this.updateUniforms();\n  }\n\n  rotateX(angle) {\n    this.setRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\n  }\n\n  rotateY(angle) {\n    this.setRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\n  }\n\n  updateUniforms() {\n    this.shaders[0].activate();\n    this.shaders[0].setCameraViewUniform(this.transform.inverted());\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Camera.js"],"names":["Transform","Vector3","Camera","constructor","shaders","activate","transform","updateUniforms","translate","val","rightVec","matrix","upVec","forwardVec","setPosition","position","x","y","z","rotate","rot","setRotation","rotation","cameraPosition","cameraRotation","rotateX","angle","rotateY","setCameraViewUniform","inverted"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKA,OAAL,CAAa,CAAb,EAAgBC,QAAhB;AAEA,SAAKC,SAAL,GAAiB,IAAIN,SAAJ,EAAjB;AACA,SAAKO,cAAL;AACH;;AAEDC,EAAAA,SAAS,CAAEC,GAAF,EAAO;AACZ,QAAIC,QAAQ,GAAG,IAAIT,OAAJ,CAAY,CAAC,KAAKK,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA7B,EAAkC,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA9D,EAAmE,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA/F,CAAZ,CAAf;AACA,QAAIG,KAAK,GAAG,IAAIX,OAAJ,CAAY,CAAC,KAAKK,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA7B,EAAkC,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA9D,EAAmE,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA/F,CAAZ,CAAZ;AACA,QAAII,UAAU,GAAG,IAAIZ,OAAJ,CAAY,CAAC,KAAKK,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA7B,EAAkC,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA9D,EAAmE,KAAKH,SAAL,CAAeK,MAAf,CAAsB,EAAtB,IAA0BF,GAAG,CAAC,CAAD,CAAhG,CAAZ,CAAjB;AAEA,SAAKK,WAAL,CAAiB,CACb,KAAKR,SAAL,CAAeS,QAAf,CAAwBC,CAAxB,GAA4BN,QAAQ,CAACM,CAArC,GAAyCJ,KAAK,CAACI,CAA/C,GAAmDH,UAAU,CAACG,CADjD,EAEb,KAAKV,SAAL,CAAeS,QAAf,CAAwBE,CAAxB,GAA4BP,QAAQ,CAACO,CAArC,GAAyCL,KAAK,CAACK,CAA/C,GAAmDJ,UAAU,CAACI,CAFjD,EAGb,KAAKX,SAAL,CAAeS,QAAf,CAAwBG,CAAxB,GAA4BR,QAAQ,CAACQ,CAArC,GAAyCN,KAAK,CAACM,CAA/C,GAAmDL,UAAU,CAACK,CAHjD,CAAjB;AAKH;;AAEDC,EAAAA,MAAM,CAAEC,GAAF,EAAO;AACT,SAAKC,WAAL,CAAiB,CACb,KAAKf,SAAL,CAAegB,QAAf,CAAwBN,CAAxB,GAA4BI,GAAG,CAAC,CAAD,CADlB,EAEb,KAAKd,SAAL,CAAegB,QAAf,CAAwBL,CAAxB,GAA4BG,GAAG,CAAC,CAAD,CAFlB,EAGb,KAAKd,SAAL,CAAegB,QAAf,CAAwBJ,CAAxB,GAA4BE,GAAG,CAAC,CAAD,CAHlB,CAAjB;AAKH;;AAEDN,EAAAA,WAAW,CAACS,cAAD,EAAiB;AACxB,SAAKjB,SAAL,CAAeQ,WAAf,CAA2BS,cAA3B,EADwB,CAExB;AACA;;AACA,SAAKhB,cAAL;AACH;;AAEDc,EAAAA,WAAW,CAACG,cAAD,EAAiB;AACxB,SAAKlB,SAAL,CAAee,WAAf,CAA2BG,cAA3B,EADwB,CAExB;;AACA,SAAKjB,cAAL;AACH;;AAEDkB,EAAAA,OAAO,CAAEC,KAAF,EAAS;AACZ,SAAKL,WAAL,CAAiB,CAACK,KAAD,EAAQ,KAAKpB,SAAL,CAAegB,QAAf,CAAwBL,CAAhC,EAAmC,KAAKX,SAAL,CAAegB,QAAf,CAAwBJ,CAA3D,CAAjB;AACH;;AAEDS,EAAAA,OAAO,CAAED,KAAF,EAAS;AACZ,SAAKL,WAAL,CAAiB,CAAC,KAAKf,SAAL,CAAegB,QAAf,CAAwBN,CAAzB,EAA4BU,KAA5B,EAAmC,KAAKpB,SAAL,CAAegB,QAAf,CAAwBJ,CAA3D,CAAjB;AACH;;AAEDX,EAAAA,cAAc,GAAG;AACb,SAAKH,OAAL,CAAa,CAAb,EAAgBC,QAAhB;AACA,SAAKD,OAAL,CAAa,CAAb,EAAgBwB,oBAAhB,CAAqC,KAAKtB,SAAL,CAAeuB,QAAf,EAArC;AACH;;AArDQ;;AAwDb,eAAe3B,MAAf","sourcesContent":["// JavaScript\r\nimport Transform from './Transform';\r\nimport Vector3 from './math/Vector3';\r\n\r\nclass Camera {\r\n    constructor(shaders) {\r\n        this.shaders = shaders;\r\n        this.shaders[0].activate();\r\n\r\n        this.transform = new Transform();\r\n        this.updateUniforms();\r\n    }\r\n\r\n    translate (val) {\r\n        let rightVec = new Vector3([this.transform.matrix[0]*val[0], this.transform.matrix[4]*val[0], this.transform.matrix[8]*val[0]]);\r\n        let upVec = new Vector3([this.transform.matrix[1]*val[1], this.transform.matrix[5]*val[1], this.transform.matrix[9]*val[1]]);\r\n        let forwardVec = new Vector3([this.transform.matrix[2]*val[2], this.transform.matrix[6]*val[2], this.transform.matrix[10]*val[2]]);\r\n\r\n        this.setPosition([\r\n            this.transform.position.x + rightVec.x + upVec.x + forwardVec.x,\r\n            this.transform.position.y + rightVec.y + upVec.y + forwardVec.y,\r\n            this.transform.position.z + rightVec.z + upVec.z + forwardVec.z,\r\n        ]);\r\n    }\r\n\r\n    rotate (rot) {\r\n        this.setRotation([\r\n            this.transform.rotation.x + rot[0],\r\n            this.transform.rotation.y + rot[1],\r\n            this.transform.rotation.z + rot[2]\r\n        ]);\r\n    }\r\n\r\n    setPosition(cameraPosition) {\r\n        this.transform.setPosition(cameraPosition);\r\n        //this.updateCameraViewUniform();\r\n        //this.updateCameraPositionUniform();\r\n        this.updateUniforms();\r\n    }\r\n\r\n    setRotation(cameraRotation) {\r\n        this.transform.setRotation(cameraRotation);\r\n        //this.updateCameraViewUniform();\r\n        this.updateUniforms();\r\n    }\r\n\r\n    rotateX (angle) {\r\n        this.setRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\r\n    }\r\n\r\n    rotateY (angle) {\r\n        this.setRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\r\n    }\r\n\r\n    updateUniforms() {\r\n        this.shaders[0].activate();\r\n        this.shaders[0].setCameraViewUniform(this.transform.inverted());\r\n    }\r\n}\r\n\r\nexport default Camera;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Enum struct for handling mouse events\nconst MouseKey = {\n  LEFT: 1,\n  MIDDLE: 2,\n  RIGHT: 3\n};\n\nclass EventHandler {\n  constructor() {\n    this.mouseEvent = {\n      offsetX: 0,\n      offsetY: 0,\n      movementX: 0,\n      movementY: 0,\n      deltaX: 0,\n      deltaY: 0,\n      wheelDelta: 0,\n      isPressed: {\n        leftButton: false,\n        rightButton: false,\n        middleButton: false\n      }\n    };\n    this.objectInteraction = {\n      selectedGameObjectIndex: 0,\n      selectedGameObjectAxis: null,\n      moveGameObjectX: 0,\n      moveGameObjectY: 0\n    };\n    let me = this.mouseEvent;\n    let oi = this.objectInteraction;\n    let canvas2D = document.getElementById('text-canvas'); // Mouse down event function definition\n\n    canvas2D.onmousedown = function (event) {\n      if (event.which === MouseKey.LEFT) {\n        me.isPressed.leftButton = true;\n      }\n\n      if (event.which === MouseKey.RIGHT) {\n        me.isPressed.rightButton = true;\n      }\n\n      if (event.which === MouseKey.MIDDLE) {\n        me.isPressed.middleButton = true;\n      }\n    }; // Mouse up event function definition\n\n\n    canvas2D.onmouseup = function (event) {\n      if (event.which === MouseKey.LEFT) {\n        me.isPressed.leftButton = false;\n        oi.selectedGameObjectAxis = null;\n      }\n\n      if (event.which === MouseKey.RIGHT) {\n        me.isPressed.rightButton = false;\n      }\n\n      if (event.which === MouseKey.MIDDLE) {\n        me.isPressed.middleButton = false;\n      }\n    }; // Mouse leave event function definition\n\n\n    canvas2D.onmouseleave = function (event) {\n      if (me.isPressed.leftButton) {\n        me.isPressed.leftButton = false;\n      }\n\n      if (me.isPressed.rightButton) {\n        me.isPressed.rightButton = false;\n      }\n\n      if (me.isPressed.middleButton) {\n        me.isPressed.middleButton = false;\n      }\n    }; // Mouse move event function definition\n\n\n    canvas2D.onmousemove = function (event) {\n      me.movementX = event.movementX;\n      me.movementY = event.movementY;\n      me.offsetX = event.offsetX;\n      me.offsetY = event.offsetY;\n    }; // Mouse wheel event function definition\n\n\n    canvas2D.onwheel = function (event) {\n      me.wheelDelta = event.deltaY;\n    };\n  }\n\n  processCameraNavigation(camera) {\n    // Zoom camera view in and out\n    if (this.mouseEvent.isPressed.middleButton) {\n      camera.translate([0.0, 0.0, -(this.mouseEvent.movementY + this.mouseEvent.movementX) / 20.0]);\n      this.mouseEvent.movementX = 0;\n      this.mouseEvent.movementY = 0;\n    } // Pan the camera view\n    else if (this.mouseEvent.isPressed.leftButton) {\n        camera.translate([-this.mouseEvent.movementX / 40.0, this.mouseEvent.movementY / 40.0, 0.0]);\n        this.mouseEvent.movementX = 0;\n        this.mouseEvent.movementY = 0;\n      } // Rotate the camera view\n      else if (this.mouseEvent.isPressed.rightButton) {\n          camera.rotate([-this.mouseEvent.movementY / 10.0, -this.mouseEvent.movementX / 10.0, 0.0]);\n          this.mouseEvent.movementX = 0;\n          this.mouseEvent.movementY = 0;\n        }\n\n    if (Math.abs(this.mouseEvent.wheelDelta) > 0.01) {\n      if (this.mouseEvent.wheelDelta > 0.0) {\n        camera.translate([0.0, 0.0, 0.4]);\n      } else camera.translate([0.0, 0.0, -0.4]);\n\n      this.mouseEvent.wheelDelta = 0;\n    }\n  }\n\n}\n\nexport default EventHandler;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\EventHandler.js"],"names":["MouseKey","LEFT","MIDDLE","RIGHT","EventHandler","constructor","mouseEvent","offsetX","offsetY","movementX","movementY","deltaX","deltaY","wheelDelta","isPressed","leftButton","rightButton","middleButton","objectInteraction","selectedGameObjectIndex","selectedGameObjectAxis","moveGameObjectX","moveGameObjectY","me","oi","canvas2D","document","getElementById","onmousedown","event","which","onmouseup","onmouseleave","onmousemove","onwheel","processCameraNavigation","camera","translate","rotate","Math","abs"],"mappings":"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","sourcesContent":["// Enum struct for handling mouse events\r\nconst MouseKey = {\r\n    LEFT: 1,\r\n    MIDDLE: 2,\r\n    RIGHT: 3\r\n};\r\n\r\nclass EventHandler {\r\n    constructor() {\r\n        this.mouseEvent = {\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            movementX: 0,\r\n            movementY: 0,\r\n            deltaX: 0,\r\n            deltaY: 0,\r\n            wheelDelta: 0,\r\n            isPressed: {\r\n                leftButton: false,\r\n                rightButton: false,\r\n                middleButton: false\r\n            }\r\n        };\r\n        this.objectInteraction = {\r\n            selectedGameObjectIndex: 0,\r\n            selectedGameObjectAxis: null,\r\n            moveGameObjectX: 0,\r\n            moveGameObjectY: 0\r\n        };\r\n\r\n        let me = this.mouseEvent;\r\n        let oi = this.objectInteraction;\r\n\r\n        let canvas2D = document.getElementById('text-canvas');\r\n        // Mouse down event function definition\r\n        canvas2D.onmousedown = function(event) {\r\n            if(event.which === MouseKey.LEFT) {\r\n                me.isPressed.leftButton = true;\r\n            }\r\n            if (event.which === MouseKey.RIGHT) {\r\n                me.isPressed.rightButton = true;\r\n            }\r\n            if (event.which === MouseKey.MIDDLE) {\r\n                me.isPressed.middleButton = true;\r\n            }\r\n        };\r\n\r\n        // Mouse up event function definition\r\n        canvas2D.onmouseup = function(event) {\r\n            if(event.which === MouseKey.LEFT) {\r\n                me.isPressed.leftButton = false;\r\n                oi.selectedGameObjectAxis = null;\r\n            }\r\n            if (event.which === MouseKey.RIGHT) {\r\n                me.isPressed.rightButton = false;\r\n            }\r\n            if (event.which === MouseKey.MIDDLE) {\r\n                me.isPressed.middleButton = false;\r\n            }\r\n        };\r\n\r\n        // Mouse leave event function definition\r\n        canvas2D.onmouseleave = function(event) {\r\n            if(me.isPressed.leftButton) {\r\n                me.isPressed.leftButton = false;\r\n            }\r\n            if (me.isPressed.rightButton) {\r\n                me.isPressed.rightButton = false;\r\n            }\r\n            if (me.isPressed.middleButton) {\r\n                me.isPressed.middleButton = false;\r\n            }\r\n        };\r\n\r\n        // Mouse move event function definition\r\n        canvas2D.onmousemove  = function(event) {\r\n            me.movementX = event.movementX;\r\n            me.movementY = event.movementY;\r\n\r\n            me.offsetX = event.offsetX;\r\n            me.offsetY = event.offsetY;\r\n        };\r\n\r\n        // Mouse wheel event function definition\r\n        canvas2D.onwheel = function(event) {\r\n            me.wheelDelta = event.deltaY;\r\n        };\r\n    }\r\n\r\n    processCameraNavigation (camera) {\r\n        // Zoom camera view in and out\r\n        if (this.mouseEvent.isPressed.middleButton) {\r\n            camera.translate([0.0, 0.0, -(this.mouseEvent.movementY+this.mouseEvent.movementX)/20.0]);\r\n            this.mouseEvent.movementX = 0;\r\n            this.mouseEvent.movementY = 0;\r\n        } // Pan the camera view\r\n        else if(this.mouseEvent.isPressed.leftButton) {\r\n            camera.translate([-this.mouseEvent.movementX/40.0, this.mouseEvent.movementY/40.0, 0.0]);\r\n            this.mouseEvent.movementX = 0;\r\n            this.mouseEvent.movementY = 0;\r\n        } // Rotate the camera view\r\n        else if (this.mouseEvent.isPressed.rightButton) {\r\n            camera.rotate([-this.mouseEvent.movementY/10.0, -this.mouseEvent.movementX/10.0, 0.0]);\r\n            this.mouseEvent.movementX = 0;\r\n            this.mouseEvent.movementY = 0;\r\n        }\r\n\r\n        if (Math.abs(this.mouseEvent.wheelDelta) > 0.01) {\r\n            if (this.mouseEvent.wheelDelta > 0.0) {\r\n                camera.translate([0.0, 0.0, 0.4]);\r\n            }\r\n            else\r\n                camera.translate([0.0, 0.0, -0.4]);\r\n\r\n            this.mouseEvent.wheelDelta = 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventHandler;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// JavaScript\nimport Shader from \"./Shader\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 50.0, 300.0];\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER: 2,\n  PLANE: 3\n}; // Enum struct for handling mouse events\n\nconst MouseKey = {\n  LEFT_CLICK: 1,\n  RIGHT_CLICK: 3\n};\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.sceneObjects = [];\n    this.mouseInputReader = {\n      leftClickIsActive: false,\n      moveX: 0,\n      moveY: 0,\n      altKey: false,\n      ctrlKey: false,\n      shiftKey: false,\n      selectedGameObjectIndex: 0,\n      selectedGameObjectAxis: null,\n      moveGameObjectX: 0,\n      moveGameObjectY: 0\n    };\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Keeps track of time passed and delta time\n    Time.update(); // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n\n    this.updateViewportDimensions(); // Draw the 3D scene\n\n    this.drawScene(); // Clear screen 2D\n    //this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\n    // Calculate fps\n\n    this.displayFrameRate();\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let aspectRatio = this.canvas.width / this.canvas.height; // Update the projection matrix\n\n    this.mainShader.setProjectionMatrix(aspectRatio); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  preload() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    }\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.0, 0.1, 0.2, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas);\n    this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create scene objects\n\n    this.loadDefaultSceneObjects(); //this.SetUpEventListeners();\n  }\n\n  drawScene() {\n    // Clear screen 3D\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scene objects\n\n    this.sceneObjects.forEach(object => {\n      object.render();\n    }); // Clear depth so that local coordinate axes is visible through models\n    // Draw local coordinate axes UI\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.mainShader);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER) {\n      mesh.createCylinder(32, 1);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name, this.mainShader);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    this.sceneObjects.push(obj);\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Set text font style\n      this.ctx.font = \"20px Consolas\";\n      this.ctx.fillStyle = 'white'; // Fps = the number of frames\n\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0; // Clear previous\n\n      this.ctx.clearRect(0, 0, this.canvas.width, 25); // Draw fps and frame time in milliseconds\n\n      this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\n    } else {\n      ++this.frameCount;\n    }\n  }\n\n  loadDefaultSceneObjects() {\n    // Create a cyan cube\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [10.0, 10.0, 10.0],\n      position: [0.0, 10.0, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); // Create a green sphere\n\n    this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [10.0, 10.0, 10.0],\n      position: [40.0, 20.0, 20.0],\n      color: [0.0, 1.0, 0.0]\n    }); // Create a magenta cylinder\n\n    this.createGameObject({\n      shape: SHAPE.CYLINDER,\n      name: 'Magenta Cylinder',\n      scale: [10.0, 10.0, 10.0],\n      position: [-40.0, 20.0, 20.0],\n      color: [1.0, 0.0, 1.0]\n    }); // Create gray floor\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    }); // Create Walls\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 01',\n      scale: [1.0, 30.0, 200.0],\n      position: [-200.0, 30.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 02',\n      scale: [1.0, 30.0, 200.0],\n      position: [200.0, 30.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 03',\n      scale: [200.0, 30.0, 1.0],\n      position: [0.0, 30.0, -200, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n  }\n\n  SetUpEventListeners() {\n    let mouseInput = this.mouseInputReader;\n    let gameObjects = this.sceneObjects;\n    this.canvas2D.addEventListener(\"mousedown\", function (event) {\n      switch (event.which) {\n        case MouseKey.LEFT_CLICK:\n          mouseInput.leftClickIsActive = true;\n          mouseInput.altKey = event.altKey;\n          mouseInput.ctrlKey = event.ctrlKey;\n          mouseInput.shiftKey = event.shiftKey; // Extend the click box borders\n\n          let offset = 4;\n\n          for (let i = 0; i < gameObjects.length; ++i) {\n            // Check if the coordinate system is visible\n            if (gameObjects[i].localCoordinateSystemUI.isVisible) {\n              // Check if mouse is in the click box area\n              if (event.offsetX <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMax + offset && event.offsetX >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMin - offset && event.offsetY <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMax + offset && event.offsetY >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMin - offset) {\n                mouseInput.selectedGameObjectAxis = 'x';\n              } else if (event.offsetX <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax + offset && event.offsetX >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMin - offset && event.offsetY <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMax + offset && event.offsetY >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMin - offset) {\n                mouseInput.selectedGameObjectAxis = 'y';\n              } else if (event.offsetX <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax + offset && event.offsetX >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.xMin - offset && event.offsetY <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMax + offset && event.offsetY >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMin - offset) {\n                mouseInput.selectedGameObjectAxis = 'z';\n              }\n\n              mouseInput.selectedGameObjectIndex = i;\n            }\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }, false);\n    this.canvas2D.addEventListener(\"mouseup\", function (event) {\n      if (event.which === MouseKey.LEFT_CLICK) {\n        mouseInput.leftClickIsActive = false;\n        mouseInput.selectedGameObjectAxis = null;\n      }\n    }, false);\n    this.canvas2D.addEventListener(\"mouseleave\", function (event) {\n      if (mouseInput.leftClickIsActive) {\n        mouseInput.leftClickIsActive = false;\n      }\n    }, false);\n    this.canvas2D.addEventListener(\"mousemove\", function (event) {\n      if (mouseInput.leftClickIsActive) {\n        mouseInput.moveX = event.movementX;\n        mouseInput.moveY = event.movementY;\n        mouseInput.moveGameObjectX = event.movementX;\n        mouseInput.moveGameObjectY = event.movementY;\n      }\n    }, false);\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER","PLANE","MouseKey","LEFT_CLICK","RIGHT_CLICK","Engine","constructor","lastTime","frameCount","fps","sceneObjects","mouseInputReader","leftClickIsActive","moveX","moveY","altKey","ctrlKey","shiftKey","selectedGameObjectIndex","selectedGameObjectAxis","moveGameObjectX","moveGameObjectY","run","update","updateViewportDimensions","drawScene","displayFrameRate","aspectRatio","canvas","width","height","mainShader","setProjectionMatrix","gl","viewport","preload","canvas2D","document","getElementById","ctx","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","camera","cameraViewUniformLocation","setPosition","setRotation","loadDefaultSceneObjects","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","forEach","object","render","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinder","createPlane","setColor","color","obj","name","position","setScale","scale","addMesh","push","currentTime","time","font","fillStyle","clearRect","fillText","SetUpEventListeners","mouseInput","gameObjects","addEventListener","event","which","offset","i","length","localCoordinateSystemUI","isVisible","offsetX","clickBoxAxisX","borders","xMax","xMin","offsetY","yMax","yMin","clickBoxAxisY","clickBoxAxisZ","movementX","movementY"],"mappings":"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","sourcesContent":["// JavaScript\r\nimport Shader from \"./Shader\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 50.0, 300.0];\r\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER: 2,\r\n    PLANE: 3\r\n};\r\n\r\n// Enum struct for handling mouse events\r\nconst MouseKey = {\r\n    LEFT_CLICK: 1,\r\n    RIGHT_CLICK: 3\r\n};\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.sceneObjects = [];\r\n\r\n        this.mouseInputReader = {\r\n            leftClickIsActive: false,\r\n            moveX: 0,\r\n            moveY: 0,\r\n            altKey: false,\r\n            ctrlKey: false,\r\n            shiftKey: false,\r\n            selectedGameObjectIndex: 0,\r\n            selectedGameObjectAxis: null,\r\n            moveGameObjectX: 0,\r\n            moveGameObjectY: 0\r\n        };\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Keeps track of time passed and delta time\r\n        Time.update();\r\n\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Draw the 3D scene\r\n        this.drawScene();\r\n\r\n        // Clear screen 2D\r\n        //this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\r\n\r\n        // Calculate fps\r\n        this.displayFrameRate();\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let aspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Update the projection matrix\r\n        this.mainShader.setProjectionMatrix(aspectRatio);\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    preload() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.0, 0.1, 0.2, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects();\r\n\r\n        //this.SetUpEventListeners();\r\n    }\r\n\r\n    drawScene() {\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scene objects\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render();\r\n        });\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n\r\n        // Draw local coordinate axes UI\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.mainShader);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER) {\r\n            mesh.createCylinder(32,1);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name, this.mainShader);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        this.sceneObjects.push(obj);\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Set text font style\r\n            this.ctx.font = \"20px Consolas\";\r\n            this.ctx.fillStyle = 'white';\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n            // Clear previous\r\n            this.ctx.clearRect(0, 0, this.canvas.width, 25);\r\n            // Draw fps and frame time in milliseconds\r\n            this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n    }\r\n\r\n    loadDefaultSceneObjects() {\r\n        // Create a cyan cube\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [0.0, 10.0, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n\r\n        // Create a green sphere\r\n        this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Green Sphere',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [40.0, 20.0, 20.0],\r\n            color: [0.0, 1.0, 0.0]\r\n        });\r\n\r\n        // Create a magenta cylinder\r\n        this.createGameObject({\r\n            shape: SHAPE.CYLINDER,\r\n            name: 'Magenta Cylinder',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [-40.0, 20.0, 20.0],\r\n            color: [1.0, 0.0, 1.0]\r\n        });\r\n\r\n        // Create gray floor\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Floor',\r\n            scale: [200.0, 1.0, 200.0],\r\n            position: [0.0, 0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n\r\n        // Create Walls\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 01',\r\n            scale: [1.0, 30.0, 200.0],\r\n            position: [-200.0, 30.0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 02',\r\n            scale: [1.0, 30.0, 200.0],\r\n            position: [200.0, 30.0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 03',\r\n            scale: [200.0, 30.0, 1.0],\r\n            position: [0.0, 30.0, -200, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n    }\r\n\r\n    SetUpEventListeners () {\r\n        let mouseInput = this.mouseInputReader;\r\n        let gameObjects = this.sceneObjects;\r\n\r\n        this.canvas2D.addEventListener(\"mousedown\", function(event) {\r\n            switch(event.which) {\r\n                case MouseKey.LEFT_CLICK:\r\n                    mouseInput.leftClickIsActive = true;\r\n                    mouseInput.altKey = event.altKey;\r\n                    mouseInput.ctrlKey = event.ctrlKey;\r\n                    mouseInput.shiftKey = event.shiftKey;\r\n\r\n                    // Extend the click box borders\r\n                    let offset = 4;\r\n\r\n                    for (let i = 0; i < gameObjects.length; ++i) {\r\n                        // Check if the coordinate system is visible\r\n                        if (gameObjects[i].localCoordinateSystemUI.isVisible) {\r\n                            // Check if mouse is in the click box area\r\n                            if (event.offsetX <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMax+offset &&\r\n                                event.offsetX >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMin-offset &&\r\n                                event.offsetY <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMax+offset &&\r\n                                event.offsetY >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'x';\r\n                            }\r\n                            else if (event.offsetX <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                                event.offsetX >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMin-offset &&\r\n                                event.offsetY <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMax+offset &&\r\n                                event.offsetY >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'y';\r\n                            }\r\n                            else if (event.offsetX <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                                event.offsetX >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.xMin-offset &&\r\n                                event.offsetY <= gameObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMax+offset &&\r\n                                event.offsetY >= gameObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'z';\r\n                            }\r\n\r\n                            mouseInput.selectedGameObjectIndex = i;\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        },false);\r\n\r\n        this.canvas2D.addEventListener(\"mouseup\", function(event) {\r\n            if (event.which === MouseKey.LEFT_CLICK) {\r\n                mouseInput.leftClickIsActive = false;\r\n                mouseInput.selectedGameObjectAxis = null;\r\n            }\r\n        }, false);\r\n\r\n        this.canvas2D.addEventListener(\"mouseleave\", function(event) {\r\n            if (mouseInput.leftClickIsActive) {\r\n                mouseInput.leftClickIsActive = false;\r\n            }\r\n\r\n        }, false);\r\n\r\n        this.canvas2D.addEventListener(\"mousemove\", function(event) {\r\n            if (mouseInput.leftClickIsActive) {\r\n                mouseInput.moveX = event.movementX;\r\n                mouseInput.moveY = event.movementY;\r\n                mouseInput.moveGameObjectX = event.movementX;\r\n                mouseInput.moveGameObjectY = event.movementY;\r\n            }\r\n        }, false);\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
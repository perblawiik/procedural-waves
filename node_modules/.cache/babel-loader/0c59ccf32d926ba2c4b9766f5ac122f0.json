{"ast":null,"code":"class MouseEventHandler {\n  constructor(sceneObjects) {\n    this.mouseInputReader = {\n      leftClickIsActive: false,\n      moveX: 0,\n      moveY: 0,\n      altKey: false,\n      ctrlKey: false,\n      shiftKey: false,\n      selectedGameObjectIndex: 0,\n      selectedGameObjectAxis: null,\n      moveGameObjectX: 0,\n      moveGameObjectY: 0\n    };\n    this.sceneObjects = sceneObjects;\n    let canvas2D = document.getElementById('text-canvas');\n    canvas2D.addEventListener(\"mousedown\", function (event) {\n      this.mouseDownEvent();\n    }, false);\n    canvas2D.addEventListener(\"mouseup\", function (event) {\n      this.mouseUpEvent();\n    }, false);\n    canvas2D.addEventListener(\"mouseleave\", function (event) {\n      this.mouseUpEvent();\n    }, false);\n    canvas2D.addEventListener(\"mousemove\", function (event) {\n      this.mouseMoveEvent();\n    }, false);\n  }\n\n  mouseDownE(event) {\n    let mouseInput = this.mouseInputReader;\n    let objects = this.sceneObjects;\n\n    switch (event.which) {\n      case MouseKey.LEFT_CLICK:\n        mouseInput.leftClickIsActive = true;\n        mouseInput.altKey = event.altKey;\n        mouseInput.ctrlKey = event.ctrlKey;\n        mouseInput.shiftKey = event.shiftKey; // Extend the click box borders\n\n        let offset = 4;\n\n        for (let i = 0; i < objects.length; ++i) {\n          // Check if the coordinate system is visible\n          if (objects[i].localCoordinateSystemUI.isVisible) {\n            // Check if mouse is in the click box area\n            if (event.offsetX <= objects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMax + offset && event.offsetX >= objects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMin - offset && event.offsetY <= objects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMax + offset && event.offsetY >= objects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMin - offset) {\n              mouseInput.selectedGameObjectAxis = 'x';\n            } else if (event.offsetX <= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax + offset && event.offsetX >= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMin - offset && event.offsetY <= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMax + offset && event.offsetY >= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMin - offset) {\n              mouseInput.selectedGameObjectAxis = 'y';\n            } else if (event.offsetX <= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax + offset && event.offsetX >= objects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.xMin - offset && event.offsetY <= objects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMax + offset && event.offsetY >= objects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMin - offset) {\n              mouseInput.selectedGameObjectAxis = 'z';\n            }\n\n            mouseInput.selectedGameObjectIndex = i;\n          }\n        }\n\n        break;\n\n      case MouseKey.RIGHT_CLICK:\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  mouseUp(event) {\n    let mouseInput = this.mouseInputReader;\n\n    switch (event.which) {\n      case MouseKey.LEFT_CLICK:\n        mouseInput.leftClickIsActive = false;\n        mouseInput.selectedGameObjectAxis = null;\n        break;\n\n      case MouseKey.RIGHT_CLICK:\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  mouseLeave(event) {\n    let mouseInput = this.mouseInputReader;\n\n    if (mouseInput.leftClickIsActive) {\n      mouseInput.leftClickIsActive = false;\n    }\n  }\n\n  mouseMove(event) {\n    let mouseInput = this.mouseInputReader;\n\n    if (mouseInput.leftClickIsActive) {\n      mouseInput.moveX = event.movementX;\n      mouseInput.moveY = event.movementY;\n      mouseInput.moveGameObjectX = event.movementX;\n      mouseInput.moveGameObjectY = event.movementY;\n    }\n  }\n\n  processCameraMovement(camera) {\n    if (this.mouseInputReader.leftClickIsActive) {\n      // Move left/right and up/down\n      if (this.mouseInputReader.shiftKey) {\n        camera.translate([-this.mouseInputReader.moveX / 4, this.mouseInputReader.moveY / 4, 0.0]);\n      } // Move forward/backwards\n      else if (this.mouseInputReader.ctrlKey) {\n          camera.translate([0.0, 0.0, -(this.mouseInputReader.moveY + this.mouseInputReader.moveX) / 4]);\n        } else if (this.mouseInputReader.altKey) {\n          camera.rotate([-this.mouseInputReader.moveY / 8, -this.mouseInputReader.moveX / 8, 0.0]);\n        }\n\n      this.mouseInputReader.moveX = 0;\n      this.mouseInputReader.moveY = 0; //this.UpdateGameObjectScreenPosition();\n    }\n  }\n\n}\n\nexport default MouseEventHandler;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\MouseEventHandler.js"],"names":["MouseEventHandler","constructor","sceneObjects","mouseInputReader","leftClickIsActive","moveX","moveY","altKey","ctrlKey","shiftKey","selectedGameObjectIndex","selectedGameObjectAxis","moveGameObjectX","moveGameObjectY","canvas2D","document","getElementById","addEventListener","event","mouseDownEvent","mouseUpEvent","mouseMoveEvent","mouseDownE","mouseInput","objects","which","MouseKey","LEFT_CLICK","offset","i","length","localCoordinateSystemUI","isVisible","offsetX","clickBoxAxisX","borders","xMax","xMin","offsetY","yMax","yMin","clickBoxAxisY","clickBoxAxisZ","RIGHT_CLICK","mouseUp","mouseLeave","mouseMove","movementX","movementY","processCameraMovement","camera","translate","rotate"],"mappings":"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","sourcesContent":["\r\nclass MouseEventHandler {\r\n    constructor(sceneObjects) {\r\n        this.mouseInputReader = {\r\n            leftClickIsActive: false,\r\n            moveX: 0,\r\n            moveY: 0,\r\n            altKey: false,\r\n            ctrlKey: false,\r\n            shiftKey: false,\r\n            selectedGameObjectIndex: 0,\r\n            selectedGameObjectAxis: null,\r\n            moveGameObjectX: 0,\r\n            moveGameObjectY: 0\r\n        };\r\n\r\n        this.sceneObjects = sceneObjects;\r\n\r\n        let canvas2D = document.getElementById('text-canvas');\r\n        canvas2D.addEventListener(\"mousedown\", function(event) {\r\n            this.mouseDownEvent()\r\n        }, false);\r\n\r\n        canvas2D.addEventListener(\"mouseup\", function(event) {\r\n            this.mouseUpEvent();\r\n        }, false);\r\n        canvas2D.addEventListener(\"mouseleave\", function(event) {\r\n            this.mouseUpEvent();\r\n        }, false);\r\n        canvas2D.addEventListener(\"mousemove\", function(event) {\r\n            this.mouseMoveEvent();\r\n        }, false);\r\n    }\r\n\r\n    mouseDownE(event) {\r\n        let mouseInput = this.mouseInputReader;\r\n        let objects = this.sceneObjects;\r\n\r\n        switch(event.which) {\r\n            case MouseKey.LEFT_CLICK:\r\n                mouseInput.leftClickIsActive = true;\r\n                mouseInput.altKey = event.altKey;\r\n                mouseInput.ctrlKey = event.ctrlKey;\r\n                mouseInput.shiftKey = event.shiftKey;\r\n\r\n                // Extend the click box borders\r\n                let offset = 4;\r\n\r\n                for (let i = 0; i < objects.length; ++i) {\r\n                    // Check if the coordinate system is visible\r\n                    if (objects[i].localCoordinateSystemUI.isVisible) {\r\n                        // Check if mouse is in the click box area\r\n                        if (event.offsetX <= objects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMax+offset &&\r\n                            event.offsetX >= objects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMin-offset &&\r\n                            event.offsetY <= objects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMax+offset &&\r\n                            event.offsetY >= objects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMin-offset) {\r\n\r\n                            mouseInput.selectedGameObjectAxis = 'x';\r\n                        }\r\n                        else if (event.offsetX <= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                            event.offsetX >= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMin-offset &&\r\n                            event.offsetY <= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMax+offset &&\r\n                            event.offsetY >= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMin-offset) {\r\n\r\n                            mouseInput.selectedGameObjectAxis = 'y';\r\n                        }\r\n                        else if (event.offsetX <= objects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                            event.offsetX >= objects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.xMin-offset &&\r\n                            event.offsetY <= objects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMax+offset &&\r\n                            event.offsetY >= objects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMin-offset) {\r\n\r\n                            mouseInput.selectedGameObjectAxis = 'z';\r\n                        }\r\n\r\n                        mouseInput.selectedGameObjectIndex = i;\r\n                    }\r\n                }\r\n                break;\r\n            case MouseKey.RIGHT_CLICK:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    mouseUp(event) {\r\n        let mouseInput = this.mouseInputReader;\r\n\r\n        switch(event.which) {\r\n            case MouseKey.LEFT_CLICK:\r\n                mouseInput.leftClickIsActive = false;\r\n                mouseInput.selectedGameObjectAxis = null;\r\n                break;\r\n            case MouseKey.RIGHT_CLICK:\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    mouseLeave(event) {\r\n        let mouseInput = this.mouseInputReader;\r\n\r\n        if (mouseInput.leftClickIsActive) {\r\n            mouseInput.leftClickIsActive = false;\r\n        }\r\n    }\r\n\r\n    mouseMove(event) {\r\n        let mouseInput = this.mouseInputReader;\r\n\r\n        if (mouseInput.leftClickIsActive) {\r\n            mouseInput.moveX = event.movementX;\r\n            mouseInput.moveY = event.movementY;\r\n            mouseInput.moveGameObjectX = event.movementX;\r\n            mouseInput.moveGameObjectY = event.movementY;\r\n        }\r\n    }\r\n\r\n    processCameraMovement (camera) {\r\n        if (this.mouseInputReader.leftClickIsActive) {\r\n            // Move left/right and up/down\r\n            if (this.mouseInputReader.shiftKey) {\r\n                camera.translate([-this.mouseInputReader.moveX/4, this.mouseInputReader.moveY/4, 0.0]);\r\n            } // Move forward/backwards\r\n            else if (this.mouseInputReader.ctrlKey) {\r\n                camera.translate([0.0, 0.0, -(this.mouseInputReader.moveY+this.mouseInputReader.moveX)/4]);\r\n            }\r\n            else if (this.mouseInputReader.altKey) {\r\n                camera.rotate([-this.mouseInputReader.moveY/8, -this.mouseInputReader.moveX/8, 0.0]);\r\n            }\r\n            this.mouseInputReader.moveX = 0;\r\n            this.mouseInputReader.moveY = 0;\r\n\r\n            //this.UpdateGameObjectScreenPosition();\r\n        }\r\n    }\r\n}\r\n\r\nexport default MouseEventHandler;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Time from \"./Time\";\n\nclass Scene {\n  constructor(shaders) {\n    this.sceneObjects = [];\n    this.lightSources = [];\n    this.shaders = shaders;\n  }\n\n  addGameObject(gameObject) {\n    this.sceneObjects.push(gameObject);\n  }\n\n  addLightSource(lightSource) {\n    // Activate the main shader\n    let shader = this.shaders.get(\"phong\");\n    shader.activate();\n    let lightCount = this.lightSources.length;\n    let arrayName = \"pointLights[\" + lightCount + \"].\"; // Get uniform locations\n\n    let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\n    let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\n    let strengthLocName = \"pointLights[\" + lightCount + \"].strength\";\n    let lightSourceCountUniformLoc = shader.getUniformLoc(\"lightCount\"); // Set the uniforms in the fragment shader\n\n    shader.setUniformVec3f(positionUniformLoc, lightSource.position);\n    shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\n    shader.setUniformFloat(shader.getUniformLoc(strengthLocName), lightSource.lightStrength);\n    shader.setUniformInt(lightSourceCountUniformLoc, lightCount);\n    this.lightSources.push(lightSource);\n  }\n\n  draw() {\n    this.sceneObjects.forEach(object => {\n      object.render(this.shaders.get(\"phong\"));\n    });\n    this.lightSources.forEach(lightSource => {\n      //let currentPos = lightSource.transform.position;\n      //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\n      //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\n      lightSource.render(this.shaders.get(\"ambient\"));\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Scene.js"],"names":["Time","Scene","constructor","shaders","sceneObjects","lightSources","addGameObject","gameObject","push","addLightSource","lightSource","shader","get","activate","lightCount","length","arrayName","positionUniformLoc","getUniformLoc","colorUniformLoc","strengthLocName","lightSourceCountUniformLoc","setUniformVec3f","position","lightColor","setUniformFloat","lightStrength","setUniformInt","draw","forEach","object","render"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKF,OAAL,GAAeA,OAAf;AACH;;AAEDG,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKH,YAAL,CAAkBI,IAAlB,CAAuBD,UAAvB;AACH;;AAEDE,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB;AACA,QAAIC,MAAM,GAAG,KAAKR,OAAL,CAAaS,GAAb,CAAiB,OAAjB,CAAb;AACAD,IAAAA,MAAM,CAACE,QAAP;AAEA,QAAIC,UAAU,GAAG,KAAKT,YAAL,CAAkBU,MAAnC;AACA,QAAIC,SAAS,GAAG,iBAAiBF,UAAjB,GAA8B,IAA9C,CANwB,CAQxB;;AACA,QAAIG,kBAAkB,GAAGN,MAAM,CAACO,aAAP,CAAqBF,SAAS,GAAG,UAAjC,CAAzB;AACA,QAAIG,eAAe,GAAGR,MAAM,CAACO,aAAP,CAAqBF,SAAS,GAAG,OAAjC,CAAtB;AACA,QAAII,eAAe,GAAG,iBAAiBN,UAAjB,GAA8B,YAApD;AACA,QAAIO,0BAA0B,GAAGV,MAAM,CAACO,aAAP,CAAqB,YAArB,CAAjC,CAZwB,CAcxB;;AACAP,IAAAA,MAAM,CAACW,eAAP,CAAuBL,kBAAvB,EAA2CP,WAAW,CAACa,QAAvD;AACAZ,IAAAA,MAAM,CAACW,eAAP,CAAuBH,eAAvB,EAAwCT,WAAW,CAACc,UAApD;AACAb,IAAAA,MAAM,CAACc,eAAP,CAAuBd,MAAM,CAACO,aAAP,CAAqBE,eAArB,CAAvB,EAA8DV,WAAW,CAACgB,aAA1E;AACAf,IAAAA,MAAM,CAACgB,aAAP,CAAqBN,0BAArB,EAAiDP,UAAjD;AAEA,SAAKT,YAAL,CAAkBG,IAAlB,CAAuBE,WAAvB;AACH;;AAEDkB,EAAAA,IAAI,GAAG;AACH,SAAKxB,YAAL,CAAkByB,OAAlB,CAA2BC,MAAD,IAAW;AACjCA,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAK5B,OAAL,CAAaS,GAAb,CAAiB,OAAjB,CAAd;AACH,KAFD;AAIA,SAAKP,YAAL,CAAkBwB,OAAlB,CAA2BnB,WAAD,IAAiB;AACvC;AACA;AACA;AACAA,MAAAA,WAAW,CAACqB,MAAZ,CAAmB,KAAK5B,OAAL,CAAaS,GAAb,CAAiB,SAAjB,CAAnB;AACH,KALD;AAMH;;AA7CO;;AAgDZ,eAAeX,KAAf","sourcesContent":["import Time from \"./Time\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n    }\r\n\r\n    addGameObject(gameObject) {\r\n        this.sceneObjects.push(gameObject);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        // Activate the main shader\r\n        let shader = this.shaders.get(\"phong\");\r\n        shader.activate();\r\n\r\n        let lightCount = this.lightSources.length;\r\n        let arrayName = \"pointLights[\" + lightCount + \"].\";\r\n\r\n        // Get uniform locations\r\n        let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\r\n        let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\r\n        let strengthLocName = \"pointLights[\" + lightCount + \"].strength\";\r\n        let lightSourceCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n\r\n        // Set the uniforms in the fragment shader\r\n        shader.setUniformVec3f(positionUniformLoc, lightSource.position);\r\n        shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\r\n        shader.setUniformFloat(shader.getUniformLoc(strengthLocName), lightSource.lightStrength);\r\n        shader.setUniformInt(lightSourceCountUniformLoc, lightCount);\r\n\r\n        this.lightSources.push(lightSource);\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(\"phong\"));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            //let currentPos = lightSource.transform.position;\r\n            //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\r\n            //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}
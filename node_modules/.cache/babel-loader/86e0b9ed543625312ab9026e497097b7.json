{"ast":null,"code":"import Transform from \"./Transform\";\nimport Mesh from \"./Mesh\";\n\nclass SphereCollider {\n  constructor(gl) {\n    this.transform = new Transform();\n    this.model = new Mesh(gl);\n    this.model.createSphere(8);\n    this.model.setColor([0.75, 0.75, 0.75]);\n    this.transform.addChild(this.model.transform);\n    this.isVisible = false;\n    this.radius = 1.0;\n  }\n\n  setVisible(state) {\n    this.isVisible = state;\n  }\n\n  render(shader) {\n    if (this.isVisible) {\n      this.model.render(shader);\n    }\n  }\n\n}\n\nexport default SphereCollider;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\SphereCollider.js"],"names":["Transform","Mesh","SphereCollider","constructor","gl","transform","model","createSphere","setColor","addChild","isVisible","radius","setVisible","state","render","shader"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACZ,SAAKC,SAAL,GAAiB,IAAIL,SAAJ,EAAjB;AAEA,SAAKM,KAAL,GAAa,IAAIL,IAAJ,CAASG,EAAT,CAAb;AACA,SAAKE,KAAL,CAAWC,YAAX,CAAwB,CAAxB;AACA,SAAKD,KAAL,CAAWE,QAAX,CAAoB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAApB;AAEA,SAAKH,SAAL,CAAeI,QAAf,CAAwB,KAAKH,KAAL,CAAWD,SAAnC;AAEA,SAAKK,SAAL,GAAiB,KAAjB;AACA,SAAKC,MAAL,GAAc,GAAd;AACH;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,SAAKH,SAAL,GAAiBG,KAAjB;AACH;;AAEDC,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,QAAG,KAAKL,SAAR,EAAmB;AACf,WAAKJ,KAAL,CAAWQ,MAAX,CAAkBC,MAAlB;AACH;AACJ;;AAtBgB;;AAyBrB,eAAeb,cAAf","sourcesContent":["import Transform from \"./Transform\";\r\nimport Mesh from \"./Mesh\";\r\n\r\nclass SphereCollider {\r\n    constructor(gl) {\r\n        this.transform = new Transform();\r\n\r\n        this.model = new Mesh(gl);\r\n        this.model.createSphere(8);\r\n        this.model.setColor([0.75, 0.75, 0.75]);\r\n\r\n        this.transform.addChild(this.model.transform);\r\n\r\n        this.isVisible = false;\r\n        this.radius = 1.0;\r\n    }\r\n\r\n    setVisible(state) {\r\n        this.isVisible = state;\r\n    }\r\n\r\n    render(shader) {\r\n        if(this.isVisible) {\r\n            this.model.render(shader);\r\n        }\r\n    }\r\n}\r\n\r\nexport default SphereCollider;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Time from \"./Time\";\n\nclass Scene {\n  constructor(shaders) {\n    this.sceneObjects = [];\n    this.lightSources = [];\n    this.shaders = shaders;\n  }\n\n  addGameObject(gameObject) {\n    this.sceneObjects.push(gameObject);\n  }\n\n  addLightSource(lightSource) {\n    let shader = this.shaders.get(\"main\");\n    shader.activate();\n    this.lightSources.push(lightSource);\n    let lightPositions = [];\n    let stride = 7; // 7 values per light source component, position(x,y,z) + color (r,g,b) + strength\n\n    for (let i = 0; i < this.lightSources.length; ++i) {\n      let lightSource = this.lightSources[i];\n      let positionLocName = \"pointLights[\" + i + \"].position\";\n      shader.setUniformVec3f(shader.getUniformLoc(positionLocName), [lightSource.transform.position.x, lightSource.transform.position.y, lightSource.transform.position.z]);\n      let colorLocName = \"pointLights[\" + i + \"].color\";\n      shader.setUniformVec3f(shader.getUniformLoc(colorLocName), [lightSource.color.x, lightSource.color.y, lightSource.color.z]);\n      let strengthLocName = \"pointLights[\" + i + \"].strength\";\n      shader.setUniformFloat(shader.getUniformLoc(strengthLocName, lightSource.lightStrength));\n    }\n    /*\r\n    let lightPositionsUniformLoc = shader.getUniformLoc(\"lightPositions\");\r\n    let pointLightsUniformLoc = shader.getUniformLoc(\"pointLights\");\r\n    let lightColorUniformLoc = shader.getUniformLoc(\"lightColor\");\r\n    let lightSourceCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n      //shader.setUniformVec3Array(lightPositionsUniformLoc, lightPositions);\r\n    shader.setUniformFloatArray(lightPositionsUniformLoc, lightPositions);\r\n    shader.setUniformFloatArray(pointLightsUniformLoc, lightPositions);\r\n    shader.setUniformVec3f(lightColorUniformLoc, this.lightSources[0].lightColor);\r\n    shader.setUniformInt(lightSourceCountUniformLoc, this.lightSources.length);\r\n    */\n\n  }\n\n  draw() {\n    this.sceneObjects.forEach(object => {\n      object.render(this.shaders.get(\"main\"));\n    });\n    this.lightSources.forEach(lightSource => {\n      //let currentPos = lightSource.transform.position;\n      //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\n      //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\n      lightSource.render(this.shaders.get(\"ambient\"));\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Scene.js"],"names":["Time","Scene","constructor","shaders","sceneObjects","lightSources","addGameObject","gameObject","push","addLightSource","lightSource","shader","get","activate","lightPositions","stride","i","length","positionLocName","setUniformVec3f","getUniformLoc","transform","position","x","y","z","colorLocName","color","strengthLocName","setUniformFloat","lightStrength","draw","forEach","object","render"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKF,OAAL,GAAeA,OAAf;AACH;;AAEDG,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKH,YAAL,CAAkBI,IAAlB,CAAuBD,UAAvB;AACH;;AAEDE,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB,QAAIC,MAAM,GAAG,KAAKR,OAAL,CAAaS,GAAb,CAAiB,MAAjB,CAAb;AACAD,IAAAA,MAAM,CAACE,QAAP;AAEA,SAAKR,YAAL,CAAkBG,IAAlB,CAAuBE,WAAvB;AACA,QAAII,cAAc,GAAG,EAArB;AACA,QAAIC,MAAM,GAAG,CAAb,CANwB,CAMR;;AAChB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,YAAL,CAAkBY,MAAtC,EAA8C,EAAED,CAAhD,EAAmD;AAC/C,UAAIN,WAAW,GAAG,KAAKL,YAAL,CAAkBW,CAAlB,CAAlB;AAEA,UAAIE,eAAe,GAAG,iBAAiBF,CAAjB,GAAqB,YAA3C;AACAL,MAAAA,MAAM,CAACQ,eAAP,CAAuBR,MAAM,CAACS,aAAP,CAAqBF,eAArB,CAAvB,EAA8D,CAACR,WAAW,CAACW,SAAZ,CAAsBC,QAAtB,CAA+BC,CAAhC,EAAmCb,WAAW,CAACW,SAAZ,CAAsBC,QAAtB,CAA+BE,CAAlE,EAAqEd,WAAW,CAACW,SAAZ,CAAsBC,QAAtB,CAA+BG,CAApG,CAA9D;AAEA,UAAIC,YAAY,GAAG,iBAAiBV,CAAjB,GAAqB,SAAxC;AACAL,MAAAA,MAAM,CAACQ,eAAP,CAAuBR,MAAM,CAACS,aAAP,CAAqBM,YAArB,CAAvB,EAA2D,CAAChB,WAAW,CAACiB,KAAZ,CAAkBJ,CAAnB,EAAsBb,WAAW,CAACiB,KAAZ,CAAkBH,CAAxC,EAA2Cd,WAAW,CAACiB,KAAZ,CAAkBF,CAA7D,CAA3D;AAEA,UAAIG,eAAe,GAAG,iBAAiBZ,CAAjB,GAAqB,YAA3C;AACAL,MAAAA,MAAM,CAACkB,eAAP,CAAuBlB,MAAM,CAACS,aAAP,CAAqBQ,eAArB,EAAsClB,WAAW,CAACoB,aAAlD,CAAvB;AACH;AACD;;;;;;;;;;;;AAYH;;AAEDC,EAAAA,IAAI,GAAG;AACH,SAAK3B,YAAL,CAAkB4B,OAAlB,CAA2BC,MAAD,IAAW;AACjCA,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAK/B,OAAL,CAAaS,GAAb,CAAiB,MAAjB,CAAd;AACH,KAFD;AAIA,SAAKP,YAAL,CAAkB2B,OAAlB,CAA2BtB,WAAD,IAAiB;AACvC;AACA;AACA;AACAA,MAAAA,WAAW,CAACwB,MAAZ,CAAmB,KAAK/B,OAAL,CAAaS,GAAb,CAAiB,SAAjB,CAAnB;AACH,KALD;AAMH;;AAvDO;;AA0DZ,eAAeX,KAAf","sourcesContent":["import Time from \"./Time\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n    }\r\n\r\n    addGameObject(gameObject) {\r\n        this.sceneObjects.push(gameObject);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        let shader = this.shaders.get(\"main\");\r\n        shader.activate();\r\n\r\n        this.lightSources.push(lightSource);\r\n        let lightPositions = [];\r\n        let stride = 7; // 7 values per light source component, position(x,y,z) + color (r,g,b) + strength\r\n        for (let i = 0; i < this.lightSources.length; ++i) {\r\n            let lightSource = this.lightSources[i];\r\n\r\n            let positionLocName = \"pointLights[\" + i + \"].position\";\r\n            shader.setUniformVec3f(shader.getUniformLoc(positionLocName), [lightSource.transform.position.x, lightSource.transform.position.y, lightSource.transform.position.z]);\r\n\r\n            let colorLocName = \"pointLights[\" + i + \"].color\";\r\n            shader.setUniformVec3f(shader.getUniformLoc(colorLocName), [lightSource.color.x, lightSource.color.y, lightSource.color.z]);\r\n\r\n            let strengthLocName = \"pointLights[\" + i + \"].strength\";\r\n            shader.setUniformFloat(shader.getUniformLoc(strengthLocName, lightSource.lightStrength));\r\n        }\r\n        /*\r\n        let lightPositionsUniformLoc = shader.getUniformLoc(\"lightPositions\");\r\n        let pointLightsUniformLoc = shader.getUniformLoc(\"pointLights\");\r\n        let lightColorUniformLoc = shader.getUniformLoc(\"lightColor\");\r\n        let lightSourceCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n\r\n        //shader.setUniformVec3Array(lightPositionsUniformLoc, lightPositions);\r\n        shader.setUniformFloatArray(lightPositionsUniformLoc, lightPositions);\r\n        shader.setUniformFloatArray(pointLightsUniformLoc, lightPositions);\r\n        shader.setUniformVec3f(lightColorUniformLoc, this.lightSources[0].lightColor);\r\n        shader.setUniformInt(lightSourceCountUniformLoc, this.lightSources.length);\r\n        */\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(\"main\"));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            //let currentPos = lightSource.transform.position;\r\n            //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\r\n            //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}
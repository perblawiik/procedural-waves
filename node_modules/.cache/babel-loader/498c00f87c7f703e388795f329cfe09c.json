{"ast":null,"code":"class ShaderHandle {\n  constructor(canvas, vertexShaderFile, fragmentShaderFile) {\n    this.canvas = canvas;\n    this.gl = this.canvas.getContext(\"webgl\"); // Set up the vertex and fragment shaders (glsl)\n\n    let vertexShader = this.createShaderFromFile(this.gl.VERTEX_SHADER, vertexShaderFile);\n    let fragmentShader = this.createShaderFromFile(this.gl.FRAGMENT_SHADER, fragmentShaderFile); // Attach shaders to our program\n\n    this.program = this.createProgramFromShaders(vertexShader, fragmentShader); // Catches additional errors /\n\n    /****(ONLY USED IN TESTING)****/\n\n    this.gl.validateProgram(this.program);\n\n    if (!this.gl.getProgramParameter(this.program, this.gl.VALIDATE_STATUS)) {\n      console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(this.program));\n    }\n    /****(ONLY USED IN TESTING)****/\n    // Tell OpenGL state machine which program should be active\n\n\n    this.gl.useProgram(this.program); // Save locations for communicating with the shader attributes\n\n    this.fetchAttributeLocations();\n    this.fetchUniformLocations();\n  }\n\n  activate() {\n    this.gl.useProgram(this.program);\n  }\n\n  fetchAttributeLocations() {\n    //Get attribute location from vertex shader text (glsl)\n    this.positionAttributeLocation = this.gl.getAttribLocation(this.program, \"vertPosition\");\n    this.normalAttributeLocation = this.gl.getAttribLocation(this.program, \"vertNormal\");\n    this.textureAttributeLocation = this.gl.getAttribLocation(this.program, \"vertTexCoord\");\n  }\n\n  fetchUniformLocations() {\n    // Matrix4f\n    this.modelViewUniformLocation = this.gl.getUniformLocation(this.program, \"modelView\");\n    this.cameraViewUniformLocation = this.gl.getUniformLocation(this.program, \"cameraView\");\n    this.projectionMatrixUniformLocation = this.gl.getUniformLocation(this.program, \"perspective\"); // Vector3f\n\n    this.colorUniformLocation = this.gl.getUniformLocation(this.program, \"diffuseColor\");\n    this.viewPositionUniformLocation = this.gl.getUniformLocation(this.program, \"viewPosition\");\n  }\n\n  createShaderFromFile(type, source) {\n    let shader = this.gl.createShader(type);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader); // Check for errors\n\n    if (this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n      return shader;\n    }\n\n    console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\n    this.gl.deleteShader(shader);\n  }\n\n  createProgramFromShaders(vertexShader, fragmentShader) {\n    let program = this.gl.createProgram();\n    this.gl.attachShader(program, vertexShader);\n    this.gl.attachShader(program, fragmentShader);\n    this.gl.linkProgram(program); // Check for errors\n\n    if (this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\n      return program;\n    }\n\n    console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\n    this.gl.deleteProgram(program);\n  }\n\n  getUniformLoc(uniformName) {\n    return this.gl.getUniformLocation(this.program, uniformName);\n  }\n\n  setProjectionUniform(matrix) {\n    this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, matrix);\n  }\n\n  setCameraViewUniform(matrix) {\n    this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, matrix);\n  }\n\n  setCameraViewPosition(vector) {\n    this.gl.uniform3fv(this.viewPositionUniformLocation, [vector.x, vector.y, vector.z]);\n  }\n\n  setUniformVec3f(location, vector) {\n    this.gl.uniform3fv(location, [vector.x, vector.y, vector.z]);\n  }\n\n  setUniformVec2f(location, vector) {\n    this.gl.uniform2fv(location, [vector[0], vector[1]]);\n  }\n\n  setUniformMat4f(location, matrix) {\n    this.gl.uniformMatrix4fv(location, this.gl.FALSE, matrix);\n  }\n\n  setUniformFloatArray(location, array) {\n    this.gl.uniform1fv(location, array);\n  }\n\n  setUniformVec3Array(location, array) {\n    this.gl.uniform3fv(location, array);\n  }\n\n  setUniformInt(location, value) {\n    this.gl.uniform1i(location, value);\n  }\n\n  setUniformFloat(location, value) {\n    this.gl.uniform1f(location, value);\n  }\n\n}\n\nexport default ShaderHandle;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\ShaderHandle.js"],"names":["ShaderHandle","constructor","canvas","vertexShaderFile","fragmentShaderFile","gl","getContext","vertexShader","createShaderFromFile","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgramFromShaders","validateProgram","getProgramParameter","VALIDATE_STATUS","console","error","getProgramInfoLog","useProgram","fetchAttributeLocations","fetchUniformLocations","activate","positionAttributeLocation","getAttribLocation","normalAttributeLocation","textureAttributeLocation","modelViewUniformLocation","getUniformLocation","cameraViewUniformLocation","projectionMatrixUniformLocation","colorUniformLocation","viewPositionUniformLocation","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createProgram","attachShader","linkProgram","LINK_STATUS","deleteProgram","getUniformLoc","uniformName","setProjectionUniform","matrix","uniformMatrix4fv","FALSE","setCameraViewUniform","setCameraViewPosition","vector","uniform3fv","x","y","z","setUniformVec3f","location","setUniformVec2f","uniform2fv","setUniformMat4f","setUniformFloatArray","array","uniform1fv","setUniformVec3Array","setUniformInt","value","uniform1i","setUniformFloat","uniform1f"],"mappings":"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","sourcesContent":["class ShaderHandle {\r\n    constructor(canvas, vertexShaderFile, fragmentShaderFile) {\r\n        this.canvas = canvas;\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // Set up the vertex and fragment shaders (glsl)\r\n        let vertexShader = this.createShaderFromFile(this.gl.VERTEX_SHADER, vertexShaderFile);\r\n        let fragmentShader = this.createShaderFromFile(this.gl.FRAGMENT_SHADER, fragmentShaderFile);\r\n\r\n        // Attach shaders to our program\r\n        this.program = this.createProgramFromShaders(vertexShader, fragmentShader);\r\n\r\n        // Catches additional errors /\r\n        /****(ONLY USED IN TESTING)****/\r\n        this.gl.validateProgram(this.program);\r\n        if(!this.gl.getProgramParameter(this.program, this.gl.VALIDATE_STATUS)) {\r\n            console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(this.program));\r\n        }\r\n        /****(ONLY USED IN TESTING)****/\r\n\r\n        // Tell OpenGL state machine which program should be active\r\n        this.gl.useProgram(this.program);\r\n\r\n        // Save locations for communicating with the shader attributes\r\n        this.fetchAttributeLocations();\r\n        this.fetchUniformLocations();\r\n    }\r\n\r\n    activate () {\r\n        this.gl.useProgram(this.program);\r\n    }\r\n\r\n    fetchAttributeLocations() {\r\n        //Get attribute location from vertex shader text (glsl)\r\n        this.positionAttributeLocation = this.gl.getAttribLocation(this.program, \"vertPosition\");\r\n        this.normalAttributeLocation = this.gl.getAttribLocation(this.program, \"vertNormal\");\r\n        this.textureAttributeLocation = this.gl.getAttribLocation(this.program, \"vertTexCoord\");\r\n    }\r\n\r\n    fetchUniformLocations() {\r\n        // Matrix4f\r\n        this.modelViewUniformLocation = this.gl.getUniformLocation(this.program, \"modelView\");\r\n        this.cameraViewUniformLocation = this.gl.getUniformLocation(this.program, \"cameraView\");\r\n        this.projectionMatrixUniformLocation = this.gl.getUniformLocation(this.program, \"perspective\");\r\n\r\n        // Vector3f\r\n        this.colorUniformLocation = this.gl.getUniformLocation(this.program, \"diffuseColor\");\r\n        this.viewPositionUniformLocation = this.gl.getUniformLocation(this.program, \"viewPosition\");\r\n    }\r\n\r\n    createShaderFromFile(type, source) {\r\n        let shader = this.gl.createShader(type);\r\n        this.gl.shaderSource(shader, source);\r\n        this.gl.compileShader(shader);\r\n\r\n        // Check for errors\r\n        if(this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            return shader;\r\n        }\r\n\r\n        console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\r\n        this.gl.deleteShader(shader);\r\n    }\r\n\r\n    createProgramFromShaders(vertexShader, fragmentShader) {\r\n        let program = this.gl.createProgram();\r\n        this.gl.attachShader(program, vertexShader);\r\n        this.gl.attachShader(program, fragmentShader);\r\n        this.gl.linkProgram(program);\r\n\r\n        // Check for errors\r\n        if(this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\r\n            return program;\r\n        }\r\n\r\n        console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\r\n        this.gl.deleteProgram(program);\r\n    }\r\n\r\n    getUniformLoc(uniformName) {\r\n        return this.gl.getUniformLocation(this.program, uniformName);\r\n    }\r\n\r\n    setProjectionUniform(matrix) {\r\n        this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, matrix);\r\n    }\r\n\r\n    setCameraViewUniform(matrix) {\r\n        this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, matrix);\r\n    }\r\n\r\n    setCameraViewPosition(vector) {\r\n        this.gl.uniform3fv(this.viewPositionUniformLocation, [vector.x, vector.y, vector.z]);\r\n    }\r\n\r\n    setUniformVec3f(location, vector) {\r\n        this.gl.uniform3fv(location, [vector.x, vector.y, vector.z]);\r\n    }\r\n\r\n    setUniformVec2f(location, vector) {\r\n        this.gl.uniform2fv(location, [vector[0], vector[1]]);\r\n    }\r\n\r\n    setUniformMat4f(location, matrix) {\r\n        this.gl.uniformMatrix4fv(location, this.gl.FALSE, matrix);\r\n    }\r\n\r\n    setUniformFloatArray(location, array) {\r\n        this.gl.uniform1fv(location, array);\r\n    }\r\n\r\n    setUniformVec3Array(location, array) {\r\n        this.gl.uniform3fv(location, array);\r\n    }\r\n\r\n    setUniformInt(location, value) {\r\n        this.gl.uniform1i(location, value);\r\n    }\r\n\r\n    setUniformFloat(location, value) {\r\n        this.gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nexport default ShaderHandle;"]},"metadata":{},"sourceType":"module"}
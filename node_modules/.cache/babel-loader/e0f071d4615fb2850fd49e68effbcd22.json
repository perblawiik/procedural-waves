{"ast":null,"code":"import Time from \"./Time\";\n\nclass Scene {\n  constructor(shaders) {\n    this.sceneObjects = [];\n    this.lightSources = [];\n    this.shaders = shaders;\n  }\n\n  addGameObject(gameObject) {\n    this.sceneObjects.push(gameObject);\n  }\n\n  addLightSource(lightSource) {\n    let lightCount = this.lightSources.length;\n    let shader = this.shaders.get(\"main\");\n    shader.activate();\n    let positionLocName = \"pointLights[\" + lightCount + \"].position\";\n    shader.setUniformVec3f(shader.getUniformLoc(positionLocName), lightSource.position);\n    let colorUniformLoc = shader.getUniformLoc(\"pointLights[\" + lightCount + \"].color\");\n    shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\n    let strengthLocName = \"pointLights[\" + lightCount + \"].strength\";\n    shader.setUniformFloat(shader.getUniformLoc(strengthLocName), lightSource.lightStrength);\n    let lightSourceCountUniformLoc = shader.getUniformLoc(\"lightCount\");\n    shader.setUniformInt(lightSourceCountUniformLoc, lightCount);\n    this.lightSources.push(lightSource);\n  }\n\n  draw() {\n    this.sceneObjects.forEach(object => {\n      object.render(this.shaders.get(\"main\"));\n    });\n    this.lightSources.forEach(lightSource => {\n      //let currentPos = lightSource.transform.position;\n      //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\n      //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\n      lightSource.render(this.shaders.get(\"ambient\"));\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Scene.js"],"names":["Time","Scene","constructor","shaders","sceneObjects","lightSources","addGameObject","gameObject","push","addLightSource","lightSource","lightCount","length","shader","get","activate","positionLocName","setUniformVec3f","getUniformLoc","position","colorUniformLoc","lightColor","strengthLocName","setUniformFloat","lightStrength","lightSourceCountUniformLoc","setUniformInt","draw","forEach","object","render"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKF,OAAL,GAAeA,OAAf;AACH;;AAEDG,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKH,YAAL,CAAkBI,IAAlB,CAAuBD,UAAvB;AACH;;AAEDE,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB,QAAIC,UAAU,GAAG,KAAKN,YAAL,CAAkBO,MAAnC;AACA,QAAIC,MAAM,GAAG,KAAKV,OAAL,CAAaW,GAAb,CAAiB,MAAjB,CAAb;AACAD,IAAAA,MAAM,CAACE,QAAP;AAEA,QAAIC,eAAe,GAAG,iBAAiBL,UAAjB,GAA8B,YAApD;AACAE,IAAAA,MAAM,CAACI,eAAP,CAAuBJ,MAAM,CAACK,aAAP,CAAqBF,eAArB,CAAvB,EAA8DN,WAAW,CAACS,QAA1E;AAEA,QAAIC,eAAe,GAAGP,MAAM,CAACK,aAAP,CAAqB,iBAAiBP,UAAjB,GAA8B,SAAnD,CAAtB;AACAE,IAAAA,MAAM,CAACI,eAAP,CAAuBG,eAAvB,EAAwCV,WAAW,CAACW,UAApD;AAEA,QAAIC,eAAe,GAAG,iBAAiBX,UAAjB,GAA8B,YAApD;AACAE,IAAAA,MAAM,CAACU,eAAP,CAAuBV,MAAM,CAACK,aAAP,CAAqBI,eAArB,CAAvB,EAA8DZ,WAAW,CAACc,aAA1E;AAEA,QAAIC,0BAA0B,GAAGZ,MAAM,CAACK,aAAP,CAAqB,YAArB,CAAjC;AACAL,IAAAA,MAAM,CAACa,aAAP,CAAqBD,0BAArB,EAAiDd,UAAjD;AAEA,SAAKN,YAAL,CAAkBG,IAAlB,CAAuBE,WAAvB;AACH;;AAEDiB,EAAAA,IAAI,GAAG;AACH,SAAKvB,YAAL,CAAkBwB,OAAlB,CAA2BC,MAAD,IAAW;AACjCA,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAK3B,OAAL,CAAaW,GAAb,CAAiB,MAAjB,CAAd;AACH,KAFD;AAIA,SAAKT,YAAL,CAAkBuB,OAAlB,CAA2BlB,WAAD,IAAiB;AACvC;AACA;AACA;AACAA,MAAAA,WAAW,CAACoB,MAAZ,CAAmB,KAAK3B,OAAL,CAAaW,GAAb,CAAiB,SAAjB,CAAnB;AACH,KALD;AAMH;;AA1CO;;AA6CZ,eAAeb,KAAf","sourcesContent":["import Time from \"./Time\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n    }\r\n\r\n    addGameObject(gameObject) {\r\n        this.sceneObjects.push(gameObject);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        let lightCount = this.lightSources.length;\r\n        let shader = this.shaders.get(\"main\");\r\n        shader.activate();\r\n\r\n        let positionLocName = \"pointLights[\" + lightCount + \"].position\";\r\n        shader.setUniformVec3f(shader.getUniformLoc(positionLocName), lightSource.position);\r\n\r\n        let colorUniformLoc = shader.getUniformLoc(\"pointLights[\" + lightCount + \"].color\");\r\n        shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\r\n\r\n        let strengthLocName = \"pointLights[\" + lightCount + \"].strength\";\r\n        shader.setUniformFloat(shader.getUniformLoc(strengthLocName), lightSource.lightStrength);\r\n\r\n        let lightSourceCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n        shader.setUniformInt(lightSourceCountUniformLoc, lightCount);\r\n\r\n        this.lightSources.push(lightSource);\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(\"main\"));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            //let currentPos = lightSource.transform.position;\r\n            //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\r\n            //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}
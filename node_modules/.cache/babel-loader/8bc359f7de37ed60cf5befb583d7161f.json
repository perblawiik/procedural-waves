{"ast":null,"code":"class Vector3 {\n  constructor(coordinates) {\n    this.set(coordinates);\n  }\n\n  get x() {\n    return this.v1;\n  }\n\n  get y() {\n    return this.v2;\n  }\n\n  get z() {\n    return this.v3;\n  }\n\n  get r() {\n    return this.v1;\n  }\n\n  get g() {\n    return this.v2;\n  }\n\n  get b() {\n    return this.v3;\n  }\n\n  set(coords) {\n    this.v1 = coords[0];\n    this.v2 = coords[1];\n    this.v3 = coords[2];\n  }\n\n  setX(x) {\n    this.v1 = x;\n  }\n\n  clone() {\n    return new Vector3([this.x, this.y, this.z]);\n  }\n\n  inverted() {\n    return new Vector3([-this.x, -this.y, -this.z]);\n  }\n\n  normalized() {\n    let out = new Vector3([0.0, 0.0, 0.0]); // Set length of vector to 1\n\n    let magnitude = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\n    if (magnitude > 0.001) {\n      out.set([this.v1 / magnitude, this.v2 / magnitude, this.v3 / magnitude]);\n    } else {\n      out.set([0.0, 0.0, 0.0]);\n    }\n\n    return out;\n  }\n\n  divideBy(scalar) {\n    this.v1 /= scalar;\n    this.v2 /= scalar;\n    this.v3 /= scalar;\n    return this;\n  }\n\n  multipleBy(scalar) {\n    this.v1 *= scalar;\n    this.v2 *= scalar;\n    this.v3 *= scalar;\n    return this;\n  }\n\n  static distance(a, b) {\n    return Math.sqrt((b.v1 - a.v1) * (b.v1 - a.v1) + (b.v2 - a.v2) * (b.v2 - a.v2) + (b.v3 - a.v3) * (b.v3 - a.v3));\n  }\n\n  static add(A, B) {\n    return new Vector3([A.v1 + B.v1, A.v2 + B.v2, A.v3 + B.v3]);\n  }\n\n  static subtract(A, B) {\n    return new Vector3([A.v1 - B.v1, A.v2 - B.v2, A.v3 - B.v3]);\n  }\n\n  static crossProduct(A, B) {\n    return new Vector3([A.y * B.z - A.z * B.y, -(A.x * B.z - A.z * B.x), A.x * B.y - A.y * B.x]);\n  }\n\n  static dot(A, B) {\n    return A.v1 * B.v1 + A.v2 * B.v2 + A.v3 * B.v3;\n  }\n\n  static up() {\n    return new Vector3([0.0, 1.0, 0.0]);\n  }\n\n  static down() {\n    return new Vector3([0.0, -1.0, 0.0]);\n  }\n\n  static forward() {\n    return new Vector3([0.0, 0.0, 1.0]);\n  }\n\n  static backwards() {\n    return new Vector3([0.0, 0.0, -1.0]);\n  }\n\n  static left() {\n    return new Vector3([-1.0, 0.0, 0.0]);\n  }\n\n  static right() {\n    return new Vector3([1.0, 0.0, 0.0]);\n  }\n\n}\n\nexport default Vector3;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\math\\Vector3.js"],"names":["Vector3","constructor","coordinates","set","x","v1","y","v2","z","v3","r","g","b","coords","setX","clone","inverted","normalized","out","magnitude","Math","sqrt","divideBy","scalar","multipleBy","distance","a","add","A","B","subtract","crossProduct","dot","up","down","forward","backwards","left","right"],"mappings":"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","sourcesContent":["class Vector3 {\r\n    constructor(coordinates) {\r\n        this.set(coordinates);\r\n    }\r\n\r\n    get x () {\r\n        return this.v1;\r\n    }\r\n\r\n    get y () {\r\n        return this.v2;\r\n    }\r\n\r\n    get z () {\r\n        return this.v3;\r\n    }\r\n\r\n    get r () {\r\n        return this.v1;\r\n    }\r\n\r\n    get g () {\r\n        return this.v2;\r\n    }\r\n\r\n    get b () {\r\n        return this.v3;\r\n    }\r\n\r\n    set(coords) {\r\n        this.v1 = coords[0];\r\n        this.v2 = coords[1];\r\n        this.v3 = coords[2];\r\n    }\r\n\r\n    setX(x) {\r\n        this.v1 = x;\r\n    }\r\n\r\n    clone() {\r\n        return new Vector3([this.x, this.y, this.z]);\r\n    }\r\n\r\n    inverted() {\r\n        return new Vector3 ([-this.x, -this.y, -this.z]);\r\n    }\r\n\r\n    normalized() {\r\n        let out = new Vector3([0.0, 0.0, 0.0]);\r\n\r\n        // Set length of vector to 1\r\n        let magnitude = Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z);\r\n        if (magnitude > 0.001) {\r\n            out.set([\r\n                this.v1/magnitude,\r\n                this.v2/magnitude,\r\n                this.v3/magnitude\r\n            ]);\r\n        }\r\n        else {\r\n            out.set([\r\n                0.0,\r\n                0.0,\r\n                0.0\r\n            ]);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    divideBy(scalar) {\r\n        this.v1 /= scalar;\r\n        this.v2 /= scalar;\r\n        this.v3 /= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    multipleBy(scalar) {\r\n        this.v1 *= scalar;\r\n        this.v2 *= scalar;\r\n        this.v3 *= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    static distance(a, b) {\r\n        return Math.sqrt(\r\n            (b.v1-a.v1)*(b.v1-a.v1) +\r\n            (b.v2-a.v2)*(b.v2-a.v2) +\r\n            (b.v3-a.v3)*(b.v3-a.v3)\r\n        );\r\n    }\r\n\r\n    static add (A, B) {\r\n        return new Vector3 ([\r\n            A.v1 + B.v1,\r\n            A.v2 + B.v2,\r\n            A.v3 + B.v3\r\n        ]);\r\n    }\r\n\r\n    static subtract (A, B) {\r\n        return new Vector3 ([\r\n            A.v1 - B.v1,\r\n            A.v2 - B.v2,\r\n            A.v3 - B.v3\r\n        ]);\r\n    }\r\n\r\n    static crossProduct (A, B) {\r\n        return new Vector3 ([\r\n            (A.y*B.z - A.z*B.y),\r\n            -(A.x*B.z - A.z*B.x),\r\n            (A.x*B.y - A.y*B.x)\r\n        ]);\r\n    }\r\n\r\n    static dot (A, B) {\r\n        return (A.v1*B.v1) + (A.v2*B.v2) + (A.v3*B.v3);\r\n    }\r\n\r\n    static up() {\r\n        return new Vector3([0.0, 1.0, 0.0]);\r\n    }\r\n\r\n    static down() {\r\n        return new Vector3([0.0, -1.0, 0.0]);\r\n    }\r\n\r\n    static forward() {\r\n        return new Vector3([0.0, 0.0, 1.0]);\r\n    }\r\n\r\n    static backwards () {\r\n        return new Vector3([0.0, 0.0, -1.0]);\r\n    }\r\n\r\n    static left() {\r\n        return new Vector3([-1.0, 0.0, 0.0]);\r\n    }\r\n\r\n    static right() {\r\n        return new Vector3([1.0, 0.0, 0.0]);\r\n    }\r\n}\r\n\r\nexport default Vector3;"]},"metadata":{},"sourceType":"module"}
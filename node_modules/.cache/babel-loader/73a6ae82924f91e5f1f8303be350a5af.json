{"ast":null,"code":"// JavaScript\nimport Shader from \"./Shader\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./EventHandler\";\nimport Scene from \"./Scene\";\nimport PointLightSource from \"./PointLightSource\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 100.0, 500.0];\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER: 2,\n  PLANE: 3\n};\n\nclass GraphicsEngine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0;\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n    this.updateViewportDimensions(); // Handle camera navigation\n\n    this.eventHandler.processCameraNavigation(this.camera); // Update the camera's position in the shader\n\n    this.mainShader.setCameraPosition(this.camera.transform.position); // Draw the 3D scene\n\n    this.drawScene(); // Display fps and other information\n\n    this.drawTextMessages();\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let aspectRatio = this.canvas.width / this.canvas.height; // Update the projection matrix\n\n    this.mainShader.setProjectionMatrix(aspectRatio); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  preload() {\n    // Initiate the mouse event handler\n    this.eventHandler = new EventHandler(); // 2D Canvas for text display\n\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    } // Set the viewport dimensions to the same as the canvas\n\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas); // Initialize the main camera\n\n    this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create a scene for the objects\n\n    this.mainScene = new Scene(); // Create scene objects\n\n    this.loadDefaultSceneObjects();\n  }\n\n  drawScene() {\n    // Clear screen 3D\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scene objects\n\n    this.mainScene.draw();\n  }\n\n  drawTextMessages() {\n    // Set text font style\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 50;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.mainShader);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER) {\n      mesh.createCylinder(32, 1);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name, this.mainShader);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    return obj;\n  }\n\n  loadDefaultSceneObjects() {\n    // Create a light source\n    let lightSourceModel = new Mesh(this.mainShader);\n    lightSourceModel.createSphere(8);\n    lightSourceModel.setColor([0.5, 1.0, 1.0]);\n    let lightSource = new PointLightSource(\"Lamp\", this.mainShader);\n    lightSource.setPosition([150.0, 75.0, -150.0]);\n    lightSource.setScale([5.0, 5.0, 5.0]);\n    lightSource.addMesh(lightSourceModel); // Set light position to the same as the white sphere\n    //this.mainShader.setLightPosition(this.mainScene.sceneObjects[0].transform.position);\n\n    this.mainScene.addGameObject(lightSource); // Create a red cube\n\n    this.mainScene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [10.0, 10.0, 10.0],\n      position: [0.0, 10.0, 0.0],\n      color: [1.0, 0.0, 0.0]\n    })); // Create a green sphere\n\n    this.mainScene.addGameObject(this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [10.0, 10.0, 10.0],\n      position: [40.0, 20.0, 20.0],\n      color: [0.0, 1.0, 0.0]\n    })); // Create a magenta cylinder\n\n    this.mainScene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER,\n      name: 'Magenta Cylinder',\n      scale: [10.0, 10.0, 10.0],\n      position: [-40.0, 20.0, 20.0],\n      color: [1.0, 0.0, 1.0]\n    })); // Create gray floor\n\n    this.mainScene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 100.0, 0.0],\n      color: [0.5, 0.5, 0.5]\n    })); // Create gray roof\n\n    this.mainScene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    })); // Create Walls\n\n    this.mainScene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 01',\n      scale: [1.0, 50.0, 200.0],\n      position: [-200.0, 50.0, 0],\n      color: [0.0, 0.0, 0.25]\n    }));\n    this.mainScene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 02',\n      scale: [1.0, 50.0, 200.0],\n      position: [200.0, 50.0, 0],\n      color: [0.0, 0.0, 0.25]\n    }));\n    this.mainScene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 03',\n      scale: [200.0, 50.0, 1.0],\n      position: [0.0, 50.0, -200],\n      color: [0.0, 0.0, 0.25]\n    }));\n  }\n\n}\n\nexport default GraphicsEngine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\GraphicsEngine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","Scene","PointLightSource","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER","PLANE","GraphicsEngine","constructor","lastTime","frameCount","fps","currentTextOffset","run","updateViewportDimensions","eventHandler","processCameraNavigation","camera","mainShader","setCameraPosition","transform","position","drawScene","drawTextMessages","aspectRatio","canvas","width","height","setProjectionMatrix","gl","viewport","preload","canvas2D","document","getElementById","ctx","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","cameraViewUniformLocation","setPosition","setRotation","mainScene","loadDefaultSceneObjects","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","draw","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","fillText","length","pos","cameraPositionText","x","toFixed","y","z","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinder","createPlane","setColor","color","obj","name","setScale","scale","addMesh","lightSourceModel","lightSource","addGameObject"],"mappings":"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","sourcesContent":["// JavaScript\r\nimport Shader from \"./Shader\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./EventHandler\";\r\nimport Scene from \"./Scene\";\r\nimport PointLightSource from \"./PointLightSource\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 100.0, 500.0];\r\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER: 2,\r\n    PLANE: 3\r\n};\r\n\r\nclass GraphicsEngine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Handle camera navigation\r\n        this.eventHandler.processCameraNavigation(this.camera);\r\n\r\n        // Update the camera's position in the shader\r\n        this.mainShader.setCameraPosition(this.camera.transform.position);\r\n\r\n        // Draw the 3D scene\r\n        this.drawScene();\r\n\r\n        // Display fps and other information\r\n        this.drawTextMessages();\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let aspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Update the projection matrix\r\n        this.mainShader.setProjectionMatrix(aspectRatio);\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    preload() {\r\n        // Initiate the mouse event handler\r\n        this.eventHandler = new EventHandler();\r\n\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create a scene for the objects\r\n        this.mainScene = new Scene();\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects();\r\n    }\r\n\r\n    drawScene() {\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scene objects\r\n        this.mainScene.draw()\r\n    }\r\n\r\n    drawTextMessages() {\r\n        // Set text font style\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n        // Clear previous\r\n        this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 50;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.mainShader);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER) {\r\n            mesh.createCylinder(32,1);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name, this.mainShader);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        return obj;\r\n    }\r\n\r\n    loadDefaultSceneObjects() {\r\n\r\n        // Create a light source\r\n        let lightSourceModel = new Mesh(this.mainShader);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor([0.5, 1.0, 1.0]);\r\n\r\n        let lightSource = new PointLightSource(\"Lamp\", this.mainShader);\r\n        lightSource.setPosition([150.0, 75.0, -150.0]);\r\n        lightSource.setScale([5.0, 5.0, 5.0]);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        // Set light position to the same as the white sphere\r\n        //this.mainShader.setLightPosition(this.mainScene.sceneObjects[0].transform.position);\r\n\r\n        this.mainScene.addGameObject(lightSource);\r\n\r\n        // Create a red cube\r\n        this.mainScene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Red Cube',\r\n                scale: [10.0, 10.0, 10.0],\r\n                position: [0.0, 10.0, 0.0],\r\n                color: [1.0, 0.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a green sphere\r\n        this.mainScene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.SPHERE,\r\n                name: 'Green Sphere',\r\n                scale: [10.0, 10.0, 10.0],\r\n                position: [40.0, 20.0, 20.0],\r\n                color: [0.0, 1.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a magenta cylinder\r\n        this.mainScene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER,\r\n                name: 'Magenta Cylinder',\r\n                scale: [10.0, 10.0, 10.0],\r\n                position: [-40.0, 20.0, 20.0],\r\n                color: [1.0, 0.0, 1.0]\r\n            })\r\n        );\r\n\r\n        // Create gray floor\r\n        this.mainScene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Floor',\r\n                scale: [200.0, 1.0, 200.0],\r\n                position: [0.0, 100.0, 0.0],\r\n                color: [0.5, 0.5, 0.5]\r\n            })\r\n        );\r\n\r\n        // Create gray roof\r\n        this.mainScene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Roof',\r\n                scale: [200.0, 1.0, 200.0],\r\n                position: [0.0, 0, 0],\r\n                color: [0.5, 0.5, 0.5]\r\n            })\r\n        );\r\n\r\n        // Create Walls\r\n        this.mainScene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Wall 01',\r\n                scale: [1.0, 50.0, 200.0],\r\n                position: [-200.0, 50.0, 0],\r\n                color: [0.0, 0.0, 0.25]\r\n            })\r\n        );\r\n        this.mainScene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Wall 02',\r\n                scale: [1.0, 50.0, 200.0],\r\n                position: [200.0, 50.0, 0],\r\n                color: [0.0, 0.0, 0.25]\r\n            })\r\n        );\r\n        this.mainScene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Wall 03',\r\n                scale: [200.0, 50.0, 1.0],\r\n                position: [0.0, 50.0, -200],\r\n                color: [0.0, 0.0, 0.25]\r\n            })\r\n        );\r\n    }\r\n}\r\n\r\nexport default GraphicsEngine;"]},"metadata":{},"sourceType":"module"}
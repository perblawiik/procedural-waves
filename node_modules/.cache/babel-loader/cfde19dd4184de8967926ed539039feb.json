{"ast":null,"code":"import Time from \"./Time\";\n\nclass Scene {\n  constructor(shaders) {\n    this.sceneObjects = [];\n    this.lightSources = [];\n    this.shaders = shaders;\n  }\n\n  addGameObject(gameObject) {\n    this.sceneObjects.push(gameObject);\n  }\n\n  addLightSource(lightSource) {\n    let shader = this.shaders.get(\"main\");\n    shader.activate();\n    let positionLocName = \"pointLights[\" + i + \"].position\";\n    shader.setUniformVec3f(shader.getUniformLoc(positionLocName), lightSource.position);\n    let colorLocName = \"pointLights[\" + i + \"].color\";\n    shader.setUniformVec3f(shader.getUniformLoc(colorLocName), lightSource.lightColor);\n    let strengthLocName = \"pointLights[\" + i + \"].strength\";\n    shader.setUniformFloat(shader.getUniformLoc(strengthLocName), lightSource.lightStrength);\n    /*\r\n    for (let i = 0; i < this.lightSources.length; ++i) {\r\n        let lightSource = this.lightSources[i];\r\n          let positionLocName = \"pointLights[\" + i + \"].position\";\r\n        shader.setUniformVec3f(shader.getUniformLoc(positionLocName), lightSource.position);\r\n          let colorLocName = \"pointLights[\" + i + \"].color\";\r\n        shader.setUniformVec3f(shader.getUniformLoc(colorLocName), lightSource.lightColor);\r\n          let strengthLocName = \"pointLights[\" + i + \"].strength\";\r\n        shader.setUniformFloat(shader.getUniformLoc(strengthLocName), lightSource.lightStrength);\r\n    }\r\n    */\n\n    let lightSourceCountUniformLoc = shader.getUniformLoc(\"lightCount\");\n    shader.setUniformInt(lightSourceCountUniformLoc, this.lightSources.length);\n    this.lightSources.push(lightSource);\n  }\n\n  draw() {\n    this.sceneObjects.forEach(object => {\n      object.render(this.shaders.get(\"main\"));\n    });\n    this.lightSources.forEach(lightSource => {\n      //let currentPos = lightSource.transform.position;\n      //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\n      //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\n      lightSource.render(this.shaders.get(\"ambient\"));\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Scene.js"],"names":["Time","Scene","constructor","shaders","sceneObjects","lightSources","addGameObject","gameObject","push","addLightSource","lightSource","shader","get","activate","positionLocName","i","setUniformVec3f","getUniformLoc","position","colorLocName","lightColor","strengthLocName","setUniformFloat","lightStrength","lightSourceCountUniformLoc","setUniformInt","length","draw","forEach","object","render"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKF,OAAL,GAAeA,OAAf;AACH;;AAEDG,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKH,YAAL,CAAkBI,IAAlB,CAAuBD,UAAvB;AACH;;AAEDE,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB,QAAIC,MAAM,GAAG,KAAKR,OAAL,CAAaS,GAAb,CAAiB,MAAjB,CAAb;AACAD,IAAAA,MAAM,CAACE,QAAP;AAGA,QAAIC,eAAe,GAAG,iBAAiBC,CAAjB,GAAqB,YAA3C;AACAJ,IAAAA,MAAM,CAACK,eAAP,CAAuBL,MAAM,CAACM,aAAP,CAAqBH,eAArB,CAAvB,EAA8DJ,WAAW,CAACQ,QAA1E;AAEA,QAAIC,YAAY,GAAG,iBAAiBJ,CAAjB,GAAqB,SAAxC;AACAJ,IAAAA,MAAM,CAACK,eAAP,CAAuBL,MAAM,CAACM,aAAP,CAAqBE,YAArB,CAAvB,EAA2DT,WAAW,CAACU,UAAvE;AAEA,QAAIC,eAAe,GAAG,iBAAiBN,CAAjB,GAAqB,YAA3C;AACAJ,IAAAA,MAAM,CAACW,eAAP,CAAuBX,MAAM,CAACM,aAAP,CAAqBI,eAArB,CAAvB,EAA8DX,WAAW,CAACa,aAA1E;AACA;;;;;;;;;;;;AAeA,QAAIC,0BAA0B,GAAGb,MAAM,CAACM,aAAP,CAAqB,YAArB,CAAjC;AACAN,IAAAA,MAAM,CAACc,aAAP,CAAqBD,0BAArB,EAAiD,KAAKnB,YAAL,CAAkBqB,MAAnE;AAEA,SAAKrB,YAAL,CAAkBG,IAAlB,CAAuBE,WAAvB;AACH;;AAEDiB,EAAAA,IAAI,GAAG;AACH,SAAKvB,YAAL,CAAkBwB,OAAlB,CAA2BC,MAAD,IAAW;AACjCA,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAK3B,OAAL,CAAaS,GAAb,CAAiB,MAAjB,CAAd;AACH,KAFD;AAIA,SAAKP,YAAL,CAAkBuB,OAAlB,CAA2BlB,WAAD,IAAiB;AACvC;AACA;AACA;AACAA,MAAAA,WAAW,CAACoB,MAAZ,CAAmB,KAAK3B,OAAL,CAAaS,GAAb,CAAiB,SAAjB,CAAnB;AACH,KALD;AAMH;;AAxDO;;AA2DZ,eAAeX,KAAf","sourcesContent":["import Time from \"./Time\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n    }\r\n\r\n    addGameObject(gameObject) {\r\n        this.sceneObjects.push(gameObject);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        let shader = this.shaders.get(\"main\");\r\n        shader.activate();\r\n\r\n\r\n        let positionLocName = \"pointLights[\" + i + \"].position\";\r\n        shader.setUniformVec3f(shader.getUniformLoc(positionLocName), lightSource.position);\r\n\r\n        let colorLocName = \"pointLights[\" + i + \"].color\";\r\n        shader.setUniformVec3f(shader.getUniformLoc(colorLocName), lightSource.lightColor);\r\n\r\n        let strengthLocName = \"pointLights[\" + i + \"].strength\";\r\n        shader.setUniformFloat(shader.getUniformLoc(strengthLocName), lightSource.lightStrength);\r\n        /*\r\n        for (let i = 0; i < this.lightSources.length; ++i) {\r\n            let lightSource = this.lightSources[i];\r\n\r\n            let positionLocName = \"pointLights[\" + i + \"].position\";\r\n            shader.setUniformVec3f(shader.getUniformLoc(positionLocName), lightSource.position);\r\n\r\n            let colorLocName = \"pointLights[\" + i + \"].color\";\r\n            shader.setUniformVec3f(shader.getUniformLoc(colorLocName), lightSource.lightColor);\r\n\r\n            let strengthLocName = \"pointLights[\" + i + \"].strength\";\r\n            shader.setUniformFloat(shader.getUniformLoc(strengthLocName), lightSource.lightStrength);\r\n        }\r\n        */\r\n\r\n        let lightSourceCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n        shader.setUniformInt(lightSourceCountUniformLoc, this.lightSources.length);\r\n\r\n        this.lightSources.push(lightSource);\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(\"main\"));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            //let currentPos = lightSource.transform.position;\r\n            //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\r\n            //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import FragmentShader from './shaders/FragmentShader';\nimport VertexShader from './shaders/VertexShader';\nimport Matrix4 from './math/Matrix4';\n\nclass Shader {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.gl = this.canvas.getContext(\"webgl\");\n    this.init();\n  }\n\n  init() {\n    let fragShader = new FragmentShader(); //let vertShader = new VertexShader();\n    // Set up the vertex and fragment shaders (glsl)\n\n    let vertexShader = this.createShader(this.gl.VERTEX_SHADER, VertexShader.file);\n    let fragmentShader = this.createShader(this.gl.FRAGMENT_SHADER, fragShader.file); // Attach shaders to our program\n\n    let program = this.createProgram(vertexShader, fragmentShader); // Catches additional errors /\n\n    /****(ONLY USED IN TESTING)****/\n\n    this.gl.validateProgram(program);\n\n    if (!this.gl.getProgramParameter(program, this.gl.VALIDATE_STATUS)) {\n      console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(program));\n    }\n    /****(ONLY USED IN TESTING)****/\n    // Tell OpenGL state machine which program should be active\n\n\n    this.gl.useProgram(program); //Get attribute location from vertex shader text (glsl)\n\n    this.positionAttributeLocation = this.gl.getAttribLocation(program, \"vertPosition\");\n    this.normalAttributeLocation = this.gl.getAttribLocation(program, \"vertNormal\");\n    this.textureAttributeLocation = this.gl.getAttribLocation(program, \"vertTexCoord\"); // Get uniform location from shaders\n    // mat4\n\n    this.worldViewUniformLocation = this.gl.getUniformLocation(program, \"modelView\");\n    this.cameraViewUniformLocation = this.gl.getUniformLocation(program, \"cameraView\");\n    this.projectionMatrixUniformLocation = this.gl.getUniformLocation(program, \"perspective\"); // vec3\n\n    this.colorUniformLocation = this.gl.getUniformLocation(program, \"diffuseColor\");\n    this.timeUniformLocation = this.gl.getUniformLocation(program, \"time\");\n    this.cameraPositionUniformLocation = this.gl.getUniformLocation(program, \"viewPosition\");\n    this.lightPositionUniformLocation = this.gl.getUniformLocation(program, \"lightPosition\"); // The world view matrix represent all transformations in the \"world room\" (All 3D object movements and positioning)\n\n    this.worldViewMatrix = Matrix4.Identity(); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.worldViewUniformLocation, this.gl.FALSE, this.worldViewMatrix); // The projection matrix adds 3D perspective (depth) to the graphics\n\n    this.projectionMatrix = Matrix4.Perspective(Math.PI / 5, this.canvas.width / this.canvas.height, 0.1, 10000.0); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix); // Camera view\n\n    this.cameraViewMatrix = Matrix4.Identity(); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, this.cameraViewMatrix);\n  }\n\n  createShader(type, source) {\n    let shader = this.gl.createShader(type);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader); // Check for errors\n\n    if (this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n      return shader;\n    }\n\n    console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\n    this.gl.deleteShader(shader);\n  }\n\n  createProgram(vertexShader, fragmentShader) {\n    let program = this.gl.createProgram();\n    this.gl.attachShader(program, vertexShader);\n    this.gl.attachShader(program, fragmentShader);\n    this.gl.linkProgram(program); // Check for errors\n\n    if (this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\n      return program;\n    }\n\n    console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\n    this.gl.deleteProgram(program);\n  }\n\n  setProjectionMatrix(aspectRatio) {\n    // The projection matrix adds 3D perspective (depth) to the graphics\n    this.projectionMatrix = Matrix4.Perspective(Math.PI / 5, aspectRatio, 0.1, 10000.0); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix);\n  }\n\n  setCameraPosition(position) {\n    // Link the uniform\n    this.gl.uniform3fv(this.cameraPositionUniformLocation, [position.x, position.y, position.z]);\n  }\n\n  setLightPosition(position) {\n    // Link the uniform\n    this.gl.uniform3fv(this.lightPositionUniformLocation, [position.x, position.y, position.z]);\n  }\n\n}\n\nexport default Shader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Shader.js"],"names":["FragmentShader","VertexShader","Matrix4","Shader","constructor","canvas","gl","getContext","init","fragShader","vertexShader","createShader","VERTEX_SHADER","file","fragmentShader","FRAGMENT_SHADER","program","createProgram","validateProgram","getProgramParameter","VALIDATE_STATUS","console","error","getProgramInfoLog","useProgram","positionAttributeLocation","getAttribLocation","normalAttributeLocation","textureAttributeLocation","worldViewUniformLocation","getUniformLocation","cameraViewUniformLocation","projectionMatrixUniformLocation","colorUniformLocation","timeUniformLocation","cameraPositionUniformLocation","lightPositionUniformLocation","worldViewMatrix","Identity","uniformMatrix4fv","FALSE","projectionMatrix","Perspective","Math","PI","width","height","cameraViewMatrix","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","LINK_STATUS","deleteProgram","setProjectionMatrix","aspectRatio","setCameraPosition","position","uniform3fv","x","y","z","setLightPosition"],"mappings":"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","sourcesContent":["import FragmentShader from './shaders/FragmentShader';\r\nimport VertexShader from './shaders/VertexShader';\r\nimport Matrix4 from './math/Matrix4';\r\n\r\nclass Shader {\r\n    constructor(canvas) {\r\n        this.canvas = canvas;\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n        this.init();\r\n    }\r\n\r\n    init() {\r\n        let fragShader = new FragmentShader();\r\n        //let vertShader = new VertexShader();\r\n\r\n        // Set up the vertex and fragment shaders (glsl)\r\n        let vertexShader = this.createShader(this.gl.VERTEX_SHADER, VertexShader.file);\r\n        let fragmentShader = this.createShader(this.gl.FRAGMENT_SHADER, fragShader.file);\r\n\r\n        // Attach shaders to our program\r\n        let program = this.createProgram(vertexShader, fragmentShader);\r\n\r\n        // Catches additional errors /\r\n        /****(ONLY USED IN TESTING)****/\r\n        this.gl.validateProgram(program);\r\n        if(!this.gl.getProgramParameter(program, this.gl.VALIDATE_STATUS)) {\r\n            console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(program));\r\n        }\r\n        /****(ONLY USED IN TESTING)****/\r\n\r\n        // Tell OpenGL state machine which program should be active\r\n        this.gl.useProgram(program);\r\n\r\n        //Get attribute location from vertex shader text (glsl)\r\n        this.positionAttributeLocation = this.gl.getAttribLocation(program, \"vertPosition\");\r\n        this.normalAttributeLocation = this.gl.getAttribLocation(program, \"vertNormal\");\r\n        this.textureAttributeLocation = this.gl.getAttribLocation(program, \"vertTexCoord\");\r\n\r\n        // Get uniform location from shaders\r\n        // mat4\r\n        this.worldViewUniformLocation = this.gl.getUniformLocation(program, \"modelView\");\r\n        this.cameraViewUniformLocation = this.gl.getUniformLocation(program, \"cameraView\");\r\n        this.projectionMatrixUniformLocation = this.gl.getUniformLocation(program, \"perspective\");\r\n        // vec3\r\n        this.colorUniformLocation = this.gl.getUniformLocation(program, \"diffuseColor\");\r\n        this.timeUniformLocation = this.gl.getUniformLocation(program, \"time\");\r\n        this.cameraPositionUniformLocation = this.gl.getUniformLocation(program, \"viewPosition\");\r\n        this.lightPositionUniformLocation = this.gl.getUniformLocation(program, \"lightPosition\");\r\n\r\n        // The world view matrix represent all transformations in the \"world room\" (All 3D object movements and positioning)\r\n        this.worldViewMatrix = Matrix4.Identity();\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.worldViewUniformLocation, this.gl.FALSE, this.worldViewMatrix);\r\n        // The projection matrix adds 3D perspective (depth) to the graphics\r\n        this.projectionMatrix = Matrix4.Perspective(Math.PI / 5, this.canvas.width / this.canvas.height, 0.1, 10000.0);\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix);\r\n\r\n        // Camera view\r\n        this.cameraViewMatrix = Matrix4.Identity();\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, this.cameraViewMatrix);\r\n    }\r\n\r\n    createShader(type, source) {\r\n        let shader = this.gl.createShader(type);\r\n        this.gl.shaderSource(shader, source);\r\n        this.gl.compileShader(shader);\r\n\r\n        // Check for errors\r\n        if(this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            return shader;\r\n        }\r\n\r\n        console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\r\n        this.gl.deleteShader(shader);\r\n    }\r\n\r\n    createProgram(vertexShader, fragmentShader) {\r\n        let program = this.gl.createProgram();\r\n        this.gl.attachShader(program, vertexShader);\r\n        this.gl.attachShader(program, fragmentShader);\r\n        this.gl.linkProgram(program);\r\n\r\n        // Check for errors\r\n        if(this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\r\n            return program;\r\n        }\r\n\r\n        console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\r\n        this.gl.deleteProgram(program);\r\n    }\r\n\r\n    setProjectionMatrix(aspectRatio) {\r\n        // The projection matrix adds 3D perspective (depth) to the graphics\r\n        this.projectionMatrix = Matrix4.Perspective(Math.PI / 5, aspectRatio, 0.1, 10000.0);\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix);\r\n    }\r\n\r\n    setCameraPosition(position) {\r\n        // Link the uniform\r\n        this.gl.uniform3fv(this.cameraPositionUniformLocation, [position.x, position.y, position.z]);\r\n    }\r\n\r\n    setLightPosition(position) {\r\n        // Link the uniform\r\n        this.gl.uniform3fv(this.lightPositionUniformLocation, [position.x, position.y, position.z]);\r\n    }\r\n}\r\n\r\nexport default Shader;"]},"metadata":{},"sourceType":"module"}
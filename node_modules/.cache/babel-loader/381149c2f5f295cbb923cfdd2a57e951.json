{"ast":null,"code":"import FragmentShader from './shaders/FragmentShader';\nimport VertexShader from './shaders/VertexShader';\nimport Matrix4 from './math/Matrix4';\n\nclass Shader {\n  constructor(canvas, vertexShaderFile, fragmentShaderFile) {\n    this.canvas = canvas;\n    this.gl = this.canvas.getContext(\"webgl\"); // Set up the vertex and fragment shaders (glsl)\n\n    let vertexShader = this.createShader(this.gl.VERTEX_SHADER, vertexShaderFile);\n    let fragmentShader = this.createShader(this.gl.FRAGMENT_SHADER, fragmentShaderFile); // Attach shaders to our program\n\n    this.program = this.createProgram(vertexShader, fragmentShader); // Catches additional errors /\n\n    /****(ONLY USED IN TESTING)****/\n\n    this.gl.validateProgram(this.program);\n\n    if (!this.gl.getProgramParameter(this.program, this.gl.VALIDATE_STATUS)) {\n      console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(this.program));\n    }\n    /****(ONLY USED IN TESTING)****/\n    // Tell OpenGL state machine which program should be active\n\n\n    this.gl.useProgram(this.program); // Save locations for communicating with the shader attributes\n\n    this.fetchAttributeLocations();\n    this.fetchUniformLocations();\n  }\n\n  use() {\n    this.gl.useProgram(this.program);\n  }\n\n  fetchAttributeLocations() {\n    //Get attribute location from vertex shader text (glsl)\n    this.positionAttributeLocation = this.gl.getAttribLocation(this.program, \"vertPosition\");\n    this.normalAttributeLocation = this.gl.getAttribLocation(this.program, \"vertNormal\");\n    this.textureAttributeLocation = this.gl.getAttribLocation(this.program, \"vertTexCoord\");\n  }\n\n  fetchUniformLocations() {\n    // Get uniform location from shaders\n    // mat4\n    this.worldViewUniformLocation = this.gl.getUniformLocation(this.program, \"modelView\");\n    this.projectionMatrixUniformLocation = this.gl.getUniformLocation(this.program, \"perspective\"); // vec3\n\n    this.colorUniformLocation = this.gl.getUniformLocation(this.program, \"diffuseColor\");\n    this.timeUniformLocation = this.gl.getUniformLocation(this.program, \"time\"); // The projection matrix adds 3D perspective (depth) to the graphics\n\n    this.projectionMatrix = Matrix4.perspective(Math.PI / 5, this.canvas.width / this.canvas.height, 0.1, 10000.0); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix);\n  }\n\n  createShader(type, source) {\n    let shader = this.gl.createShader(type);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader); // Check for errors\n\n    if (this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n      return shader;\n    }\n\n    console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\n    this.gl.deleteShader(shader);\n  }\n\n  createProgram(vertexShader, fragmentShader) {\n    let program = this.gl.createProgram();\n    this.gl.attachShader(program, vertexShader);\n    this.gl.attachShader(program, fragmentShader);\n    this.gl.linkProgram(program); // Check for errors\n\n    if (this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\n      return program;\n    }\n\n    console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\n    this.gl.deleteProgram(program);\n  }\n\n  setProjectionMatrix(aspectRatio) {\n    // The projection matrix adds 3D perspective (depth) to the graphics\n    this.projectionMatrix = Matrix4.perspective(Math.PI / 5, aspectRatio, 0.1, 10000.0); // Link the uniform with the matrix variable\n\n    this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix);\n  }\n\n  getUniformLocation(uniformName) {\n    return this.gl.getUniformLocation(this.program, uniformName);\n  }\n\n  setUniformVec3f(location, vector) {\n    this.gl.uniform3fv(location, [vector.x, vector.y, vector.z]);\n  }\n\n  setUniformMat4f(location, matrix) {\n    this.gl.uniformMatrix4fv(location, this.gl.FALSE, matrix);\n  }\n\n}\n\nexport default Shader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Shader.js"],"names":["FragmentShader","VertexShader","Matrix4","Shader","constructor","canvas","vertexShaderFile","fragmentShaderFile","gl","getContext","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","validateProgram","getProgramParameter","VALIDATE_STATUS","console","error","getProgramInfoLog","useProgram","fetchAttributeLocations","fetchUniformLocations","use","positionAttributeLocation","getAttribLocation","normalAttributeLocation","textureAttributeLocation","worldViewUniformLocation","getUniformLocation","projectionMatrixUniformLocation","colorUniformLocation","timeUniformLocation","projectionMatrix","perspective","Math","PI","width","height","uniformMatrix4fv","FALSE","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","attachShader","linkProgram","LINK_STATUS","deleteProgram","setProjectionMatrix","aspectRatio","uniformName","setUniformVec3f","location","vector","uniform3fv","x","y","z","setUniformMat4f","matrix"],"mappings":"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","sourcesContent":["import FragmentShader from './shaders/FragmentShader';\r\nimport VertexShader from './shaders/VertexShader';\r\nimport Matrix4 from './math/Matrix4';\r\n\r\nclass Shader {\r\n    constructor(canvas, vertexShaderFile, fragmentShaderFile) {\r\n        this.canvas = canvas;\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // Set up the vertex and fragment shaders (glsl)\r\n        let vertexShader = this.createShader(this.gl.VERTEX_SHADER, vertexShaderFile);\r\n        let fragmentShader = this.createShader(this.gl.FRAGMENT_SHADER, fragmentShaderFile);\r\n\r\n        // Attach shaders to our program\r\n        this.program = this.createProgram(vertexShader, fragmentShader);\r\n\r\n        // Catches additional errors /\r\n        /****(ONLY USED IN TESTING)****/\r\n        this.gl.validateProgram(this.program);\r\n        if(!this.gl.getProgramParameter(this.program, this.gl.VALIDATE_STATUS)) {\r\n            console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(this.program));\r\n        }\r\n        /****(ONLY USED IN TESTING)****/\r\n\r\n        // Tell OpenGL state machine which program should be active\r\n        this.gl.useProgram(this.program);\r\n\r\n        // Save locations for communicating with the shader attributes\r\n        this.fetchAttributeLocations();\r\n        this.fetchUniformLocations();\r\n    }\r\n\r\n    use () {\r\n        this.gl.useProgram(this.program);\r\n    }\r\n\r\n    fetchAttributeLocations() {\r\n        //Get attribute location from vertex shader text (glsl)\r\n        this.positionAttributeLocation = this.gl.getAttribLocation(this.program, \"vertPosition\");\r\n        this.normalAttributeLocation = this.gl.getAttribLocation(this.program, \"vertNormal\");\r\n        this.textureAttributeLocation = this.gl.getAttribLocation(this.program, \"vertTexCoord\");\r\n    }\r\n\r\n    fetchUniformLocations() {\r\n        // Get uniform location from shaders\r\n        // mat4\r\n        this.worldViewUniformLocation = this.gl.getUniformLocation(this.program, \"modelView\");\r\n        this.projectionMatrixUniformLocation = this.gl.getUniformLocation(this.program, \"perspective\");\r\n\r\n        // vec3\r\n        this.colorUniformLocation = this.gl.getUniformLocation(this.program, \"diffuseColor\");\r\n        this.timeUniformLocation = this.gl.getUniformLocation(this.program, \"time\");\r\n\r\n        // The projection matrix adds 3D perspective (depth) to the graphics\r\n        this.projectionMatrix = Matrix4.perspective(Math.PI / 5, this.canvas.width / this.canvas.height, 0.1, 10000.0);\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix);\r\n    }\r\n\r\n    createShader(type, source) {\r\n        let shader = this.gl.createShader(type);\r\n        this.gl.shaderSource(shader, source);\r\n        this.gl.compileShader(shader);\r\n\r\n        // Check for errors\r\n        if(this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            return shader;\r\n        }\r\n\r\n        console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\r\n        this.gl.deleteShader(shader);\r\n    }\r\n\r\n    createProgram(vertexShader, fragmentShader) {\r\n        let program = this.gl.createProgram();\r\n        this.gl.attachShader(program, vertexShader);\r\n        this.gl.attachShader(program, fragmentShader);\r\n        this.gl.linkProgram(program);\r\n\r\n        // Check for errors\r\n        if(this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\r\n            return program;\r\n        }\r\n\r\n        console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\r\n        this.gl.deleteProgram(program);\r\n    }\r\n\r\n    setProjectionMatrix(aspectRatio) {\r\n        // The projection matrix adds 3D perspective (depth) to the graphics\r\n        this.projectionMatrix = Matrix4.perspective(Math.PI / 5, aspectRatio, 0.1, 10000.0);\r\n        // Link the uniform with the matrix variable\r\n        this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, this.projectionMatrix);\r\n    }\r\n\r\n    getUniformLocation(uniformName) {\r\n        return this.gl.getUniformLocation(this.program, uniformName);\r\n    }\r\n\r\n    setUniformVec3f(location, vector) {\r\n        this.gl.uniform3fv(location, [vector.x, vector.y, vector.z]);\r\n    }\r\n\r\n    setUniformMat4f(location, matrix) {\r\n        this.gl.uniformMatrix4fv(location, this.gl.FALSE, matrix);\r\n    }\r\n}\r\n\r\nexport default Shader;"]},"metadata":{},"sourceType":"module"}
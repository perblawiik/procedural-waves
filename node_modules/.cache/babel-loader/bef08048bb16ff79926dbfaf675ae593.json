{"ast":null,"code":"// JS\nimport Shader from './Shader.js';\nimport Time from './Time.js';\n\nclass Engine {\n  constructor(engineWindow) {\n    // Initialize timing variables\n    this.lastTime = 0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.animationId = null;\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0; // Clear previous\n\n      this.ctx.clearRect(0, 0, this.canvas.width, 25); // Draw fps and frame time in milliseconds\n\n      this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\n    } else {\n      ++this.frameCount;\n    }\n  }\n\n  preload() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d');\n    this.ctx.font = \"30px Consolas\";\n    this.ctx.fillStyle = 'white'; // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    }\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to light blue, fully opaque\n\n    this.gl.clearColor(0.0, 0.40, 0.55, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas); //this.SetUpEventListeners();\n  }\n\n  run() {\n    // Keeps track of time passed and delta time\n    Time.Update(); // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Clear screen 2D\n\n    this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height); // Draw objects\n    // Clear depth so that local coordinate axes is visible through models\n    // Draw local coordinate axes UI\n    // Calculate fps\n\n    this.displayFrameRate();\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Engine","constructor","engineWindow","lastTime","frameCount","fps","animationId","displayFrameRate","currentTime","time","ctx","clearRect","canvas","width","fillText","preload","canvas2D","document","getElementById","getContext","font","fillStyle","gl","console","log","alert","viewport","height","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","mainShader","run","Update","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT"],"mappings":"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","sourcesContent":["// JS\r\nimport Shader from './Shader.js';\r\nimport Time from './Time.js';\r\n\r\nclass Engine {\r\n    constructor(engineWindow) {\r\n        // Initialize timing variables\r\n        this.lastTime = 0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.animationId = null;\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n            // Clear previous\r\n            this.ctx.clearRect(0, 0, this.canvas.width, 25);\r\n            // Draw fps and frame time in milliseconds\r\n            this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n    }\r\n\r\n    preload() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n        this.ctx.font = \"30px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to light blue, fully opaque\r\n        this.gl.clearColor(0.0, 0.40, 0.55, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        //this.SetUpEventListeners();\r\n    }\r\n\r\n    run() {\r\n        // Keeps track of time passed and delta time\r\n        Time.Update();\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n        // Clear screen 2D\r\n        this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\r\n\r\n        // Draw objects\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n\r\n        // Draw local coordinate axes UI\r\n\r\n        // Calculate fps\r\n        this.displayFrameRate();\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
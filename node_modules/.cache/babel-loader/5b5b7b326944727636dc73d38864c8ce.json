{"ast":null,"code":"class PhongLightingShader {\n  static get vertex() {\n    return [\"precision highp float;\", \"\", // Attribute locations\n    \"attribute vec3 vertPosition;\", \"attribute vec3 vertNormal;\", \"attribute vec2 vertTexCoord;\", \"\", // Transformation matrices\n    \"uniform mat4 cameraView;\", \"uniform mat4 modelView;\", \"uniform mat4 perspective;\", \"\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"varying vec3 LightDirections[10];\", \"\", \"void main() {\", // Final transformation ( Perspective multiplied with the model view )\n    \"mat4 T = perspective * cameraView * modelView;\", // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\n    \"gl_Position = T * vec4(vertPosition, 1.0);\", \"\", // Fragment shader input variables\n    \"Normal = normalize(mat3(modelView)*vertNormal);\", \"TexCoords = vertTexCoord;\", \"FragPosition = vec3(modelView * vec4(vertPosition, 1.0));\", \"LightDirections[0] = normalize(vec3(0.0, 95.0, -350.0) - FragPosition);\", \"LightDirections[1] = normalize(vec3(375.0, 95.0, -150.0) - FragPosition);\", \"LightDirections[2] = normalize(vec3(-375.0, 95.0, -150.0) - FragPosition);\", \"}\"].join(\"\\n\");\n  }\n\n  static get fragment() {\n    return [// Float precision\n    \"precision highp float;\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"varying vec3 LightDirections[10];\", \"\", \"struct PointLight {\", \"vec3 position;\", \"vec3 color;\", \"float strength;\", \"};\", \"\", // Shader inputs\n    \"uniform vec3 viewPosition;\", // Current camera position\n    \"uniform vec3 diffuseColor;\", // Object surface color\n    \"uniform int lightCount;\", // Number of light sources\n    \"uniform PointLight pointLights[10];\", \"\", \"vec3 computeSpecular(vec3 viewDirection, vec3 reflectDirection, vec3 lightColor) {\", \"float specularStrength = 0.5;\", \"float shininess = 32.0;\", \"float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\", \"return spec * specularStrength * lightColor;\", \"}\", \"\", \"vec3 computeDiffuseSpecular(PointLight pointLight, vec3 lightDirection2) {\", // Compute the vector from the pixel to the light source\n    \"vec3 lightDirection = normalize(pointLight.position - FragPosition);\", // Diffuse lighting\n    \"float diff = max(dot(Normal, lightDirection), 0.0);\", \"vec3 diffuse = (diff * pointLight.color * diffuseColor);\", \"\", // Compute the vector of the reflected light based on the incoming light vector\n    \"vec3 reflectDirection = reflect(-lightDirection, Normal);\", // Compute the vector from the pixel to the camera\n    \"vec3 viewDirection = normalize(viewPosition - FragPosition);\", // Specular lighting\n    \"vec3 specular = computeSpecular(viewDirection, reflectDirection, pointLight.color) * diff;\", \"\", // Calculate the intensity decrement\n    \"float dist = distance(pointLight.position, FragPosition);\", \"float intensity = min(pointLight.strength / dist, 1.0);\", // Phong lighting model\n    \"return (diffuse + specular) * intensity;\", \"}\", \"\", \"void main() {\", // Ambient lighting\n    \"float ambientStrength = 0.05;\", \"vec3 ambientColor = vec3(1.0, 1.0, 1.0);\", \"vec3 ambient = ambientStrength * ambientColor * diffuseColor;\", \"vec3 phong = ambient;\", // Add point light sources\n    \"for(int i = 0; i < 10; i++) {\", \"if (i > lightCount) break;\", \"phong += computeDiffuseSpecular(pointLights[i], LightDirections[i]);\", \"}\", // Final shaded color (texture * lighting)\n    \"gl_FragColor = vec4 (phong, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default PhongLightingShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\PhongLightingShader.js"],"names":["PhongLightingShader","vertex","join","fragment"],"mappings":"AAAA,MAAMA,mBAAN,CAA0B;AACtB,aAAWC,MAAX,GAAqB;AACjB,WAAO,CACH,wBADG,EAEH,EAFG,EAGH;AACA,kCAJG,EAKH,4BALG,EAMH,8BANG,EAOH,EAPG,EAQH;AACA,8BATG,EAUH,yBAVG,EAWH,2BAXG,EAYH,EAZG,EAaH;AACA,6BAdG,EAeH,sBAfG,EAgBH,4BAhBG,EAiBH,mCAjBG,EAkBH,EAlBG,EAmBH,eAnBG,EAoBC;AACA,oDArBD,EAsBC;AACA,gDAvBD,EAwBC,EAxBD,EAyBC;AACA,qDA1BD,EA2BC,2BA3BD,EA4BC,2DA5BD,EA6BC,yEA7BD,EA8BC,2EA9BD,EA+BC,4EA/BD,EAgCH,GAhCG,EAiCLC,IAjCK,CAiCA,IAjCA,CAAP;AAkCH;;AAED,aAAWC,QAAX,GAAuB;AACnB,WAAO,CACH;AACA,4BAFG,EAGH;AACA,6BAJG,EAKH,sBALG,EAMH,4BANG,EAOH,mCAPG,EAQH,EARG,EASH,qBATG,EAUC,gBAVD,EAWC,aAXD,EAYC,iBAZD,EAaH,IAbG,EAcH,EAdG,EAeH;AACA,gCAhBG,EAgB2B;AAC9B,gCAjBG,EAiB2B;AAC9B,6BAlBG,EAkBwB;AAC3B,yCAnBG,EAoBH,EApBG,EAqBH,oFArBG,EAsBC,+BAtBD,EAuBC,yBAvBD,EAwBC,8EAxBD,EAyBC,8CAzBD,EA0BH,GA1BG,EA2BH,EA3BG,EA4BH,4EA5BG,EA6BC;AACA,0EA9BD,EA+BC;AACA,yDAhCD,EAiCC,0DAjCD,EAkCC,EAlCD,EAmCC;AACA,+DApCD,EAqCC;AACA,kEAtCD,EAuCC;AACA,gGAxCD,EAyCC,EAzCD,EA0CC;AACA,+DA3CD,EA4CC,yDA5CD,EA6CC;AACA,8CA9CD,EA+CH,GA/CG,EAgDH,EAhDG,EAiDH,eAjDG,EAkDC;AACA,mCAnDD,EAoDC,0CApDD,EAqDC,+DArDD,EAsDC,uBAtDD,EAuDC;AACA,mCAxDD,EAyDK,4BAzDL,EA0DK,sEA1DL,EA2DC,GA3DD,EA4DC;AACA,uCA7DD,EA8DH,GA9DG,EA+DLD,IA/DK,CA+DA,IA/DA,CAAP;AAgEH;;AAvGqB;;AA0G1B,eAAeF,mBAAf","sourcesContent":["class PhongLightingShader {\r\n    static get vertex () {\r\n        return [\r\n            \"precision highp float;\",\r\n            \"\",\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n            \"\",\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n            \"\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"varying vec3 LightDirections[10];\",\r\n            \"\",\r\n            \"void main() {\",\r\n                // Final transformation ( Perspective multiplied with the model view )\r\n                \"mat4 T = perspective * cameraView * modelView;\",\r\n                // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\r\n                \"gl_Position = T * vec4(vertPosition, 1.0);\",\r\n                \"\",\r\n                // Fragment shader input variables\r\n                \"Normal = normalize(mat3(modelView)*vertNormal);\",\r\n                \"TexCoords = vertTexCoord;\",\r\n                \"FragPosition = vec3(modelView * vec4(vertPosition, 1.0));\",\r\n                \"LightDirections[0] = normalize(vec3(0.0, 95.0, -350.0) - FragPosition);\",\r\n                \"LightDirections[1] = normalize(vec3(375.0, 95.0, -150.0) - FragPosition);\",\r\n                \"LightDirections[2] = normalize(vec3(-375.0, 95.0, -150.0) - FragPosition);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    static get fragment () {\r\n        return [\r\n            // Float precision\r\n            \"precision highp float;\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"varying vec3 LightDirections[10];\",\r\n            \"\",\r\n            \"struct PointLight {\",\r\n                \"vec3 position;\",\r\n                \"vec3 color;\",\r\n                \"float strength;\",\r\n            \"};\",\r\n            \"\",\r\n            // Shader inputs\r\n            \"uniform vec3 viewPosition;\", // Current camera position\r\n            \"uniform vec3 diffuseColor;\", // Object surface color\r\n            \"uniform int lightCount;\", // Number of light sources\r\n            \"uniform PointLight pointLights[10];\",\r\n            \"\",\r\n            \"vec3 computeSpecular(vec3 viewDirection, vec3 reflectDirection, vec3 lightColor) {\",\r\n                \"float specularStrength = 0.5;\",\r\n                \"float shininess = 32.0;\",\r\n                \"float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\",\r\n                \"return spec * specularStrength * lightColor;\",\r\n            \"}\",\r\n            \"\",\r\n            \"vec3 computeDiffuseSpecular(PointLight pointLight, vec3 lightDirection2) {\",\r\n                // Compute the vector from the pixel to the light source\r\n                \"vec3 lightDirection = normalize(pointLight.position - FragPosition);\",\r\n                // Diffuse lighting\r\n                \"float diff = max(dot(Normal, lightDirection), 0.0);\",\r\n                \"vec3 diffuse = (diff * pointLight.color * diffuseColor);\",\r\n                \"\",\r\n                // Compute the vector of the reflected light based on the incoming light vector\r\n                \"vec3 reflectDirection = reflect(-lightDirection, Normal);\",\r\n                // Compute the vector from the pixel to the camera\r\n                \"vec3 viewDirection = normalize(viewPosition - FragPosition);\",\r\n                // Specular lighting\r\n                \"vec3 specular = computeSpecular(viewDirection, reflectDirection, pointLight.color) * diff;\",\r\n                \"\",\r\n                // Calculate the intensity decrement\r\n                \"float dist = distance(pointLight.position, FragPosition);\",\r\n                \"float intensity = min(pointLight.strength / dist, 1.0);\",\r\n                // Phong lighting model\r\n                \"return (diffuse + specular) * intensity;\",\r\n            \"}\",\r\n            \"\",\r\n            \"void main() {\",\r\n                // Ambient lighting\r\n                \"float ambientStrength = 0.05;\",\r\n                \"vec3 ambientColor = vec3(1.0, 1.0, 1.0);\",\r\n                \"vec3 ambient = ambientStrength * ambientColor * diffuseColor;\",\r\n                \"vec3 phong = ambient;\",\r\n                // Add point light sources\r\n                \"for(int i = 0; i < 10; i++) {\",\r\n                    \"if (i > lightCount) break;\",\r\n                    \"phong += computeDiffuseSpecular(pointLights[i], LightDirections[i]);\",\r\n                \"}\",\r\n                // Final shaded color (texture * lighting)\r\n                \"gl_FragColor = vec4 (phong, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default PhongLightingShader;"]},"metadata":{},"sourceType":"module"}
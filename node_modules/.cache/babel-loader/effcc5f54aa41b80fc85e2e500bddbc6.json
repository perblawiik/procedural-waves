{"ast":null,"code":"import Transform from './Transform';\n\nclass CubeUI {\n  constructor(shader) {\n    this.shader = shader;\n    this.gl = shader.gl;\n    this.positionAttributeLocation = shader.positionAttributeLocation;\n    this.normalAttributeLocation = shader.normalAttributeLocation;\n    this.colorUniformLocation = shader.colorUniformLocation;\n    this.matrixUniformLocation = shader.worldViewUniformLocation;\n    this.totalVertices = 0;\n    this.color = [1.0, 1.0, 0.0];\n    this.transform = new Transform();\n    this.isVisible = false;\n    this.createCube();\n  }\n\n  setParentTransform(parentTransform) {\n    this.transform.setParent(parentTransform);\n  }\n\n  setVisible(flag) {\n    this.isVisible = flag;\n  }\n\n  render() {\n    if (this.isVisible) {\n      this.BindBuffersAndEnableAttributes();\n      this.gl.uniformMatrix4fv(this.matrixUniformLocation, this.gl.FALSE, this.transform.matrix);\n      this.gl.uniform3fv(this.colorUniformLocation, this.color);\n      this.gl.drawElements(this.gl.LINE_STRIP, this.totalVertices, this.gl.UNSIGNED_SHORT, 0); // Unbind\n\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n      this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n    }\n  }\n\n  BindBuffersAndEnableAttributes() {\n    // Vertex buffer\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer); // Enable vertex attribute\n\n    this.gl.vertexAttribPointer(this.positionAttributeLocation, // Attribute location\n    3, // Number of elements per iteration (x,y,z)\n    this.gl.FLOAT, // Type of elements (32bit floats)\n    this.gl.FALSE, // Don't normalize the data\n    6 * Float32Array.BYTES_PER_ELEMENT, // how many bytes to move to the next vertex\n    0 // Offset from the beginning of a single vertex to this attribute\n    );\n    this.gl.enableVertexAttribArray(this.positionAttributeLocation); // Enable normal attribute\n\n    this.gl.vertexAttribPointer(this.normalAttributeLocation, // Attribute location\n    3, // Number of elements per iteration (x,y,z)\n    this.gl.FLOAT, // Type of elements (32bit floats)\n    this.gl.TRUE, // Not normalized\n    6 * Float32Array.BYTES_PER_ELEMENT, // how many bytes to move to the next normal\n    3 * Float32Array.BYTES_PER_ELEMENT // Offset from the beginning of a single vertex to this attribute\n    );\n    this.gl.enableVertexAttribArray(this.normalAttributeLocation); // Index buffer\n\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n  }\n\n  CreateCube() {\n    let vertexArray = [// V0\n    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0 // V1\n    - 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, // V2\n    1.0, -1.0, 1.0, 1.0, -1.0, 1.0, // V3\n    1.0, -1.0, -1.0, 1.0, -1.0, -1.0, // V4\n    -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, // V5\n    -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, // V6\n    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, // V7\n    1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0];\n    let indexArray = [0, 1, 5, 4, 0, 3, 7, 4, 7, 6, 2, 3, 2, 1, 5, 6];\n    this.totalVertices = indexArray.length; // Create vertex and normal buffer\n\n    this.vertexBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertexArray), this.gl.STATIC_DRAW); // Create index buffer\n\n    this.indexBuffer = this.gl.createBuffer();\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexArray), this.gl.STATIC_DRAW); // Unbind buffers\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n  }\n\n}\n\nexport default CubeUI;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\CubeUI.js"],"names":["Transform","CubeUI","constructor","shader","gl","positionAttributeLocation","normalAttributeLocation","colorUniformLocation","matrixUniformLocation","worldViewUniformLocation","totalVertices","color","transform","isVisible","createCube","setParentTransform","parentTransform","setParent","setVisible","flag","render","BindBuffersAndEnableAttributes","uniformMatrix4fv","FALSE","matrix","uniform3fv","drawElements","LINE_STRIP","UNSIGNED_SHORT","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","FLOAT","Float32Array","BYTES_PER_ELEMENT","enableVertexAttribArray","TRUE","indexBuffer","CreateCube","vertexArray","indexArray","length","createBuffer","bufferData","STATIC_DRAW","Uint16Array"],"mappings":"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","sourcesContent":["\r\nimport Transform from './Transform';\r\n\r\nclass CubeUI {\r\n\r\n    constructor(shader) {\r\n        this.shader = shader;\r\n        this.gl = shader.gl;\r\n        this.positionAttributeLocation = shader.positionAttributeLocation;\r\n        this.normalAttributeLocation = shader.normalAttributeLocation;\r\n        this.colorUniformLocation = shader.colorUniformLocation;\r\n        this.matrixUniformLocation = shader.worldViewUniformLocation;\r\n\r\n        this.totalVertices = 0;\r\n        this.color = [1.0, 1.0, 0.0];\r\n\r\n        this.transform = new Transform();\r\n\r\n        this.isVisible = false;\r\n\r\n        this.createCube();\r\n    }\r\n\r\n    setParentTransform(parentTransform) {\r\n\r\n        this.transform.setParent(parentTransform);\r\n    }\r\n\r\n    setVisible(flag) {\r\n        this.isVisible = flag;\r\n    }\r\n\r\n    render() {\r\n\r\n        if (this.isVisible) {\r\n\r\n            this.BindBuffersAndEnableAttributes();\r\n            this.gl.uniformMatrix4fv(this.matrixUniformLocation, this.gl.FALSE, this.transform.matrix);\r\n            this.gl.uniform3fv(this.colorUniformLocation, this.color);\r\n            this.gl.drawElements(this.gl.LINE_STRIP, this.totalVertices, this.gl.UNSIGNED_SHORT, 0);\r\n\r\n            // Unbind\r\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n        }\r\n    }\r\n\r\n    BindBuffersAndEnableAttributes() {\r\n\r\n        // Vertex buffer\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        // Enable vertex attribute\r\n        this.gl.vertexAttribPointer(\r\n            this.positionAttributeLocation, // Attribute location\r\n            3, // Number of elements per iteration (x,y,z)\r\n            this.gl.FLOAT, // Type of elements (32bit floats)\r\n            this.gl.FALSE, // Don't normalize the data\r\n            6 * Float32Array.BYTES_PER_ELEMENT, // how many bytes to move to the next vertex\r\n            0// Offset from the beginning of a single vertex to this attribute\r\n        );\r\n        this.gl.enableVertexAttribArray(this.positionAttributeLocation);\r\n\r\n        // Enable normal attribute\r\n        this.gl.vertexAttribPointer(\r\n            this.normalAttributeLocation, // Attribute location\r\n            3, // Number of elements per iteration (x,y,z)\r\n            this.gl.FLOAT, // Type of elements (32bit floats)\r\n            this.gl.TRUE, // Not normalized\r\n            6 * Float32Array.BYTES_PER_ELEMENT, // how many bytes to move to the next normal\r\n            3 * Float32Array.BYTES_PER_ELEMENT// Offset from the beginning of a single vertex to this attribute\r\n        );\r\n        this.gl.enableVertexAttribArray(this.normalAttributeLocation);\r\n\r\n        // Index buffer\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n    }\r\n\r\n    CreateCube() {\r\n\r\n        let vertexArray = [\r\n            // V0\r\n            -1.0, -1.0, -1.0,       -1.0, -1.0, -1.0\r\n            // V1\r\n            -1.0, -1.0, 1.0,        -1.0, -1.0, 1.0,\r\n            // V2\r\n            1.0, -1.0, 1.0,         1.0, -1.0, 1.0,\r\n            // V3\r\n            1.0, -1.0, -1.0,        1.0, -1.0, -1.0,\r\n            // V4\r\n            -1.0, 1.0, -1.0,        -1.0, 1.0, -1.0,\r\n            // V5\r\n            -1.0, 1.0, 1.0,         -1.0, 1.0, 1.0,\r\n            // V6\r\n            1.0, 1.0, 1.0,          1.0, 1.0, 1.0,\r\n            // V7\r\n            1.0, 1.0, -1.0,         1.0, 1.0, -1.0,\r\n            1.0, 1.0, -1.0,         1.0, 1.0, -1.0\r\n        ];\r\n\r\n        let indexArray = [\r\n            0, 1, 5, 4,\r\n            0, 3, 7, 4,\r\n            7, 6, 2, 3,\r\n            2, 1, 5, 6\r\n        ];\r\n\r\n        this.totalVertices = indexArray.length;\r\n\r\n        // Create vertex and normal buffer\r\n        this.vertexBuffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertexArray), this.gl.STATIC_DRAW);\r\n\r\n        // Create index buffer\r\n        this.indexBuffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexArray), this.gl.STATIC_DRAW);\r\n\r\n        // Unbind buffers\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n}\r\n\r\nexport default CubeUI;"]},"metadata":{},"sourceType":"module"}
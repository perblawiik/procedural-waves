{"ast":null,"code":"// JavaScript\nimport Transform from './Transform';\nimport Vector3 from './math/Vector3';\n\nclass Camera {\n  constructor(gl, uniformLocation) {\n    this.gl = gl;\n    this.cameraViewUniformLocation = uniformLocation;\n    this.transform = new Transform();\n  }\n\n  Translate(val) {\n    let rightVec = new Vector3([this.transform.matrix[0] * val[0], this.transform.matrix[4] * val[0], this.transform.matrix[8] * val[0]]);\n    let upVec = new Vector3([this.transform.matrix[1] * val[1], this.transform.matrix[5] * val[1], this.transform.matrix[9] * val[1]]);\n    let forwardVec = new Vector3([this.transform.matrix[2] * val[2], this.transform.matrix[6] * val[2], this.transform.matrix[10] * val[2]]);\n    this.SetPosition([this.transform.position.x + rightVec.x + upVec.x + forwardVec.x, this.transform.position.y + rightVec.y + upVec.y + forwardVec.y, this.transform.position.z + rightVec.z + upVec.z + forwardVec.z]);\n  }\n\n  Rotate(rot) {\n    this.SetRotation([this.transform.rotation.x + rot[0], this.transform.rotation.y + rot[1], this.transform.rotation.z + rot[2]]);\n  }\n\n  SetPosition(cameraPosition) {\n    this.transform.SetPosition(cameraPosition);\n    this.UpdateUniformMatrix();\n  }\n\n  SetRotation(cameraRotation) {\n    this.transform.SetRotation(cameraRotation);\n    this.UpdateUniformMatrix();\n  }\n\n  RotateX(angle) {\n    this.SetRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\n  }\n\n  RotateY(angle) {\n    this.SetRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\n  }\n\n  UpdateUniformMatrix() {\n    // Update shader matrix\n    this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, this.transform.Inverted());\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Camera.js"],"names":["Transform","Vector3","Camera","constructor","gl","uniformLocation","cameraViewUniformLocation","transform","Translate","val","rightVec","matrix","upVec","forwardVec","SetPosition","position","x","y","z","Rotate","rot","SetRotation","rotation","cameraPosition","UpdateUniformMatrix","cameraRotation","RotateX","angle","RotateY","uniformMatrix4fv","FALSE","Inverted"],"mappings":"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","sourcesContent":["// JavaScript\r\nimport Transform from './Transform';\r\nimport Vector3 from './math/Vector3';\r\n\r\nclass Camera {\r\n    constructor(gl, uniformLocation) {\r\n        this.gl = gl;\r\n        this.cameraViewUniformLocation = uniformLocation;\r\n\r\n        this.transform = new Transform();\r\n    }\r\n\r\n    Translate (val) {\r\n        let rightVec = new Vector3([this.transform.matrix[0]*val[0], this.transform.matrix[4]*val[0], this.transform.matrix[8]*val[0]]);\r\n        let upVec = new Vector3([this.transform.matrix[1]*val[1], this.transform.matrix[5]*val[1], this.transform.matrix[9]*val[1]]);\r\n        let forwardVec = new Vector3([this.transform.matrix[2]*val[2], this.transform.matrix[6]*val[2], this.transform.matrix[10]*val[2]]);\r\n\r\n        this.SetPosition([\r\n            this.transform.position.x + rightVec.x + upVec.x + forwardVec.x,\r\n            this.transform.position.y + rightVec.y + upVec.y + forwardVec.y,\r\n            this.transform.position.z + rightVec.z + upVec.z + forwardVec.z,\r\n        ]);\r\n    }\r\n\r\n    Rotate (rot) {\r\n        this.SetRotation([\r\n            this.transform.rotation.x + rot[0],\r\n            this.transform.rotation.y + rot[1],\r\n            this.transform.rotation.z + rot[2]\r\n        ]);\r\n    }\r\n\r\n    SetPosition(cameraPosition) {\r\n        this.transform.SetPosition(cameraPosition);\r\n        this.UpdateUniformMatrix();\r\n    }\r\n\r\n    SetRotation(cameraRotation) {\r\n        this.transform.SetRotation(cameraRotation);\r\n        this.UpdateUniformMatrix();\r\n    }\r\n\r\n    RotateX (angle) {\r\n        this.SetRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\r\n    }\r\n\r\n    RotateY (angle) {\r\n        this.SetRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\r\n    }\r\n\r\n    UpdateUniformMatrix () {\r\n        // Update shader matrix\r\n        this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, this.transform.Inverted());\r\n    }\r\n}\r\n\r\nexport default Camera;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Vector3 from './Vector3';\n\nclass Matrix4 {\n  // Returns an identity matrix\n  static Identity() {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  } // Returns a translation matrix\n\n\n  static Translation(tX, tY, tZ) {\n    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tX, tY, tZ, 1];\n  } // Returns a scaling matrix\n\n\n  static Scaling(xScale, yScale, zScale) {\n    return [xScale, 0, 0, 0, 0, yScale, 0, 0, 0, 0, zScale, 0, 0, 0, 0, 1];\n  }\n\n  static Compose(xVec, yVec, zVec, posVec = new Vector3([0.0, 0.0, 0.0])) {\n    return [xVec.x, yVec.x, zVec.x, 0, xVec.y, yVec.y, zVec.y, 0, xVec.z, yVec.z, zVec.z, 0, posVec.x, posVec.y, posVec.z, 1];\n  } // Returns a rotation matrix for the x-axis\n\n\n  static RotationX(rad) {\n    let sin = Math.sin(rad);\n    let cos = Math.cos(rad);\n    return [1, 0, 0, 0, 0, cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1];\n  } // Returns a rotation matrix for the y-axis\n\n\n  static RotationY(rad) {\n    let sin = Math.sin(rad);\n    let cos = Math.cos(rad);\n    return [cos, 0, -sin, 0, 0, 1, 0, 0, sin, 0, cos, 0, 0, 0, 0, 1];\n  } // Returns a rotation matrix for the z-axis\n\n\n  static RotationZ(rad) {\n    let sin = Math.sin(rad);\n    let cos = Math.cos(rad);\n    return [cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n  } // Returns a perspective matrix\n\n\n  static Perspective(fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    return [f / aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (far + near) * nf, -1, 0, 0, 2 * far * near * nf, 0];\n  }\n  /**\r\n   * Generates a orthogonal projection matrix with the given bounds\r\n   *\r\n   * @param {mat4} out mat4 frustum matrix will be written into\r\n   * @param {number} left Left bound of the frustum\r\n   * @param {number} right Right bound of the frustum\r\n   * @param {number} bottom Bottom bound of the frustum\r\n   * @param {number} top Top bound of the frustum\r\n   * @param {number} near Near bound of the frustum\r\n   * @param {number} far Far bound of the frustum\r\n   * @returns {mat4} out\r\n   */\n\n\n  static Orthogonal(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n  } // Translates a given matrix with given coordinates and returns the matrix combination\n\n\n  static Translate(matrix, tX, tY, tZ) {\n    return this.Multiply(this.Translation(tX, tY, tZ), matrix);\n  } // Scales a given matrix with given dimensions and returns the matrix combination\n\n\n  static Scale(matrix, sX, sY, sZ) {\n    return this.Multiply(this.Scaling(sX, sY, sZ), matrix);\n  } // Rotates a given matrix with given angle in radians and returns the matrix combination\n\n\n  static RotateX(matrix, rad) {\n    return this.Multiply(this.RotationX(rad), matrix);\n  } // Rotates a given matrix with given angle in radians and returns the matrix combination\n\n\n  static RotateY(matrix, rad) {\n    return this.Multiply(this.RotationY(rad), matrix);\n  } // Rotates a given matrix with given angle in radians and returns the matrix combination\n\n\n  static RotateZ(matrix, rad) {\n    return this.Multiply(this.RotationZ(rad), matrix);\n  } // Multiplies a given 4x4-matrix with given 4x1 vector and returns 4x1 vector\n\n\n  static MultiplyVector(m, v) {\n    let out = [];\n    out[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\n    out[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\n    out[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\n    out[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\n    return out;\n  } // Performs a matrix multiplication with two given matrices and returns the matrix combination\n\n\n  static Multiply(a, b) {\n    let out = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let index = 0;\n    let i = 0;\n\n    while (i < 16) {\n      // Each column\n      for (let k = 0; k < 4; ++k) {\n        out[index] = a[k] * b[i] + a[k + 4] * b[i + 1] + a[k + 8] * b[i + 2] + a[k + 12] * b[i + 3];\n        ++index;\n      }\n\n      i = i + 4; // Jump to next row (go pass 4 indexes)\n    }\n\n    return out;\n  } // Inverts a given matrix and returns the matrix combination\n\n\n  static Invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n\n    det = 1.0 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n    return out;\n  }\n  /**\r\n   * Rotates a mat4 by the given angle around the given axis\r\n   *\r\n   * @param {mat4} out the receiving matrix\r\n   * @param {mat4} a the matrix to rotate\r\n   * @param {Number} rad the angle to rotate the matrix by\r\n   * @param {Vector3} axis the axis to rotate around\r\n   * @returns {mat4} out\r\n   */\n\n\n  static Rotate(out, a, rad, axis) {\n    let x = axis.x,\n        y = axis.y,\n        z = axis.z;\n    let len = Math.sqrt(x * x + y * y + z * z);\n    let s = void 0,\n        c = void 0,\n        t = void 0;\n    let a00 = void 0,\n        a01 = void 0,\n        a02 = void 0,\n        a03 = void 0;\n    let a10 = void 0,\n        a11 = void 0,\n        a12 = void 0,\n        a13 = void 0;\n    let a20 = void 0,\n        a21 = void 0,\n        a22 = void 0,\n        a23 = void 0;\n    let b00 = void 0,\n        b01 = void 0,\n        b02 = void 0;\n    let b10 = void 0,\n        b11 = void 0,\n        b12 = void 0;\n    let b20 = void 0,\n        b21 = void 0,\n        b22 = void 0;\n\n    if (Math.abs(len) < 0.001) {\n      return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11]; // Construct the elements of the rotation matrix\n\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n      // If the source and destination differ, copy the unchanged last row\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    return out;\n  }\n  /**\r\n   * Generates a look-at matrix with the given eye position, focal point, and up axis\r\n   *\r\n   * @param {mat4} out mat4 frustum matrix will be written into\r\n   * @param {vec3} eye - Position of the viewer\r\n   * @param {vec3} center - Point the viewer is looking at\r\n   * @param {vec3} up vec3 - pointing up\r\n   * @returns {mat4} out\r\n   */\n\n\n  static LookAt(out, eye, center, up) {\n    let x0 = void 0,\n        x1 = void 0,\n        x2 = void 0,\n        y0 = void 0,\n        y1 = void 0,\n        y2 = void 0,\n        z0 = void 0,\n        z1 = void 0,\n        z2 = void 0,\n        len = void 0;\n    let eyex = eye[0];\n    let eyey = eye[1];\n    let eyez = eye[2];\n    let upx = up[0];\n    let upy = up[1];\n    let upz = up[2];\n    let centerx = center[0];\n    let centery = center[1];\n    let centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < 0.01 && Math.abs(eyey - centery) < 0.01 && Math.abs(eyez - centerz) < 0.01) {\n      return this.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n    if (!len) {\n      x0 = 0;\n      x1 = 0;\n      x2 = 0;\n    } else {\n      len = 1 / len;\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n    if (!len) {\n      y0 = 0;\n      y1 = 0;\n      y2 = 0;\n    } else {\n      len = 1 / len;\n      y0 *= len;\n      y1 *= len;\n      y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n    return out;\n  }\n\n}\n\nexport default Matrix4;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\math\\Matrix4.js"],"names":["Vector3","Matrix4","Identity","Translation","tX","tY","tZ","Scaling","xScale","yScale","zScale","Compose","xVec","yVec","zVec","posVec","x","y","z","RotationX","rad","sin","Math","cos","RotationY","RotationZ","Perspective","fovy","aspect","near","far","f","tan","nf","Orthogonal","out","left","right","bottom","top","lr","bt","Translate","matrix","Multiply","Scale","sX","sY","sZ","RotateX","RotateY","RotateZ","MultiplyVector","m","v","a","b","index","i","k","Invert","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","Rotate","axis","len","sqrt","s","c","t","b12","b20","b21","b22","abs","LookAt","eye","center","up","x0","x1","x2","y0","y1","y2","z0","z1","z2","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","identity"],"mappings":"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","sourcesContent":["import Vector3 from './Vector3';\r\n\r\nclass Matrix4 {\r\n    // Returns an identity matrix\r\n    static Identity () {\r\n        return [\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a translation matrix\r\n    static Translation (tX, tY, tZ) {\r\n\r\n        return [\r\n            1,  0,  0,  0,\r\n            0,  1,  0,  0,\r\n            0,  0,  1,  0,\r\n            tX, tY, tZ, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a scaling matrix\r\n    static Scaling (xScale, yScale, zScale) {\r\n\r\n        return [\r\n            xScale, 0,      0,      0,\r\n            0,      yScale, 0,      0,\r\n            0,      0,      zScale, 0,\r\n            0,      0,      0,      1\r\n        ];\r\n    }\r\n\r\n    static Compose (xVec, yVec, zVec, posVec = new Vector3([0.0, 0.0, 0.0])) {\r\n\r\n        return [\r\n            xVec.x,    yVec.x,   zVec.x,   0,\r\n            xVec.y,    yVec.y,   zVec.y,   0,\r\n            xVec.z,    yVec.z,   zVec.z,   0,\r\n            posVec.x, posVec.y, posVec.z,  1,\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the x-axis\r\n    static RotationX (rad) {\r\n\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            1,  0,   0,   0,\r\n            0,  cos, sin, 0,\r\n            0, -sin, cos, 0,\r\n            0,  0,   0,   1\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the y-axis\r\n    static RotationY (rad) {\r\n\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            cos, 0, -sin, 0,\r\n            0,   1,  0,   0,\r\n            sin, 0,  cos, 0,\r\n            0,   0,  0,   1\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the z-axis\r\n    static RotationZ (rad) {\r\n\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            cos, sin, 0, 0,\r\n            -sin, cos, 0, 0,\r\n            0,   0,   1, 0,\r\n            0,   0,   0, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a perspective matrix\r\n    static Perspective (fovy, aspect, near, far) {\r\n\r\n        let f = 1.0 / Math.tan(fovy/2);\r\n        let nf = 1 / (near-far);\r\n\r\n        return [\r\n            f/aspect, 0, 0,              0,\r\n            0,        f, 0,              0,\r\n            0,        0, (far+near)*nf, -1,\r\n            0,        0, 2*far*near*nf,  0\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Generates a orthogonal projection matrix with the given bounds\r\n     *\r\n     * @param {mat4} out mat4 frustum matrix will be written into\r\n     * @param {number} left Left bound of the frustum\r\n     * @param {number} right Right bound of the frustum\r\n     * @param {number} bottom Bottom bound of the frustum\r\n     * @param {number} top Top bound of the frustum\r\n     * @param {number} near Near bound of the frustum\r\n     * @param {number} far Far bound of the frustum\r\n     * @returns {mat4} out\r\n     */\r\n    static Orthogonal (out, left, right, bottom, top, near, far) {\r\n        let lr = 1 / (left - right);\r\n        let bt = 1 / (bottom - top);\r\n        let nf = 1 / (near - far);\r\n        out[0] = -2 * lr;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 0;\r\n        out[5] = -2 * bt;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 0;\r\n        out[9] = 0;\r\n        out[10] = 2 * nf;\r\n        out[11] = 0;\r\n        out[12] = (left + right) * lr;\r\n        out[13] = (top + bottom) * bt;\r\n        out[14] = (far + near) * nf;\r\n        out[15] = 1;\r\n        return out;\r\n    }\r\n\r\n    // Translates a given matrix with given coordinates and returns the matrix combination\r\n    static Translate (matrix, tX, tY, tZ) {\r\n\r\n        return this.Multiply(this.Translation(tX, tY, tZ), matrix);\r\n    }\r\n\r\n    // Scales a given matrix with given dimensions and returns the matrix combination\r\n    static Scale (matrix, sX, sY, sZ) {\r\n\r\n        return this.Multiply(this.Scaling(sX, sY, sZ), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static RotateX (matrix, rad) {\r\n\r\n        return this.Multiply(this.RotationX(rad), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static RotateY (matrix, rad) {\r\n\r\n        return this.Multiply(this.RotationY(rad), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static RotateZ (matrix, rad) {\r\n\r\n        return this.Multiply(this.RotationZ(rad), matrix);\r\n    }\r\n\r\n    // Multiplies a given 4x4-matrix with given 4x1 vector and returns 4x1 vector\r\n    static MultiplyVector (m, v) {\r\n\r\n        let out = [];\r\n        out[0] = m[0]*v[0] + m[4]*v[1] + m[8]*v[2]  + m[12]*v[3];\r\n        out[1] = m[1]*v[0] + m[5]*v[1] + m[9]*v[2]  + m[13]*v[3];\r\n        out[2] = m[2]*v[0] + m[6]*v[1] + m[10]*v[2] + m[14]*v[3];\r\n        out[3] = m[3]*v[0] + m[7]*v[1] + m[11]*v[2] + m[15]*v[3];\r\n        return out;\r\n    }\r\n\r\n    // Performs a matrix multiplication with two given matrices and returns the matrix combination\r\n    static Multiply (a, b) {\r\n\r\n        let out =\r\n            [\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0\r\n            ];\r\n        let index = 0;\r\n        let i = 0;\r\n\r\n        while (i < 16) {\r\n            // Each column\r\n            for (let k = 0; k < 4; ++k) {\r\n                out[index] = (a[k]*b[i]) + (a[k+4]*b[i+1]) + (a[k+8]*b[i+2]) + (a[k+12]*b[i+3]);\r\n                ++index;\r\n            }\r\n            i = i + 4; // Jump to next row (go pass 4 indexes)\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    // Inverts a given matrix and returns the matrix combination\r\n    static Invert (out, a) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7];\r\n        let a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11];\r\n        let a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a mat4 by the given angle around the given axis\r\n     *\r\n     * @param {mat4} out the receiving matrix\r\n     * @param {mat4} a the matrix to rotate\r\n     * @param {Number} rad the angle to rotate the matrix by\r\n     * @param {Vector3} axis the axis to rotate around\r\n     * @returns {mat4} out\r\n     */\r\n    static Rotate (out, a, rad, axis) {\r\n        let x = axis.x,\r\n            y = axis.y,\r\n            z = axis.z;\r\n        let len = Math.sqrt(x * x + y * y + z * z);\r\n        let s = void 0,\r\n            c = void 0,\r\n            t = void 0;\r\n        let a00 = void 0,\r\n            a01 = void 0,\r\n            a02 = void 0,\r\n            a03 = void 0;\r\n        let a10 = void 0,\r\n            a11 = void 0,\r\n            a12 = void 0,\r\n            a13 = void 0;\r\n        let a20 = void 0,\r\n            a21 = void 0,\r\n            a22 = void 0,\r\n            a23 = void 0;\r\n        let b00 = void 0,\r\n            b01 = void 0,\r\n            b02 = void 0;\r\n        let b10 = void 0,\r\n            b11 = void 0,\r\n            b12 = void 0;\r\n        let b20 = void 0,\r\n            b21 = void 0,\r\n            b22 = void 0;\r\n\r\n        if (Math.abs(len) < 0.001) {\r\n            return null;\r\n        }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n        a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n        a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n        // Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        // Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n        if (a !== out) {\r\n            // If the source and destination differ, copy the unchanged last row\r\n            out[12] = a[12];\r\n            out[13] = a[13];\r\n            out[14] = a[14];\r\n            out[15] = a[15];\r\n        }\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Generates a look-at matrix with the given eye position, focal point, and up axis\r\n     *\r\n     * @param {mat4} out mat4 frustum matrix will be written into\r\n     * @param {vec3} eye - Position of the viewer\r\n     * @param {vec3} center - Point the viewer is looking at\r\n     * @param {vec3} up vec3 - pointing up\r\n     * @returns {mat4} out\r\n     */\r\n    static LookAt(out, eye, center, up) {\r\n        let x0 = void 0,\r\n            x1 = void 0,\r\n            x2 = void 0,\r\n            y0 = void 0,\r\n            y1 = void 0,\r\n            y2 = void 0,\r\n            z0 = void 0,\r\n            z1 = void 0,\r\n            z2 = void 0,\r\n            len = void 0;\r\n        let eyex = eye[0];\r\n        let eyey = eye[1];\r\n        let eyez = eye[2];\r\n        let upx = up[0];\r\n        let upy = up[1];\r\n        let upz = up[2];\r\n        let centerx = center[0];\r\n        let centery = center[1];\r\n        let centerz = center[2];\r\n\r\n        if (Math.abs(eyex - centerx) < 0.01 && Math.abs(eyey - centery) < 0.01 && Math.abs(eyez - centerz) < 0.01) {\r\n            return this.identity(out);\r\n        }\r\n\r\n        z0 = eyex - centerx;\r\n        z1 = eyey - centery;\r\n        z2 = eyez - centerz;\r\n\r\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n        z0 *= len;\r\n        z1 *= len;\r\n        z2 *= len;\r\n\r\n        x0 = upy * z2 - upz * z1;\r\n        x1 = upz * z0 - upx * z2;\r\n        x2 = upx * z1 - upy * z0;\r\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n        if (!len) {\r\n            x0 = 0;\r\n            x1 = 0;\r\n            x2 = 0;\r\n        } else {\r\n            len = 1 / len;\r\n            x0 *= len;\r\n            x1 *= len;\r\n            x2 *= len;\r\n        }\r\n\r\n        y0 = z1 * x2 - z2 * x1;\r\n        y1 = z2 * x0 - z0 * x2;\r\n        y2 = z0 * x1 - z1 * x0;\r\n\r\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n        if (!len) {\r\n            y0 = 0;\r\n            y1 = 0;\r\n            y2 = 0;\r\n        } else {\r\n            len = 1 / len;\r\n            y0 *= len;\r\n            y1 *= len;\r\n            y2 *= len;\r\n        }\r\n\r\n        out[0] = x0;\r\n        out[1] = y0;\r\n        out[2] = z0;\r\n        out[3] = 0;\r\n        out[4] = x1;\r\n        out[5] = y1;\r\n        out[6] = z1;\r\n        out[7] = 0;\r\n        out[8] = x2;\r\n        out[9] = y2;\r\n        out[10] = z2;\r\n        out[11] = 0;\r\n        out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n        out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n        out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n        out[15] = 1;\r\n\r\n        return out;\r\n    }\r\n}\r\n\r\nexport default Matrix4;"]},"metadata":{},"sourceType":"module"}
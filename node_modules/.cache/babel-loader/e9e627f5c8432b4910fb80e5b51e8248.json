{"ast":null,"code":"import Vector3 from \"./math/Vector3\";\nimport RigidBody from \"./RigidBody\";\n\nclass Bullets {\n  constructor(bulletModel, bulletSpeed, bulletReach) {\n    this.activeBullets = [];\n    this.model = bulletModel;\n    this.speed = bulletSpeed;\n    this.reach = bulletReach;\n    this.gravityIsEnabled = false;\n    this.gravity = 9.82;\n    this.rigidBodies = [];\n  }\n\n  addBullet(origin, direction) {\n    this.activeBullets.push({\n      origin: new Vector3(origin)\n    });\n    let rb = new RigidBody(origin);\n    rb.setVelocity([direction.x * this.speed, direction.y * this.speed, direction.z * this.speed]);\n    if (this.gravityIsEnabled) rb.enableGravity(true);\n    this.rigidBodies.push(rb);\n  }\n\n  enableGravity(state) {\n    this.gravityIsEnabled = state;\n    this.rigidBodies.forEach(rb => {\n      rb.enableGravity(state);\n    });\n  }\n\n  update(timeStep) {\n    //this.calculateProjectileMotion(timeStep);\n    let i = 0;\n\n    while (i < this.rigidBodies.length) {\n      this.rigidBodies[i].update(timeStep);\n\n      if (Vector3.distance(this.rigidBodies[i].position, this.activeBullets[i].origin) < this.reach) {\n        ++i;\n      } else {\n        // Remove bullet if distance is too great\n        this.rigidBodies.splice(i, 1);\n        this.activeBullets.splice(i, 1);\n      }\n    }\n  }\n\n  render(shader) {\n    /*\r\n    this.activeBullets.forEach((bulletInfo) => {\r\n        // Set bullet position\r\n        this.model.setPosition(bulletInfo.position);\r\n        // Draw bullet\r\n        this.model.render(shader);\r\n    });\r\n    */\n    this.rigidBodies.forEach(rb => {\n      // Set bullet position\n      this.model.setPosition([rb.position.x, rb.position.y, rb.position.z]); // Draw bullet\n\n      this.model.render(shader);\n    });\n  }\n\n}\n\nexport default Bullets;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Bullets.js"],"names":["Vector3","RigidBody","Bullets","constructor","bulletModel","bulletSpeed","bulletReach","activeBullets","model","speed","reach","gravityIsEnabled","gravity","rigidBodies","addBullet","origin","direction","push","rb","setVelocity","x","y","z","enableGravity","state","forEach","update","timeStep","i","length","distance","position","splice","render","shader","setPosition"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,CAAEC,WAAF,EAAeC,WAAf,EAA4BC,WAA5B,EAAyC;AAChD,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,KAAL,GAAaJ,WAAb;AACA,SAAKK,KAAL,GAAaJ,WAAb;AACA,SAAKK,KAAL,GAAaJ,WAAb;AAEA,SAAKK,gBAAL,GAAwB,KAAxB;AACA,SAAKC,OAAL,GAAe,IAAf;AAEA,SAAKC,WAAL,GAAmB,EAAnB;AACH;;AAEDC,EAAAA,SAAS,CAACC,MAAD,EAASC,SAAT,EAAoB;AACzB,SAAKT,aAAL,CAAmBU,IAAnB,CAAwB;AACpBF,MAAAA,MAAM,EAAE,IAAIf,OAAJ,CAAYe,MAAZ;AADY,KAAxB;AAIA,QAAIG,EAAE,GAAG,IAAIjB,SAAJ,CAAcc,MAAd,CAAT;AACAG,IAAAA,EAAE,CAACC,WAAH,CAAe,CAACH,SAAS,CAACI,CAAV,GAAc,KAAKX,KAApB,EAA2BO,SAAS,CAACK,CAAV,GAAc,KAAKZ,KAA9C,EAAqDO,SAAS,CAACM,CAAV,GAAc,KAAKb,KAAxE,CAAf;AACA,QAAG,KAAKE,gBAAR,EACIO,EAAE,CAACK,aAAH,CAAiB,IAAjB;AAEJ,SAAKV,WAAL,CAAiBI,IAAjB,CAAsBC,EAAtB;AACH;;AAEDK,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACjB,SAAKb,gBAAL,GAAwBa,KAAxB;AAEA,SAAKX,WAAL,CAAiBY,OAAjB,CAA0BP,EAAD,IAAQ;AAC7BA,MAAAA,EAAE,CAACK,aAAH,CAAiBC,KAAjB;AACH,KAFD;AAGH;;AAEDE,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb;AAEA,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAMA,CAAC,GAAG,KAAKf,WAAL,CAAiBgB,MAA3B,EAAmC;AAC/B,WAAKhB,WAAL,CAAiBe,CAAjB,EAAoBF,MAApB,CAA2BC,QAA3B;;AACA,UAAI3B,OAAO,CAAC8B,QAAR,CAAiB,KAAKjB,WAAL,CAAiBe,CAAjB,EAAoBG,QAArC,EAA+C,KAAKxB,aAAL,CAAmBqB,CAAnB,EAAsBb,MAArE,IAA+E,KAAKL,KAAxF,EAA+F;AAC3F,UAAEkB,CAAF;AACH,OAFD,MAGK;AAAC;AACF,aAAKf,WAAL,CAAiBmB,MAAjB,CAAwBJ,CAAxB,EAA2B,CAA3B;AACA,aAAKrB,aAAL,CAAmByB,MAAnB,CAA0BJ,CAA1B,EAA6B,CAA7B;AACH;AACJ;AACJ;;AAEDK,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX;;;;;;;;AAQA,SAAKrB,WAAL,CAAiBY,OAAjB,CAA0BP,EAAD,IAAQ;AAC7B;AACA,WAAKV,KAAL,CAAW2B,WAAX,CAAuB,CAACjB,EAAE,CAACa,QAAH,CAAYX,CAAb,EAAgBF,EAAE,CAACa,QAAH,CAAYV,CAA5B,EAA+BH,EAAE,CAACa,QAAH,CAAYT,CAA3C,CAAvB,EAF6B,CAG7B;;AACA,WAAKd,KAAL,CAAWyB,MAAX,CAAkBC,MAAlB;AACH,KALD;AAMH;;AAjES;;AAoEd,eAAehC,OAAf","sourcesContent":["import Vector3 from \"./math/Vector3\";\r\nimport RigidBody from \"./RigidBody\";\r\n\r\nclass Bullets {\r\n    constructor (bulletModel, bulletSpeed, bulletReach) {\r\n        this.activeBullets = [];\r\n        this.model = bulletModel;\r\n        this.speed = bulletSpeed;\r\n        this.reach = bulletReach;\r\n\r\n        this.gravityIsEnabled = false;\r\n        this.gravity = 9.82;\r\n\r\n        this.rigidBodies = [];\r\n    }\r\n\r\n    addBullet(origin, direction) {\r\n        this.activeBullets.push({\r\n            origin: new Vector3(origin),\r\n        });\r\n\r\n        let rb = new RigidBody(origin);\r\n        rb.setVelocity([direction.x * this.speed, direction.y * this.speed, direction.z * this.speed]);\r\n        if(this.gravityIsEnabled)\r\n            rb.enableGravity(true);\r\n\r\n        this.rigidBodies.push(rb);\r\n    }\r\n\r\n    enableGravity(state) {\r\n        this.gravityIsEnabled = state;\r\n\r\n        this.rigidBodies.forEach((rb) => {\r\n            rb.enableGravity(state);\r\n        });\r\n    }\r\n\r\n    update(timeStep) {\r\n        //this.calculateProjectileMotion(timeStep);\r\n\r\n        let i = 0;\r\n        while(i < this.rigidBodies.length) {\r\n            this.rigidBodies[i].update(timeStep);\r\n            if (Vector3.distance(this.rigidBodies[i].position, this.activeBullets[i].origin) < this.reach) {\r\n                ++i;\r\n            }\r\n            else {// Remove bullet if distance is too great\r\n                this.rigidBodies.splice(i, 1);\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(shader) {\r\n        /*\r\n        this.activeBullets.forEach((bulletInfo) => {\r\n            // Set bullet position\r\n            this.model.setPosition(bulletInfo.position);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        });\r\n        */\r\n        this.rigidBodies.forEach((rb) => {\r\n            // Set bullet position\r\n            this.model.setPosition([rb.position.x, rb.position.y, rb.position.z]);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        })\r\n    }\r\n}\r\n\r\nexport default Bullets;"]},"metadata":{},"sourceType":"module"}
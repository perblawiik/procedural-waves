{"ast":null,"code":"import Transform from \"./Transform\";\nimport Vector3 from \"./math/Vector3\";\n\nclass Bullets {\n  constructor(bulletModel, bulletSpeed, bulletReach) {\n    this.activeBullets = [];\n    this.model = bulletModel;\n    this.speed = bulletSpeed;\n    this.reach = bulletReach;\n  }\n\n  addBullet(origin, direction) {\n    this.activeBullets.push({\n      origin: new Vector3(origin),\n      position: origin,\n      direction: direction,\n      time: 0.0\n    });\n  }\n\n  update() {\n    let bulletTransform = new Transform();\n    let i = 0;\n\n    while (i < this.activeBullets.length) {\n      let v0 = this.speed;\n      let x = this.activeBullets[i].origin.x + v0 * this.activeBullets[i].time;\n      let y = this.activeBullets[i].origin.y + v0 * this.activeBullets[i].time - 0.5 * 9.82 * this.activeBullets[i].time; // Set bullets position and move it in the bullet direction\n\n      bulletTransform.setPosition(this.activeBullets[i].position);\n      bulletTransform.translate([this.activeBullets[i].direction.x * this.speed, this.activeBullets[i].direction.y * this.speed, this.activeBullets[i].direction.z * this.speed]); // Check distance from camera and bullet\n\n      if (Vector3.distance(bulletTransform.position, this.activeBullets[i].origin) < this.reach) {\n        // Save current position\n        this.activeBullets[i].position = [bulletTransform.position.x, bulletTransform.position.y, bulletTransform.position.z];\n        ++i;\n      } else {\n        // Remove bullet if distance is too great\n        this.activeBullets.splice(i, 1);\n      }\n    }\n  }\n\n  render(shader) {\n    this.activeBullets.forEach(bulletInfo => {\n      // Set bullet position\n      this.model.setPosition(bulletInfo.position); // Draw bullet\n\n      this.model.render(shader);\n    });\n  }\n\n}\n\nexport default Bullets;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Bullets.js"],"names":["Transform","Vector3","Bullets","constructor","bulletModel","bulletSpeed","bulletReach","activeBullets","model","speed","reach","addBullet","origin","direction","push","position","time","update","bulletTransform","i","length","v0","x","y","setPosition","translate","z","distance","splice","render","shader","forEach","bulletInfo"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,CAAEC,WAAF,EAAeC,WAAf,EAA4BC,WAA5B,EAAyC;AAChD,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,KAAL,GAAaJ,WAAb;AACA,SAAKK,KAAL,GAAaJ,WAAb;AACA,SAAKK,KAAL,GAAaJ,WAAb;AACH;;AAEDK,EAAAA,SAAS,CAACC,MAAD,EAASC,SAAT,EAAoB;AACzB,SAAKN,aAAL,CAAmBO,IAAnB,CAAwB;AACpBF,MAAAA,MAAM,EAAE,IAAIX,OAAJ,CAAYW,MAAZ,CADY;AAEpBG,MAAAA,QAAQ,EAAEH,MAFU;AAGpBC,MAAAA,SAAS,EAAEA,SAHS;AAIpBG,MAAAA,IAAI,EAAE;AAJc,KAAxB;AAMH;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAIC,eAAe,GAAG,IAAIlB,SAAJ,EAAtB;AACA,QAAImB,CAAC,GAAG,CAAR;;AACA,WAAMA,CAAC,GAAG,KAAKZ,aAAL,CAAmBa,MAA7B,EAAqC;AAEjC,UAAIC,EAAE,GAAG,KAAKZ,KAAd;AACA,UAAIa,CAAC,GAAG,KAAKf,aAAL,CAAmBY,CAAnB,EAAsBP,MAAtB,CAA6BU,CAA7B,GAAiCD,EAAE,GAAG,KAAKd,aAAL,CAAmBY,CAAnB,EAAsBH,IAApE;AACA,UAAIO,CAAC,GAAG,KAAKhB,aAAL,CAAmBY,CAAnB,EAAsBP,MAAtB,CAA6BW,CAA7B,GAAiCF,EAAE,GAAG,KAAKd,aAAL,CAAmBY,CAAnB,EAAsBH,IAA5D,GAAmE,MAAI,IAAJ,GAAS,KAAKT,aAAL,CAAmBY,CAAnB,EAAsBH,IAA1G,CAJiC,CAOjC;;AACAE,MAAAA,eAAe,CAACM,WAAhB,CAA4B,KAAKjB,aAAL,CAAmBY,CAAnB,EAAsBJ,QAAlD;AACAG,MAAAA,eAAe,CAACO,SAAhB,CAA0B,CAAC,KAAKlB,aAAL,CAAmBY,CAAnB,EAAsBN,SAAtB,CAAgCS,CAAhC,GAAoC,KAAKb,KAA1C,EAAkD,KAAKF,aAAL,CAAmBY,CAAnB,EAAsBN,SAAtB,CAAgCU,CAAhC,GAAoC,KAAKd,KAA3F,EAAmG,KAAKF,aAAL,CAAmBY,CAAnB,EAAsBN,SAAtB,CAAgCa,CAAhC,GAAoC,KAAKjB,KAA5I,CAA1B,EATiC,CAWjC;;AACA,UAAIR,OAAO,CAAC0B,QAAR,CAAiBT,eAAe,CAACH,QAAjC,EAA2C,KAAKR,aAAL,CAAmBY,CAAnB,EAAsBP,MAAjE,IAA2E,KAAKF,KAApF,EAA2F;AACvF;AACA,aAAKH,aAAL,CAAmBY,CAAnB,EAAsBJ,QAAtB,GAAiC,CAACG,eAAe,CAACH,QAAhB,CAAyBO,CAA1B,EAA6BJ,eAAe,CAACH,QAAhB,CAAyBQ,CAAtD,EAAyDL,eAAe,CAACH,QAAhB,CAAyBW,CAAlF,CAAjC;AACA,UAAEP,CAAF;AACH,OAJD,MAKK;AAAE;AACH,aAAKZ,aAAL,CAAmBqB,MAAnB,CAA0BT,CAA1B,EAA6B,CAA7B;AACH;AACJ;AACJ;;AAEDU,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,SAAKvB,aAAL,CAAmBwB,OAAnB,CAA4BC,UAAD,IAAgB;AACvC;AACA,WAAKxB,KAAL,CAAWgB,WAAX,CAAuBQ,UAAU,CAACjB,QAAlC,EAFuC,CAGvC;;AACA,WAAKP,KAAL,CAAWqB,MAAX,CAAkBC,MAAlB;AACH,KALD;AAMH;;AAlDS;;AAqDd,eAAe5B,OAAf","sourcesContent":["import Transform from \"./Transform\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass Bullets {\r\n    constructor (bulletModel, bulletSpeed, bulletReach) {\r\n        this.activeBullets = [];\r\n        this.model = bulletModel;\r\n        this.speed = bulletSpeed;\r\n        this.reach = bulletReach;\r\n    }\r\n\r\n    addBullet(origin, direction) {\r\n        this.activeBullets.push({\r\n            origin: new Vector3(origin),\r\n            position: origin,\r\n            direction: direction,\r\n            time: 0.0\r\n        });\r\n    }\r\n\r\n    update() {\r\n        let bulletTransform = new Transform();\r\n        let i = 0;\r\n        while(i < this.activeBullets.length) {\r\n\r\n            let v0 = this.speed;\r\n            let x = this.activeBullets[i].origin.x + v0 * this.activeBullets[i].time;\r\n            let y = this.activeBullets[i].origin.y + v0 * this.activeBullets[i].time - 0.5*9.82*this.activeBullets[i].time;\r\n\r\n\r\n            // Set bullets position and move it in the bullet direction\r\n            bulletTransform.setPosition(this.activeBullets[i].position);\r\n            bulletTransform.translate([this.activeBullets[i].direction.x * this.speed, (this.activeBullets[i].direction.y * this.speed), this.activeBullets[i].direction.z * this.speed]);\r\n\r\n            // Check distance from camera and bullet\r\n            if (Vector3.distance(bulletTransform.position, this.activeBullets[i].origin) < this.reach) {\r\n                // Save current position\r\n                this.activeBullets[i].position = [bulletTransform.position.x, bulletTransform.position.y, bulletTransform.position.z];\r\n                ++i;\r\n            }\r\n            else { // Remove bullet if distance is too great\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(shader) {\r\n        this.activeBullets.forEach((bulletInfo) => {\r\n            // Set bullet position\r\n            this.model.setPosition(bulletInfo.position);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Bullets;"]},"metadata":{},"sourceType":"module"}
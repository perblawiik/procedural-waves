{"ast":null,"code":"// JavaScript\nimport Shader from \"./Shader\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./EventHandler\";\nimport GraphicsEngine from \"./GraphicsEngine\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 100.0, 500.0];\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER: 2,\n  PLANE: 3\n};\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.sceneObjects = [];\n    this.graphicsEngine = new GraphicsEngine();\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Keeps track of time passed and delta time\n    Time.update(); // Draw all graphics\n\n    this.graphicsEngine.run();\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let aspectRatio = this.canvas.width / this.canvas.height; // Update the projection matrix\n\n    this.mainShader.setProjectionMatrix(aspectRatio); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  preload() {\n    this.graphicsEngine.preload();\n  }\n\n  drawScene() {\n    // Clear screen 3D\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scene objects\n\n    this.sceneObjects.forEach(object => {\n      object.render();\n    }); // Clear depth so that local coordinate axes is visible through models\n    // Draw local coordinate axes UI\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.mainShader);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER) {\n      mesh.createCylinder(32, 1);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name, this.mainShader);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    this.sceneObjects.push(obj);\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Set text font style\n      this.ctx.font = \"20px Consolas\";\n      this.ctx.fillStyle = 'white'; // Fps = the number of frames\n\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0; // Clear previous\n\n      this.ctx.clearRect(0, 0, this.canvas.width, 30); // Draw fps and frame time in milliseconds\n\n      this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 10, 25);\n    } else {\n      ++this.frameCount;\n    }\n  }\n\n  loadDefaultSceneObjects() {\n    // Create a white sphere\n    this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Lamp',\n      scale: [10.0, 10.0, 10.0],\n      position: [150.0, 75.0, -150.0],\n      color: [1.0, 1.0, 1.0]\n    }); // Set light position to the same as the white sphere\n\n    this.mainShader.setLightPosition(this.sceneObjects[0].transform.position); // Create a red cube\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [10.0, 10.0, 10.0],\n      position: [0.0, 10.0, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); // Create a green sphere\n\n    this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [10.0, 10.0, 10.0],\n      position: [40.0, 20.0, 20.0],\n      color: [0.0, 1.0, 0.0]\n    }); // Create a magenta cylinder\n\n    this.createGameObject({\n      shape: SHAPE.CYLINDER,\n      name: 'Magenta Cylinder',\n      scale: [10.0, 10.0, 10.0],\n      position: [-40.0, 20.0, 20.0],\n      color: [1.0, 0.0, 1.0]\n    }); // Create gray floor\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 100.0, 0.0],\n      color: [0.5, 0.5, 0.5]\n    }); // Create gray roof\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    }); // Create Walls\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 01',\n      scale: [1.0, 50.0, 200.0],\n      position: [-200.0, 50.0, 0],\n      color: [0.0, 0.0, 0.25]\n    });\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 02',\n      scale: [1.0, 50.0, 200.0],\n      position: [200.0, 50.0, 0],\n      color: [0.0, 0.0, 0.25]\n    });\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 03',\n      scale: [200.0, 50.0, 1.0],\n      position: [0.0, 50.0, -200],\n      color: [0.0, 0.0, 0.25]\n    });\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","GraphicsEngine","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER","PLANE","Engine","constructor","lastTime","frameCount","fps","sceneObjects","graphicsEngine","run","update","updateViewportDimensions","aspectRatio","canvas","width","height","mainShader","setProjectionMatrix","gl","viewport","preload","drawScene","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","forEach","object","render","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinder","createPlane","setColor","color","obj","name","setPosition","position","setScale","scale","addMesh","push","displayFrameRate","currentTime","time","ctx","font","fillStyle","clearRect","fillText","loadDefaultSceneObjects","setLightPosition","transform"],"mappings":"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","sourcesContent":["// JavaScript\r\nimport Shader from \"./Shader\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./EventHandler\";\r\nimport GraphicsEngine from \"./GraphicsEngine\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 100.0, 500.0];\r\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER: 2,\r\n    PLANE: 3\r\n};\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.sceneObjects = [];\r\n\r\n        this.graphicsEngine = new GraphicsEngine();\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Keeps track of time passed and delta time\r\n        Time.update();\r\n\r\n        // Draw all graphics\r\n        this.graphicsEngine.run();\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let aspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Update the projection matrix\r\n        this.mainShader.setProjectionMatrix(aspectRatio);\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    preload() {\r\n\r\n        this.graphicsEngine.preload();\r\n    }\r\n\r\n    drawScene() {\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scene objects\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render();\r\n        });\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n\r\n        // Draw local coordinate axes UI\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.mainShader);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER) {\r\n            mesh.createCylinder(32,1);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name, this.mainShader);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        this.sceneObjects.push(obj);\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Set text font style\r\n            this.ctx.font = \"20px Consolas\";\r\n            this.ctx.fillStyle = 'white';\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n            // Clear previous\r\n            this.ctx.clearRect(0, 0, this.canvas.width, 30);\r\n            // Draw fps and frame time in milliseconds\r\n            this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 10, 25);\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n    }\r\n\r\n    loadDefaultSceneObjects() {\r\n        // Create a white sphere\r\n        this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Lamp',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [150.0, 75.0, -150.0],\r\n            color: [1.0, 1.0, 1.0]\r\n        });\r\n\r\n        // Set light position to the same as the white sphere\r\n        this.mainShader.setLightPosition(this.sceneObjects[0].transform.position);\r\n\r\n        // Create a red cube\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [0.0, 10.0, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n\r\n        // Create a green sphere\r\n        this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Green Sphere',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [40.0, 20.0, 20.0],\r\n            color: [0.0, 1.0, 0.0]\r\n        });\r\n\r\n        // Create a magenta cylinder\r\n        this.createGameObject({\r\n            shape: SHAPE.CYLINDER,\r\n            name: 'Magenta Cylinder',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [-40.0, 20.0, 20.0],\r\n            color: [1.0, 0.0, 1.0]\r\n        });\r\n\r\n        // Create gray floor\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Floor',\r\n            scale: [200.0, 1.0, 200.0],\r\n            position: [0.0, 100.0, 0.0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n\r\n        // Create gray roof\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Roof',\r\n            scale: [200.0, 1.0, 200.0],\r\n            position: [0.0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n\r\n        // Create Walls\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 01',\r\n            scale: [1.0, 50.0, 200.0],\r\n            position: [-200.0, 50.0, 0],\r\n            color: [0.0, 0.0, 0.25]\r\n        });\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 02',\r\n            scale: [1.0, 50.0, 200.0],\r\n            position: [200.0, 50.0, 0],\r\n            color: [0.0, 0.0, 0.25]\r\n        });\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 03',\r\n            scale: [200.0, 50.0, 1.0],\r\n            position: [0.0, 50.0, -200],\r\n            color: [0.0, 0.0, 0.25]\r\n        });\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Transform from \"./Transform\";\nimport Vector3 from \"./math/Vector3\";\n\nclass Bullets {\n  constructor(bulletModel, bulletSpeed, bulletReach) {\n    this.activeBullets = [];\n    this.model = bulletModel;\n    this.speed = bulletSpeed;\n    this.reach = bulletReach;\n    this.gravity = 9.82;\n    this.mode = \"parabolic\";\n  }\n\n  addBullet(origin, direction) {\n    this.activeBullets.push({\n      origin: new Vector3(origin),\n      position: origin,\n      direction: direction,\n      time: 0.0\n    });\n  }\n\n  calculateProjectileMotion() {\n    let i = 0;\n\n    while (i < this.activeBullets.length) {\n      let t = this.activeBullets[i].time;\n      let x = this.activeBullets[i].origin.x + this.activeBullets[i].direction.x * this.speed * t;\n      let y = this.activeBullets[i].origin.y + this.activeBullets[i].direction.y * this.speed * t;\n      let z = this.activeBullets[i].origin.z + this.activeBullets[i].direction.z * this.speed * t; // Add gravity if parabolic mode is active\n\n      if (this.mode === \"parabolic\") {\n        y -= 0.5 * this.gravity * t * t;\n      }\n\n      if (Vector3.distance(new Vector3([x, y, z]), this.activeBullets[i].origin) < this.reach) {\n        // Save current position\n        this.activeBullets[i].position = [x, y, z];\n        this.activeBullets[i].time += 0.1;\n        ++i;\n      } else {\n        // Remove bullet if distance is too great\n        this.activeBullets.splice(i, 1);\n      }\n    }\n  }\n\n  setMotionMode(mode) {\n    this.mode = mode;\n  }\n\n  update() {\n    this.calculateProjectileMotion();\n  }\n\n  render(shader) {\n    this.activeBullets.forEach(bulletInfo => {\n      // Set bullet position\n      this.model.setPosition(bulletInfo.position); // Draw bullet\n\n      this.model.render(shader);\n    });\n  }\n\n}\n\nexport default Bullets;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Bullets.js"],"names":["Transform","Vector3","Bullets","constructor","bulletModel","bulletSpeed","bulletReach","activeBullets","model","speed","reach","gravity","mode","addBullet","origin","direction","push","position","time","calculateProjectileMotion","i","length","t","x","y","z","distance","splice","setMotionMode","update","render","shader","forEach","bulletInfo","setPosition"],"mappings":"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","sourcesContent":["import Transform from \"./Transform\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass Bullets {\r\n    constructor (bulletModel, bulletSpeed, bulletReach) {\r\n        this.activeBullets = [];\r\n        this.model = bulletModel;\r\n        this.speed = bulletSpeed;\r\n        this.reach = bulletReach;\r\n\r\n        this.gravity = 9.82;\r\n        this.mode = \"parabolic\";\r\n    }\r\n\r\n    addBullet(origin, direction) {\r\n        this.activeBullets.push({\r\n            origin: new Vector3(origin),\r\n            position: origin,\r\n            direction: direction,\r\n            time: 0.0\r\n        });\r\n    }\r\n\r\n    calculateProjectileMotion() {\r\n        let i = 0;\r\n        while(i < this.activeBullets.length) {\r\n            let t = this.activeBullets[i].time;\r\n            let x = this.activeBullets[i].origin.x + (this.activeBullets[i].direction.x * this.speed * t);\r\n            let y = this.activeBullets[i].origin.y + (this.activeBullets[i].direction.y * this.speed * t);\r\n            let z = this.activeBullets[i].origin.z + (this.activeBullets[i].direction.z * this.speed * t);\r\n\r\n            // Add gravity if parabolic mode is active\r\n            if (this.mode === \"parabolic\") {\r\n                y -= (0.5 * this.gravity * t * t);\r\n            }\r\n\r\n            if (Vector3.distance(new Vector3([x, y, z]), this.activeBullets[i].origin) < this.reach) {\r\n                // Save current position\r\n                this.activeBullets[i].position = [x, y, z];\r\n                this.activeBullets[i].time += 0.1;\r\n                ++i;\r\n            }\r\n            else { // Remove bullet if distance is too great\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    setMotionMode(mode) {\r\n        this.mode = mode;\r\n    }\r\n\r\n    update() {\r\n        this.calculateProjectileMotion();\r\n    }\r\n\r\n    render(shader) {\r\n        this.activeBullets.forEach((bulletInfo) => {\r\n            // Set bullet position\r\n            this.model.setPosition(bulletInfo.position);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Bullets;"]},"metadata":{},"sourceType":"module"}
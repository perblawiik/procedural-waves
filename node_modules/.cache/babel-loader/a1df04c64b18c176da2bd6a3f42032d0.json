{"ast":null,"code":"// JavaScript\nimport Transform from './Transform';\nimport Vector3 from './math/Vector3';\n\nclass Camera {\n  constructor(shader) {\n    this.shaderListInfo = [];\n    this.shaderListInfo.push({\n      shaderProgram: shader,\n      cameraView: shader.getUniformLoc(\"cameraView\"),\n      cameraPos: shader.getUniformLoc(\"viewPosition\")\n    });\n    /*\r\n    shader.activate();\r\n    this.cameraViewUniformLocation = shader.getUniformLoc(\"cameraView\");\r\n    this.cameraPositionUniformLocation = shader.getUniformLoc(\"viewPosition\");\r\n    */\n\n    this.transform = new Transform();\n    this.updateCameraViewUniform();\n  }\n\n  translate(val) {\n    let rightVec = new Vector3([this.transform.matrix[0] * val[0], this.transform.matrix[4] * val[0], this.transform.matrix[8] * val[0]]);\n    let upVec = new Vector3([this.transform.matrix[1] * val[1], this.transform.matrix[5] * val[1], this.transform.matrix[9] * val[1]]);\n    let forwardVec = new Vector3([this.transform.matrix[2] * val[2], this.transform.matrix[6] * val[2], this.transform.matrix[10] * val[2]]);\n    this.setPosition([this.transform.position.x + rightVec.x + upVec.x + forwardVec.x, this.transform.position.y + rightVec.y + upVec.y + forwardVec.y, this.transform.position.z + rightVec.z + upVec.z + forwardVec.z]);\n  }\n\n  rotate(rot) {\n    this.setRotation([this.transform.rotation.x + rot[0], this.transform.rotation.y + rot[1], this.transform.rotation.z + rot[2]]);\n  }\n\n  setPosition(cameraPosition) {\n    this.transform.setPosition(cameraPosition);\n    this.updateCameraViewUniform();\n    this.updateCameraPositionUniform();\n  }\n\n  setRotation(cameraRotation) {\n    this.transform.setRotation(cameraRotation);\n    this.updateCameraViewUniform();\n  }\n\n  rotateX(angle) {\n    this.setRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\n  }\n\n  rotateY(angle) {\n    this.setRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\n  }\n\n  updateCameraViewUniform() {\n    this.shader.activate();\n    this.shader.setUniformMat4f(this.cameraViewUniformLocation, this.transform.inverted());\n  }\n\n  updateCameraPositionUniform() {\n    this.shader.activate();\n    this.shader.setUniformVec3f(this.cameraPositionUniformLocation, this.transform.position);\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Camera.js"],"names":["Transform","Vector3","Camera","constructor","shader","shaderListInfo","push","shaderProgram","cameraView","getUniformLoc","cameraPos","transform","updateCameraViewUniform","translate","val","rightVec","matrix","upVec","forwardVec","setPosition","position","x","y","z","rotate","rot","setRotation","rotation","cameraPosition","updateCameraPositionUniform","cameraRotation","rotateX","angle","rotateY","activate","setUniformMat4f","cameraViewUniformLocation","inverted","setUniformVec3f","cameraPositionUniformLocation"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,MAAN,CAAa;AACTC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKA,cAAL,CAAoBC,IAApB,CAAyB;AACrBC,MAAAA,aAAa,EAAEH,MADM;AAErBI,MAAAA,UAAU,EAAEJ,MAAM,CAACK,aAAP,CAAqB,YAArB,CAFS;AAGrBC,MAAAA,SAAS,EAAEN,MAAM,CAACK,aAAP,CAAqB,cAArB;AAHU,KAAzB;AAKA;;;;;;AAKA,SAAKE,SAAL,GAAiB,IAAIX,SAAJ,EAAjB;AACA,SAAKY,uBAAL;AACH;;AAEDC,EAAAA,SAAS,CAAEC,GAAF,EAAO;AACZ,QAAIC,QAAQ,GAAG,IAAId,OAAJ,CAAY,CAAC,KAAKU,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA7B,EAAkC,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA9D,EAAmE,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA/F,CAAZ,CAAf;AACA,QAAIG,KAAK,GAAG,IAAIhB,OAAJ,CAAY,CAAC,KAAKU,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA7B,EAAkC,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA9D,EAAmE,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA/F,CAAZ,CAAZ;AACA,QAAII,UAAU,GAAG,IAAIjB,OAAJ,CAAY,CAAC,KAAKU,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA7B,EAAkC,KAAKH,SAAL,CAAeK,MAAf,CAAsB,CAAtB,IAAyBF,GAAG,CAAC,CAAD,CAA9D,EAAmE,KAAKH,SAAL,CAAeK,MAAf,CAAsB,EAAtB,IAA0BF,GAAG,CAAC,CAAD,CAAhG,CAAZ,CAAjB;AAEA,SAAKK,WAAL,CAAiB,CACb,KAAKR,SAAL,CAAeS,QAAf,CAAwBC,CAAxB,GAA4BN,QAAQ,CAACM,CAArC,GAAyCJ,KAAK,CAACI,CAA/C,GAAmDH,UAAU,CAACG,CADjD,EAEb,KAAKV,SAAL,CAAeS,QAAf,CAAwBE,CAAxB,GAA4BP,QAAQ,CAACO,CAArC,GAAyCL,KAAK,CAACK,CAA/C,GAAmDJ,UAAU,CAACI,CAFjD,EAGb,KAAKX,SAAL,CAAeS,QAAf,CAAwBG,CAAxB,GAA4BR,QAAQ,CAACQ,CAArC,GAAyCN,KAAK,CAACM,CAA/C,GAAmDL,UAAU,CAACK,CAHjD,CAAjB;AAKH;;AAEDC,EAAAA,MAAM,CAAEC,GAAF,EAAO;AACT,SAAKC,WAAL,CAAiB,CACb,KAAKf,SAAL,CAAegB,QAAf,CAAwBN,CAAxB,GAA4BI,GAAG,CAAC,CAAD,CADlB,EAEb,KAAKd,SAAL,CAAegB,QAAf,CAAwBL,CAAxB,GAA4BG,GAAG,CAAC,CAAD,CAFlB,EAGb,KAAKd,SAAL,CAAegB,QAAf,CAAwBJ,CAAxB,GAA4BE,GAAG,CAAC,CAAD,CAHlB,CAAjB;AAKH;;AAEDN,EAAAA,WAAW,CAACS,cAAD,EAAiB;AACxB,SAAKjB,SAAL,CAAeQ,WAAf,CAA2BS,cAA3B;AACA,SAAKhB,uBAAL;AACA,SAAKiB,2BAAL;AACH;;AAEDH,EAAAA,WAAW,CAACI,cAAD,EAAiB;AACxB,SAAKnB,SAAL,CAAee,WAAf,CAA2BI,cAA3B;AACA,SAAKlB,uBAAL;AACH;;AAEDmB,EAAAA,OAAO,CAAEC,KAAF,EAAS;AACZ,SAAKN,WAAL,CAAiB,CAACM,KAAD,EAAQ,KAAKrB,SAAL,CAAegB,QAAf,CAAwBL,CAAhC,EAAmC,KAAKX,SAAL,CAAegB,QAAf,CAAwBJ,CAA3D,CAAjB;AACH;;AAEDU,EAAAA,OAAO,CAAED,KAAF,EAAS;AACZ,SAAKN,WAAL,CAAiB,CAAC,KAAKf,SAAL,CAAegB,QAAf,CAAwBN,CAAzB,EAA4BW,KAA5B,EAAmC,KAAKrB,SAAL,CAAegB,QAAf,CAAwBJ,CAA3D,CAAjB;AACH;;AAEDX,EAAAA,uBAAuB,GAAI;AACvB,SAAKR,MAAL,CAAY8B,QAAZ;AACA,SAAK9B,MAAL,CAAY+B,eAAZ,CAA4B,KAAKC,yBAAjC,EAA4D,KAAKzB,SAAL,CAAe0B,QAAf,EAA5D;AACH;;AAEDR,EAAAA,2BAA2B,GAAG;AAC1B,SAAKzB,MAAL,CAAY8B,QAAZ;AACA,SAAK9B,MAAL,CAAYkC,eAAZ,CAA4B,KAAKC,6BAAjC,EAAgE,KAAK5B,SAAL,CAAeS,QAA/E;AACH;;AAhEQ;;AAmEb,eAAelB,MAAf","sourcesContent":["// JavaScript\r\nimport Transform from './Transform';\r\nimport Vector3 from './math/Vector3';\r\n\r\nclass Camera {\r\n    constructor(shader) {\r\n        this.shaderListInfo = [];\r\n        this.shaderListInfo.push({\r\n            shaderProgram: shader,\r\n            cameraView: shader.getUniformLoc(\"cameraView\"),\r\n            cameraPos: shader.getUniformLoc(\"viewPosition\")\r\n        });\r\n        /*\r\n        shader.activate();\r\n        this.cameraViewUniformLocation = shader.getUniformLoc(\"cameraView\");\r\n        this.cameraPositionUniformLocation = shader.getUniformLoc(\"viewPosition\");\r\n        */\r\n        this.transform = new Transform();\r\n        this.updateCameraViewUniform();\r\n    }\r\n\r\n    translate (val) {\r\n        let rightVec = new Vector3([this.transform.matrix[0]*val[0], this.transform.matrix[4]*val[0], this.transform.matrix[8]*val[0]]);\r\n        let upVec = new Vector3([this.transform.matrix[1]*val[1], this.transform.matrix[5]*val[1], this.transform.matrix[9]*val[1]]);\r\n        let forwardVec = new Vector3([this.transform.matrix[2]*val[2], this.transform.matrix[6]*val[2], this.transform.matrix[10]*val[2]]);\r\n\r\n        this.setPosition([\r\n            this.transform.position.x + rightVec.x + upVec.x + forwardVec.x,\r\n            this.transform.position.y + rightVec.y + upVec.y + forwardVec.y,\r\n            this.transform.position.z + rightVec.z + upVec.z + forwardVec.z,\r\n        ]);\r\n    }\r\n\r\n    rotate (rot) {\r\n        this.setRotation([\r\n            this.transform.rotation.x + rot[0],\r\n            this.transform.rotation.y + rot[1],\r\n            this.transform.rotation.z + rot[2]\r\n        ]);\r\n    }\r\n\r\n    setPosition(cameraPosition) {\r\n        this.transform.setPosition(cameraPosition);\r\n        this.updateCameraViewUniform();\r\n        this.updateCameraPositionUniform();\r\n    }\r\n\r\n    setRotation(cameraRotation) {\r\n        this.transform.setRotation(cameraRotation);\r\n        this.updateCameraViewUniform();\r\n    }\r\n\r\n    rotateX (angle) {\r\n        this.setRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\r\n    }\r\n\r\n    rotateY (angle) {\r\n        this.setRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\r\n    }\r\n\r\n    updateCameraViewUniform () {\r\n        this.shader.activate();\r\n        this.shader.setUniformMat4f(this.cameraViewUniformLocation, this.transform.inverted());\r\n    }\r\n\r\n    updateCameraPositionUniform() {\r\n        this.shader.activate();\r\n        this.shader.setUniformVec3f(this.cameraPositionUniformLocation, this.transform.position);\r\n    }\r\n}\r\n\r\nexport default Camera;"]},"metadata":{},"sourceType":"module"}
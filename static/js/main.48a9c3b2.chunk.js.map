{"version":3,"sources":["js/bluebox/Time.js","js/bluebox/events/MouseEvent.js","js/bluebox/GameEditor.js","js/bluebox/events/EventHandler.js","js/bluebox/math/Vector3.js","js/bluebox/math/Matrix4.js","js/bluebox/Transform.js","js/bluebox/Scene.js","js/bluebox/Camera.js","js/bluebox/GameObject.js","js/bluebox/ShapeGenerator.js","js/bluebox/Mesh.js","js/bluebox/PointLightSource.js","js/bluebox/ConnectionManager.js","js/bluebox/ShaderHandle.js","js/bluebox/shaders/PhongLightingShader.js","js/bluebox/shaders/AmbientShader.js","js/bluebox/shaders/ProceduralShader.js","js/bluebox/Engine.js","js/bluebox/gui/EngineWindow.js","js/bluebox/gui/SidePanel.js","js/bluebox/gui/TopPanel.js","App.js","serviceWorker.js","index.js"],"names":["Time","this","_time","window","performance","now","_deltaTime","MouseEvent","xPos","yPos","moveX","moveY","wheel","down","up","buttonPressed","leftButton","rightButton","middleButton","offset","move","state","delta","GameEditor","gl","context2D","shaders","camera","canvas","lastTime","frameCount","fps","currentTextOffset","scenes","drawTextElements","processCameraNavigation","isPressed","translate","movementY","movementX","rotate","Math","abs","wheelDelta","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","deltaTime","toFixed","fillText","length","pos","transform","position","cameraPositionText","x","y","z","MouseKey","EventHandler","init","canvas2D","document","getElementById","onmousedown","event","setMouseDownEvent","which","setButtonPressedLeft","setButtonPressedRight","setButtonPressedMiddle","onmouseup","setMouseUpEvent","onmouseleave","onmousemove","setOffsetX","offsetX","setOffsetY","offsetY","setMovementX","setMovementY","onwheel","setWheelDelta","deltaY","Vector3","coordinates","set","coords","v1","v2","v3","out","magnitude","sqrt","scalar","a","b","A","B","Matrix4","tX","tY","tZ","xScale","yScale","zScale","xVec","yVec","zVec","posVec","rad","sin","cos","fovy","aspect","near","far","f","tan","nf","matrix","multiply","translation","sX","sY","sZ","scaling","rotationX","rotationY","rotationZ","m","v","index","i","k","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","axis","s","c","t","b12","b20","b21","b22","len","Transform","rotation","identity","localMatrix","customRotation","customRotationRad","parent","children","scale","composeMatrix","updateChildrenTransforms","val","rightVec","upVec","forwardVec","setPosition","rot","setRotation","angle","PI","parentTransform","child","push","setParent","invert","scaleMatrix","rotationMatrix","rotateZ","rotateX","rotateY","translationMatrix","Scene","sceneObjects","lightSources","setScale","gameObject","addChild","lightSource","forEach","shader","activate","lightCount","arrayName","positionUniformLoc","getUniformLoc","colorUniformLoc","attenuationUniformLoc","lightCountUniformLoc","setUniformVec3f","worldPosition","lightColor","setUniformVec2f","attenuationConstants","kLinear","kQuadratic","setUniformInt","get","object","render","shaderName","timeStep","timeUniformLocation","setUniformFloat","update","Camera","updateUniforms","cameraPosition","cameraRotation","setCameraViewUniform","setCameraViewPosition","GameObject","name","nameTag","meshes","mesh","customUpdate","ShapeGenerator","vertexArray","indexArray","totalTriangles","totalVertices","numVertices","vertices","indices","segments","radius","numHorizontalSegments","numVerticalSegments","numTriangles","sampleRate","theta","phi","stride","Y","R","j","v0","lastVertexIndex","vertSegs","horizSegs","height","phiNext","WIDTH","HEIGHT","textureWidth","textureHeight","vertexData","indexData","console","log","Mesh","color","drawMode","TRIANGLES","shape","bindBuffersAndEnableAttributes","drawElements","UNSIGNED_SHORT","unbindBuffers","uniformMatrix4fv","modelViewUniformLocation","FALSE","uniform3fv","colorUniformLocation","bindBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","vertexBuffer","vertexAttribPointer","positionAttributeLocation","FLOAT","Float32Array","BYTES_PER_ELEMENT","enableVertexAttribArray","normalAttributeLocation","TRUE","indexBuffer","createBuffer","bufferData","STATIC_DRAW","Uint16Array","vertSeg","horizSeg","cylinderData","createCylinderSmooth","createCylinderSharp","createBuffers","sphereData","createSphere","cubeData","createCube","rows","columns","l","PointLightSource","kQuadratics","ConnectionManager","items","Map","signalPending","message","tag","value","ShaderHandle","vertexShaderFile","fragmentShaderFile","getContext","vertexShader","createShaderFromFile","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgramFromShaders","validateProgram","getProgramParameter","VALIDATE_STATUS","error","getProgramInfoLog","useProgram","fetchAttributeLocations","fetchUniformLocations","getAttribLocation","textureAttributeLocation","getUniformLocation","cameraViewUniformLocation","projectionMatrixUniformLocation","viewPositionUniformLocation","type","source","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","createProgram","attachShader","linkProgram","LINK_STATUS","deleteProgram","vector","uniformName","location","uniform2fv","array","uniform1fv","uniform1i","uniform1f","PhongLightingShader","join","AmbientShader","ProceduralShader","perlinNoise","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","FIELD_OF_VIEW","Engine","viewportAspectRatio","lag","processInputEvents","processInternalSignals","resetMouseEvents","scene","residualLag","updateViewportDimensions","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","enable","DEPTH_TEST","draw","editor","processUserInput","updateWaveParameter","resetSignal","setUpWebGL","mainShader","vertex","fragment","ambientShader","proceduralShader","fieldOfView","width","refreshProjectionMatrix","setUpScene","defaultScene","loadDefaultScene","currentAspectRatio","viewport","settings","createPlane","setColor","obj","addMesh","setShader","setLightColor","setAttenuation","attenuation","lightSourceModel","getItemValue","plane1","createGameObject","r","g","addGameObject","water","wallColor","atten","addLightSource","createPointLightSource","wallWidth","alert","clearColor","CULL_FACE","cullFace","BACK","frontFace","CCW","projectionMatrix","perspective","setProjectionUniform","newValue","o","uniformLocation","EngineWindow","props","canvasWidth","canvasHeight","animationId","engine","setState","engineWindowContainer","offsetHeight","addEventListener","resizeCanvas","bind","startMainLoop","stopMainLoop","removeEventListener","preload","requestAnimationFrame","mainLoop","cancelAnimationFrame","run","canvasStyle","id","style","Component","SidePanel","colorTag","clamp","parseFloat","setItemValue","sendSignal","target","charCode","click","min","max","containerStyle","backgroundColor","textAlign","overflow","textStyle","fontSize","inputStyle","marginLeft","settingContainerStyle","paddingBottom","formatInputValue","radix","parseInt","waterColor","amplitudeTag","step","defaultValue","onChange","setNewValue","waveLengthTag","speedTag","sharpnessTag","angleTag","display","flexDirection","onKeyPress","handleKeyPress","marginRight","cursor","onClick","TopPanel","alignItems","justifyContent","className","padding","border","fontWeight","margin","marginTop","App","registerItem","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48a9c3b2.chunk.js","sourcesContent":["/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nclass Time {\r\n    static init() {\r\n        this._time = window.performance.now();\r\n        this._deltaTime = 0.0;\r\n    }\r\n\r\n    static get now () {\r\n        return window.performance.now();\r\n    }\r\n\r\n    static get deltaTime() {\r\n        return this._deltaTime;\r\n    }\r\n\r\n    static get time() {\r\n        return this._time;\r\n    }\r\n\r\n    static update() {\r\n        this._deltaTime = window.performance.now() - this._time;\r\n        this._time = window.performance.now();\r\n    }\r\n}\r\n\r\nexport default Time;","class MouseEvent {\r\n    static init() {\r\n        this.xPos = 0;\r\n        this.yPos = 0;\r\n        this.moveX = 0;\r\n        this.moveY = 0;\r\n        this.wheel = 0;\r\n        this.down = false;\r\n        this.up = false;\r\n        this.buttonPressed = {\r\n            leftButton: false,\r\n            rightButton: false,\r\n            middleButton: false\r\n        };\r\n    }\r\n\r\n    // Setters\r\n    static setOffsetX(offset) {\r\n        this.xPos = offset;\r\n    }\r\n\r\n    static setOffsetY(offset) {\r\n        this.yPos = offset;\r\n    }\r\n\r\n    static setMovementX(move) {\r\n        this.moveX = move;\r\n    }\r\n\r\n    static setMovementY(move) {\r\n        this.moveY = move;\r\n    }\r\n\r\n    static setMouseDownEvent(state) {\r\n        this.down = state;\r\n    }\r\n\r\n    static setMouseUpEvent(state) {\r\n        this.up = state;\r\n    }\r\n\r\n    static setWheelDelta(delta) {\r\n        this.wheel = delta;\r\n    }\r\n\r\n    static setButtonPressedLeft(state) {\r\n        this.buttonPressed.leftButton = state;\r\n    }\r\n\r\n    static setButtonPressedMiddle(state) {\r\n        this.buttonPressed.middleButton = state;\r\n    }\r\n\r\n    static setButtonPressedRight(state) {\r\n        this.buttonPressed.rightButton = state;\r\n    }\r\n\r\n    // Getters\r\n    static get offsetX() {\r\n        return this.xPos;\r\n    }\r\n\r\n    static get offsetY() {\r\n        return this.yPos;\r\n    }\r\n\r\n    static get movementX() {\r\n        return this.moveX;\r\n    }\r\n\r\n    static get movementY() {\r\n        return this.moveY;\r\n    }\r\n\r\n    static get wheelDelta() {\r\n        return this.wheel;\r\n    }\r\n\r\n    static get mouseDown() {\r\n        return this.down;\r\n    }\r\n\r\n    static get mouseUp() {\r\n        return this.up;\r\n    }\r\n\r\n    static get isPressed() {\r\n        return this.buttonPressed;\r\n    }\r\n}\r\n\r\nexport default MouseEvent;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport Time from \"./Time\";\r\nimport MouseEvent from \"./events/MouseEvent\";\r\n\r\nclass GameEditor {\r\n    constructor(gl, context2D, shaders, camera, canvas) {\r\n        this.gl = gl;\r\n        this.context2D = context2D;\r\n        this.canvas = canvas;\r\n        this.camera = camera;\r\n\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n    }\r\n\r\n    render(scenes) {\r\n        this.drawTextElements();\r\n    }\r\n\r\n    processUserInput() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation();\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 2.0]);\r\n            }\r\n            else {\r\n                this.camera.translate([0.0, 0.0, -2.0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.context2D.font = \"20px Consolas\";\r\n        this.context2D.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.context2D.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.context2D.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 10;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.context2D.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n}\r\n\r\nexport default GameEditor;","import MouseEvent from \"./MouseEvent\";\r\n\r\n// Enum struct for handling mouse events\r\nconst MouseKey = {\r\n    LEFT: 1,\r\n    MIDDLE: 2,\r\n    RIGHT: 3\r\n};\r\n\r\nclass EventHandler {\r\n    static init() {\r\n        MouseEvent.init();\r\n\r\n        let canvas2D = document.getElementById('text-canvas');\r\n        // Mouse down event function definition\r\n        canvas2D.onmousedown = function(event) {\r\n            // Register the event\r\n            MouseEvent.setMouseDownEvent(true);\r\n\r\n            if(event.which === MouseKey.LEFT) {\r\n                MouseEvent.setButtonPressedLeft(true);\r\n            }\r\n            if (event.which === MouseKey.RIGHT) {\r\n                MouseEvent.setButtonPressedRight(true);\r\n            }\r\n            if (event.which === MouseKey.MIDDLE) {\r\n                MouseEvent.setButtonPressedMiddle(true);\r\n            }\r\n        };\r\n\r\n        // Mouse up event function definition\r\n        canvas2D.onmouseup = function(event) {\r\n            // Register the event\r\n            MouseEvent.setMouseUpEvent(true);\r\n\r\n            if(event.which === MouseKey.LEFT) {\r\n                MouseEvent.setButtonPressedLeft(false);\r\n            }\r\n            if (event.which === MouseKey.RIGHT) {\r\n                MouseEvent.setButtonPressedRight(false);\r\n            }\r\n            if (event.which === MouseKey.MIDDLE) {\r\n                MouseEvent.setButtonPressedMiddle(false);\r\n            }\r\n        };\r\n\r\n        // Mouse leave event function definition\r\n        canvas2D.onmouseleave = function(event) {\r\n            MouseEvent.setButtonPressedLeft(false);\r\n            MouseEvent.setButtonPressedRight(false);\r\n            MouseEvent.setButtonPressedMiddle(false);\r\n        };\r\n\r\n        // Mouse move event function definition\r\n        canvas2D.onmousemove  = function(event) {\r\n            // Set mouse position in the viewport\r\n            MouseEvent.setOffsetX(event.offsetX);\r\n            MouseEvent.setOffsetY(event.offsetY);\r\n\r\n            // Set mouse movement in the viewport\r\n            MouseEvent.setMovementX(event.movementX);\r\n            MouseEvent.setMovementY(event.movementY);\r\n        };\r\n\r\n        // Mouse wheel event function definition\r\n        canvas2D.onwheel = function(event) {\r\n            MouseEvent.setWheelDelta(event.deltaY);\r\n        };\r\n    }\r\n    static resetMouseEvents() {\r\n        MouseEvent.setMouseDownEvent(false);\r\n        MouseEvent.setMouseUpEvent(false);\r\n        MouseEvent.setWheelDelta(0);\r\n        MouseEvent.setMovementX(0);\r\n        MouseEvent.setMovementY(0);\r\n    }\r\n}\r\n\r\nexport default EventHandler;","class Vector3 {\r\n    constructor(coordinates) {\r\n        this.set(coordinates);\r\n    }\r\n\r\n    get x () {\r\n        return this.v1;\r\n    }\r\n\r\n    get y () {\r\n        return this.v2;\r\n    }\r\n\r\n    get z () {\r\n        return this.v3;\r\n    }\r\n\r\n    get r () {\r\n        return this.v1;\r\n    }\r\n\r\n    get g () {\r\n        return this.v2;\r\n    }\r\n\r\n    get b () {\r\n        return this.v3;\r\n    }\r\n\r\n    set(coords) {\r\n        this.v1 = coords[0];\r\n        this.v2 = coords[1];\r\n        this.v3 = coords[2];\r\n    }\r\n\r\n    clone() {\r\n        return new Vector3([this.x, this.y, this.z]);\r\n    }\r\n\r\n    inverted() {\r\n        return new Vector3 ([-this.x, -this.y, -this.z]);\r\n    }\r\n\r\n    get magnitude() {\r\n        return Math.sqrt(this.v1*this.v1 + this.v2*this.v2 + this.v3*this.v3);\r\n    }\r\n\r\n    normalized() {\r\n        let out = new Vector3([0.0, 0.0, 0.0]);\r\n\r\n        // Set length of vector to 1\r\n        let magnitude = Math.sqrt(this.x*this.x + this.y*this.y + this.z*this.z);\r\n        if (magnitude > 0.001) {\r\n            out.set([\r\n                this.v1/magnitude,\r\n                this.v2/magnitude,\r\n                this.v3/magnitude\r\n            ]);\r\n        }\r\n        else {\r\n            out.set([\r\n                0.0,\r\n                0.0,\r\n                0.0\r\n            ]);\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    divideBy(scalar) {\r\n        this.v1 /= scalar;\r\n        this.v2 /= scalar;\r\n        this.v3 /= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    multipleBy(scalar) {\r\n        this.v1 *= scalar;\r\n        this.v2 *= scalar;\r\n        this.v3 *= scalar;\r\n\r\n        return this;\r\n    }\r\n\r\n    static distance(a, b) {\r\n        return Math.sqrt(\r\n            (b.v1-a.v1)*(b.v1-a.v1) +\r\n            (b.v2-a.v2)*(b.v2-a.v2) +\r\n            (b.v3-a.v3)*(b.v3-a.v3)\r\n        );\r\n    }\r\n\r\n    static add (A, B) {\r\n        return new Vector3 ([\r\n            A.v1 + B.v1,\r\n            A.v2 + B.v2,\r\n            A.v3 + B.v3\r\n        ]);\r\n    }\r\n\r\n    static subtract (A, B) {\r\n        return new Vector3 ([\r\n            A.v1 - B.v1,\r\n            A.v2 - B.v2,\r\n            A.v3 - B.v3\r\n        ]);\r\n    }\r\n\r\n    static crossProduct (A, B) {\r\n        return new Vector3 ([\r\n            (A.y*B.z - A.z*B.y),\r\n            -(A.x*B.z - A.z*B.x),\r\n            (A.x*B.y - A.y*B.x)\r\n        ]);\r\n    }\r\n\r\n    static dot (A, B) {\r\n        return (A.v1*B.v1) + (A.v2*B.v2) + (A.v3*B.v3);\r\n    }\r\n\r\n    static up() {\r\n        return new Vector3([0.0, 1.0, 0.0]);\r\n    }\r\n\r\n    static down() {\r\n        return new Vector3([0.0, -1.0, 0.0]);\r\n    }\r\n\r\n    static forward() {\r\n        return new Vector3([0.0, 0.0, 1.0]);\r\n    }\r\n\r\n    static backwards () {\r\n        return new Vector3([0.0, 0.0, -1.0]);\r\n    }\r\n\r\n    static left() {\r\n        return new Vector3([-1.0, 0.0, 0.0]);\r\n    }\r\n\r\n    static right() {\r\n        return new Vector3([1.0, 0.0, 0.0]);\r\n    }\r\n}\r\n\r\nexport default Vector3;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport Vector3 from './Vector3';\r\n\r\nclass Matrix4 {\r\n    // Returns an identity matrix\r\n    static identity () {\r\n        return [\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a translation matrix\r\n    static translation (tX, tY, tZ) {\r\n        return [\r\n            1,  0,  0,  0,\r\n            0,  1,  0,  0,\r\n            0,  0,  1,  0,\r\n            tX, tY, tZ, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a scaling matrix\r\n    static scaling (xScale, yScale, zScale) {\r\n        return [\r\n            xScale, 0,      0,      0,\r\n            0,      yScale, 0,      0,\r\n            0,      0,      zScale, 0,\r\n            0,      0,      0,      1\r\n        ];\r\n    }\r\n\r\n    static compose (xVec, yVec, zVec, posVec = new Vector3([0.0, 0.0, 0.0])) {\r\n        return [\r\n            xVec.x,    yVec.x,   zVec.x,   0,\r\n            xVec.y,    yVec.y,   zVec.y,   0,\r\n            xVec.z,    yVec.z,   zVec.z,   0,\r\n            posVec.x, posVec.y, posVec.z,  1,\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the x-axis\r\n    static rotationX (rad) {\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            1,  0,   0,   0,\r\n            0,  cos, sin, 0,\r\n            0, -sin, cos, 0,\r\n            0,  0,   0,   1\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the y-axis\r\n    static rotationY (rad) {\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            cos, 0, -sin, 0,\r\n            0,   1,  0,   0,\r\n            sin, 0,  cos, 0,\r\n            0,   0,  0,   1\r\n        ];\r\n    }\r\n\r\n    // Returns a rotation matrix for the z-axis\r\n    static rotationZ (rad) {\r\n        let sin = Math.sin(rad);\r\n        let cos = Math.cos(rad);\r\n        return [\r\n            cos, sin, 0, 0,\r\n            -sin, cos, 0, 0,\r\n            0,   0,   1, 0,\r\n            0,   0,   0, 1\r\n        ];\r\n    }\r\n\r\n    // Returns a perspective matrix\r\n    static perspective (fovy, aspect, near, far) {\r\n        let f = 1.0 / Math.tan(fovy/2);\r\n        let nf = 1 / (near-far);\r\n\r\n        return [\r\n            f/aspect, 0, 0,              0,\r\n            0,        f, 0,              0,\r\n            0,        0, (far+near)*nf, -1,\r\n            0,        0, 2*far*near*nf,  0\r\n        ];\r\n    }\r\n\r\n    // Translates a given matrix with given coordinates and returns the matrix combination\r\n    static translate (matrix, tX, tY, tZ) {\r\n        return this.multiply(this.translation(tX, tY, tZ), matrix);\r\n    }\r\n\r\n    // Scales a given matrix with given dimensions and returns the matrix combination\r\n    static scale (matrix, sX, sY, sZ) {\r\n        return this.multiply(this.scaling(sX, sY, sZ), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static rotateX (matrix, rad) {\r\n        return this.multiply(this.rotationX(rad), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static rotateY (matrix, rad) {\r\n        return this.multiply(this.rotationY(rad), matrix);\r\n    }\r\n\r\n    // Rotates a given matrix with given angle in radians and returns the matrix combination\r\n    static rotateZ (matrix, rad) {\r\n        return this.multiply(this.rotationZ(rad), matrix);\r\n    }\r\n\r\n    // Multiplies a given 4x4-matrix with given 4x1 vector and returns 4x1 vector\r\n    static multiplyVector (m, v) {\r\n        let out = [];\r\n        out[0] = m[0]*v[0] + m[4]*v[1] + m[8]*v[2]  + m[12]*v[3];\r\n        out[1] = m[1]*v[0] + m[5]*v[1] + m[9]*v[2]  + m[13]*v[3];\r\n        out[2] = m[2]*v[0] + m[6]*v[1] + m[10]*v[2] + m[14]*v[3];\r\n        out[3] = m[3]*v[0] + m[7]*v[1] + m[11]*v[2] + m[15]*v[3];\r\n        return out;\r\n    }\r\n\r\n    // Performs a matrix multiplication with two given matrices and returns the matrix combination\r\n    static multiply (a, b) {\r\n        let out =\r\n            [\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0,\r\n                0, 0, 0, 0\r\n            ];\r\n        let index = 0;\r\n        let i = 0;\r\n\r\n        while (i < 16) {\r\n            // Each column\r\n            for (let k = 0; k < 4; ++k) {\r\n                out[index] = (a[k]*b[i]) + (a[k+4]*b[i+1]) + (a[k+8]*b[i+2]) + (a[k+12]*b[i+3]);\r\n                ++index;\r\n            }\r\n            i = i + 4; // Jump to next row (go pass 4 indexes)\r\n        }\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Inverts a mat4\r\n     *\r\n     * @param {mat4} out the receiving matrix\r\n     * @param {mat4} a the source matrix\r\n     * @returns {mat4} out\r\n     *\r\n     * Source: https://github.com/toji/gl-matrix/blob/master/src/mat4.js\r\n     */\r\n    static invert (out, a) {\r\n        let a00 = a[0],\r\n            a01 = a[1],\r\n            a02 = a[2],\r\n            a03 = a[3];\r\n        let a10 = a[4],\r\n            a11 = a[5],\r\n            a12 = a[6],\r\n            a13 = a[7];\r\n        let a20 = a[8],\r\n            a21 = a[9],\r\n            a22 = a[10],\r\n            a23 = a[11];\r\n        let a30 = a[12],\r\n            a31 = a[13],\r\n            a32 = a[14],\r\n            a33 = a[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det) {\r\n            return null;\r\n        }\r\n        det = 1.0 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n        out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n        out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n        out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n        out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n        out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n        out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n        out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n        out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n        out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Rotates a mat4 by the given angle around the given axis\r\n     *\r\n     * @param {mat4} out the receiving matrix\r\n     * @param {mat4} a the matrix to rotate\r\n     * @param {Number} rad the angle to rotate the matrix by\r\n     * @param {Vector3} axis the axis to rotate around\r\n     * @returns {mat4} out\r\n     *\r\n     * Source: https://github.com/toji/gl-matrix/blob/master/src/mat4.js\r\n     */\r\n    static rotate (out, a, rad, axis) {\r\n        let x = axis.x,\r\n            y = axis.y,\r\n            z = axis.z;\r\n        let len = Math.sqrt(x * x + y * y + z * z);\r\n        let s = void 0,\r\n            c = void 0,\r\n            t = void 0;\r\n        let a00 = void 0,\r\n            a01 = void 0,\r\n            a02 = void 0,\r\n            a03 = void 0;\r\n        let a10 = void 0,\r\n            a11 = void 0,\r\n            a12 = void 0,\r\n            a13 = void 0;\r\n        let a20 = void 0,\r\n            a21 = void 0,\r\n            a22 = void 0,\r\n            a23 = void 0;\r\n        let b00 = void 0,\r\n            b01 = void 0,\r\n            b02 = void 0;\r\n        let b10 = void 0,\r\n            b11 = void 0,\r\n            b12 = void 0;\r\n        let b20 = void 0,\r\n            b21 = void 0,\r\n            b22 = void 0;\r\n\r\n        if (Math.abs(len) < 0.001) {\r\n            return null;\r\n        }\r\n\r\n        len = 1 / len;\r\n        x *= len;\r\n        y *= len;\r\n        z *= len;\r\n\r\n        s = Math.sin(rad);\r\n        c = Math.cos(rad);\r\n        t = 1 - c;\r\n\r\n        a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n        a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n        a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n        // Construct the elements of the rotation matrix\r\n        b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n        b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n        b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n        // Perform rotation-specific matrix multiplication\r\n        out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n        out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n        out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n        out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n        out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n        out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n        out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n        out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n        out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n        out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n        out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n        out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n        if (a !== out) {\r\n            // If the source and destination differ, copy the unchanged last row\r\n            out[12] = a[12];\r\n            out[13] = a[13];\r\n            out[14] = a[14];\r\n            out[15] = a[15];\r\n        }\r\n        return out;\r\n    }\r\n}\r\n\r\nexport default Matrix4;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\n//TODO: Implement Quaternion for handling rotations\r\n\r\nimport Matrix4 from './math/Matrix4';\r\nimport Vector3 from './math/Vector3';\r\n\r\nclass Transform {\r\n    constructor() {\r\n        this.position = new Vector3([0.0, 0.0, 0.0]);\r\n        this.rotation = new Vector3([0.0, 0.0, 0.0]);\r\n        this.scaling = new Vector3([1.0, 1.0, 1.0]);\r\n\r\n        this.matrix = Matrix4.identity();\r\n        this.localMatrix = Matrix4.identity();\r\n\r\n        this.customRotation = new Vector3([1.0, 0.0, 0.0]);\r\n        this.customRotationRad = 0.0;\r\n\r\n        this.parent = null;\r\n        this.children = [];\r\n    }\r\n\r\n    get xAxis() {\r\n        return new Vector3([this.matrix[0], this.matrix[4], this.matrix[8]]);\r\n    }\r\n\r\n    setScale(scale) {\r\n        this.scaling.set(scale);\r\n        this.composeMatrix();\r\n\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    setPosition(position) {\r\n        this.position.set(position);\r\n        this.composeMatrix();\r\n\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    setRotation (rotation) {\r\n        this.rotation.set(rotation);\r\n        this.composeMatrix();\r\n\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    translate(val) {\r\n        let rightVec = new Vector3([this.localMatrix[0]*val[0], this.localMatrix[4]*val[0], this.localMatrix[8]*val[0]]);\r\n        let upVec = new Vector3([this.localMatrix[1]*val[1], this.localMatrix[5]*val[1], this.localMatrix[9]*val[1]]);\r\n        let forwardVec = new Vector3([this.localMatrix[2]*val[2], this.localMatrix[6]*val[2], this.localMatrix[10]*val[2]]);\r\n\r\n        this.setPosition([\r\n            this.position.x + rightVec.x/this.scaling.x - upVec.x/this.scaling.x - forwardVec.x/this.scaling.x,\r\n            this.position.y - rightVec.y/this.scaling.y + upVec.y/this.scaling.y - forwardVec.y/this.scaling.y,\r\n            this.position.z - rightVec.z/this.scaling.z - upVec.z/this.scaling.z + forwardVec.z/this.scaling.z,\r\n        ]);\r\n    }\r\n\r\n    rotate (rot) {\r\n        this.setRotation([\r\n            this.rotation.x + rot[0],\r\n            this.rotation.y + rot[1],\r\n            this.rotation.z + rot[2]\r\n        ]);\r\n    }\r\n\r\n    setAxisRotation(axis, angle) {\r\n        this.customRotation.set([axis.x, axis.y, axis.z]);\r\n        this.customRotationRad = (Math.PI * angle) / 180.0;\r\n\r\n        this.composeMatrix();\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    setParent(parentTransform) {\r\n        this.parent = parentTransform;\r\n        this.matrix = Matrix4.multiply(this.parent.matrix, this.localMatrix);\r\n\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    removeParent() {\r\n        this.parent = null;\r\n        this.composeMatrix();\r\n    }\r\n\r\n    addChild(child) {\r\n        this.children.push(child);\r\n        child.setParent(this);\r\n    }\r\n\r\n    invert () {\r\n        return Matrix4.invert(this.matrix, this.matrix);\r\n    }\r\n\r\n    composeMatrix () {\r\n        let scaleMatrix = Matrix4.scaling(this.scaling.x, this.scaling.y, this.scaling.z);\r\n\r\n        let rotationMatrix = Matrix4.rotateZ(Matrix4.identity(), (this.rotation.z*Math.PI/180));\r\n        rotationMatrix = Matrix4.rotateX(rotationMatrix, (this.rotation.x*Math.PI/180));\r\n        rotationMatrix = Matrix4.rotateY(rotationMatrix, (this.rotation.y*Math.PI/180));\r\n        Matrix4.rotate(rotationMatrix, rotationMatrix, this.customRotationRad, this.customRotation);\r\n\r\n        let translationMatrix = Matrix4.translation(this.position.x, this.position.y, this.position.z);\r\n\r\n        this.localMatrix = Matrix4.multiply(rotationMatrix, scaleMatrix);\r\n        this.localMatrix = Matrix4.multiply(translationMatrix, this.localMatrix);\r\n\r\n        if (this.parent) {\r\n            this.matrix = Matrix4.multiply(this.parent.matrix, this.localMatrix);\r\n        }\r\n        else {\r\n            this.matrix = this.localMatrix;\r\n        }\r\n\r\n    }\r\n\r\n    updateChildrenTransforms() {\r\n        for (let i = 0; i < this.children.length; ++i) {\r\n            this.children[i].setParent(this);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Transform;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport Transform from \"./Transform\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n\r\n        this.currentTime = 0.0;\r\n        this.transform = new Transform();\r\n    }\r\n\r\n    setPosition(position) {\r\n        this.transform.setPosition(position);\r\n    }\r\n\r\n    setRotation(rotation) {\r\n        this.transform.setRotation(rotation);\r\n    };\r\n\r\n    setScale(scale) {\r\n        this.transform.setScale(scale);\r\n    }\r\n\r\n    addGameObject(gameObject) {\r\n        this.transform.addChild(gameObject.transform);\r\n        this.sceneObjects.push(gameObject);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        this.transform.addChild(lightSource.transform);\r\n        // Update the shaders\r\n        this.shaders.forEach((shader)=> {\r\n            shader.activate();\r\n            let lightCount = this.lightSources.length;\r\n            let arrayName = \"pointLights[\" + lightCount + \"].\";\r\n\r\n            // Get uniform locations\r\n            let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\r\n            let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\r\n            let attenuationUniformLoc = shader.getUniformLoc(arrayName + \"attenuationConstants\");\r\n            let lightCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n\r\n            // Set the uniforms in the fragment shader\r\n            shader.setUniformVec3f(positionUniformLoc, lightSource.worldPosition);\r\n            shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\r\n            shader.setUniformVec2f(attenuationUniformLoc, [lightSource.attenuationConstants.kLinear, lightSource.attenuationConstants.kQuadratic]);\r\n            shader.setUniformInt(lightCountUniformLoc, lightCount);\r\n        });\r\n\r\n        // Add light source to the list\r\n        this.lightSources.push(lightSource);\r\n    }\r\n\r\n    // Used for dynamic light sources\r\n    updateLightPositions() {\r\n        // Activate the main shader\r\n        let shader = this.shaders.get(\"phong\");\r\n        shader.activate();\r\n\r\n        for (let i = 0; i < this.lightSources.length; ++i) {\r\n            let lightSource = this.lightSources[i];\r\n            let lightCount = this.lightSources.length;\r\n            let arrayName = \"pointLights[\" + i + \"].\";\r\n\r\n            // Get uniform locations\r\n            let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\r\n            let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\r\n            let attenuationUniformLoc = shader.getUniformLoc(arrayName + \"attenuationConstants\");\r\n            let lightCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n\r\n            // Set the uniforms in the fragment shader\r\n            shader.setUniformVec3f(positionUniformLoc, lightSource.worldPosition);\r\n            shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\r\n            shader.setUniformVec2f(attenuationUniformLoc, [lightSource.attenuationConstants.kLinear, lightSource.attenuationConstants.kQuadratic]);\r\n            shader.setUniformInt(lightCountUniformLoc, lightCount);\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(object.shaderName));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n\r\n    update(timeStep) {\r\n        this.currentTime += timeStep;\r\n        let shader = this.shaders.get(\"procedural\");\r\n        shader.activate();\r\n        let timeUniformLocation = shader.getUniformLoc(\"time\");\r\n        shader.setUniformFloat(timeUniformLocation, this.currentTime);\r\n\r\n        this.sceneObjects.forEach((object) => {\r\n            object.update(timeStep);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\n// JavaScript\r\nimport Transform from './Transform';\r\nimport Vector3 from './math/Vector3';\r\n\r\nclass Camera {\r\n    constructor(shaders) {\r\n        this.transform = new Transform();\r\n        this.shaders = shaders;\r\n        this.updateUniforms();\r\n    }\r\n\r\n    get position() {\r\n        return this.transform.position;\r\n    }\r\n\r\n    get rotation() {\r\n        return this.transform.rotation;\r\n    }\r\n\r\n    get scale() {\r\n        return this.transform.scaling;\r\n    }\r\n\r\n    get right() {\r\n        return new Vector3([this.transform.matrix[0], this.transform.matrix[4], this.transform.matrix[8]]);\r\n    }\r\n\r\n    get up () {\r\n        return new Vector3([this.transform.matrix[1], this.transform.matrix[5], this.transform.matrix[9]]);\r\n    }\r\n\r\n    get forward() {\r\n        return new Vector3([-this.transform.matrix[2], -this.transform.matrix[6], -this.transform.matrix[10]]);\r\n    }\r\n\r\n    translate (val) {\r\n        let rightVec = new Vector3([this.transform.matrix[0]*val[0], this.transform.matrix[4]*val[0], this.transform.matrix[8]*val[0]]);\r\n        let upVec = new Vector3([this.transform.matrix[1]*val[1], this.transform.matrix[5]*val[1], this.transform.matrix[9]*val[1]]);\r\n        let forwardVec = new Vector3([this.transform.matrix[2]*val[2], this.transform.matrix[6]*val[2], this.transform.matrix[10]*val[2]]);\r\n\r\n        this.setPosition([\r\n            this.transform.position.x + rightVec.x + upVec.x + forwardVec.x,\r\n            this.transform.position.y + rightVec.y + upVec.y + forwardVec.y,\r\n            this.transform.position.z + rightVec.z + upVec.z + forwardVec.z,\r\n        ]);\r\n    }\r\n\r\n    rotate (rot) {\r\n        this.setRotation([\r\n            this.transform.rotation.x + rot[0],\r\n            this.transform.rotation.y + rot[1],\r\n            this.transform.rotation.z + rot[2]\r\n        ]);\r\n    }\r\n\r\n    setPosition(cameraPosition) {\r\n        this.transform.setPosition(cameraPosition);\r\n        this.transform.invert();\r\n        this.updateUniforms();\r\n    }\r\n\r\n    setRotation(cameraRotation) {\r\n        this.transform.setRotation(cameraRotation);\r\n        this.transform.invert();\r\n        this.updateUniforms();\r\n    }\r\n\r\n    rotateX (angle) {\r\n        this.setRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\r\n    }\r\n\r\n    rotateY (angle) {\r\n        this.setRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\r\n    }\r\n\r\n    updateUniforms() {\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setCameraViewUniform(this.transform.matrix);\r\n            shader.setCameraViewPosition(this.transform.position);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Camera;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport Transform from './Transform';\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass GameObject {\r\n    constructor (name) {\r\n        this.nameTag = name;\r\n        this.meshes = [];\r\n        this.transform = new Transform();\r\n        this.shaderName = \"phong\";\r\n    }\r\n\r\n    get worldPosition() {\r\n        return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\r\n    }\r\n\r\n    setNameTag(name) {\r\n        this.nameTag = name;\r\n    }\r\n\r\n    translate (val) {\r\n        this.transform.translate(val);\r\n    }\r\n\r\n    rotate(rot) {\r\n        this.transform.rotate(rot);\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.transform.setPosition(pos);\r\n    }\r\n\r\n    setRotation(rot) {\r\n        this.transform.setRotation(rot);\r\n    }\r\n\r\n    setScale(scale) {\r\n        this.transform.setScale(scale);\r\n    }\r\n\r\n    addMesh (mesh) {\r\n        this.transform.addChild(mesh.transform);\r\n        this.meshes.push(mesh);\r\n    }\r\n\r\n    setShader(name) {\r\n        this.shaderName = name;\r\n    }\r\n\r\n    render(shader) {\r\n        for (let i = 0; i < this.meshes.length; ++i) {\r\n            this.meshes[i].render(shader);\r\n        }\r\n    }\r\n\r\n    update(timeStep) {\r\n        this.customUpdate(timeStep);\r\n    }\r\n\r\n    customUpdate(timeStep) {\r\n\r\n    }\r\n}\r\n\r\nexport default GameObject;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nclass ShapeGenerator {\r\n    static createCube(x = 1.0, y = 1.0, z = 1.0) {\r\n        // Vertex coordinates, normals and texture coordinates\r\n        let vertexArray = [\r\n            // Vertex         Normal             Texture coordinates\r\n            // Vertex 0\r\n            -x, -y, -z,      0.0, -1.0,  0.0,     0.0, 1.0,\r\n            -x, -y, -z,     -1.0,  0.0,  0.0,     0.0, 1.0,\r\n            -x, -y, -z,      0.0,  0.0,  -1.0,    1.0, 1.0,\r\n\r\n            // Vertex 1\r\n            -x, -y,  z,     0.0, -1.0,  0.0,      0.0, 0.0,\r\n            -x, -y,  z,     0.0,  0.0, 1.0,       0.0, 1.0,\r\n            -x, -y,  z,    -1.0,  0.0,  0.0,      1.0, 1.0,\r\n\r\n            // Vertex 2\r\n            x, -y,  z,      0.0, -1.0,  0.0,      1.0, 0.0,\r\n            x, -y,  z,      0.0,  0.0, 1.0,       1.0, 1.0,\r\n            x, -y,  z,      1.0,  0.0,  0.0,      0.0, 1.0,\r\n\r\n            // Vertex 3\r\n            x, -y, -z,      0.0, -1.0,  0.0,      1.0, 1.0,\r\n            x, -y, -z,      0.0,  0.0,  -1.0,     0.0, 1.0,\r\n            x, -y, -z,      1.0,  0.0,  0.0,      1.0, 1.0,\r\n\r\n            // Vertex 4\r\n            -x, y, -z,     -1.0,  0.0,  0.0,      0.0, 0.0,\r\n            -x, y, -z,      0.0,  0.0,  -1.0,     1.0, 0.0,\r\n            -x, y, -z,      0.0,  1.0,  0.0,      0.0, 0.0,\r\n\r\n            // Vertex 5\r\n            -x, y, z,      0.0,  0.0, 1.0,        0.0, 0.0,\r\n            -x, y, z,     -1.0,  0.0,  0.0,       1.0, 0.0,\r\n            -x, y, z,      0.0,  1.0,  0.0,       0.0, 1.0,\r\n\r\n            // Vertex 6\r\n            x, y, z,       0.0,  0.0, 1.0,        1.0, 0.0,\r\n            x, y, z,       1.0,  0.0,  0.0,       0.0, 0.0,\r\n            x, y, z,       0.0,  1.0,  0.0,       1.0, 1.0,\r\n\r\n            // Vertex 7\r\n            x, y, -z,       0.0,  0.0,  -1.0,     0.0, 0.0,\r\n            x, y, -z,       1.0,  0.0,  0.0,      1.0, 0.0,\r\n            x, y, -z,       0.0,  1.0,  0.0,      1.0, 0.0\r\n        ];\r\n\r\n        // Vertex indices\r\n        let indexArray = [\r\n            // Bottom\r\n            0, 9, 6,  // v0, v3, v2\r\n            6, 3, 0,  // v2, v1, v0\r\n\r\n            // Front\r\n            4, 7, 18,  // v1, v2, v6\r\n            18, 15, 4, // v6, v5, v1\r\n\r\n            // Left\r\n            1, 5, 16,  // v0, v1, v5\r\n            16, 12, 1, // v5, v4, v0\r\n\r\n            // Back\r\n            2, 13, 21, // v0, v4, v7\r\n            21, 10, 2, // v7, v3, v0\r\n\r\n            // Right\r\n            8, 11, 22, // v2, v3, v7\r\n            22, 19, 8, // v7, v6, v2\r\n\r\n            // Top\r\n            14, 17, 20, // v4, v5, v6\r\n            20, 23, 14  // v6, v7, v4\r\n        ];\r\n\r\n        let totalTriangles = 12;\r\n        let totalVertices = totalTriangles*3;\r\n\r\n        return {\r\n            numVertices: totalVertices,\r\n            vertices: vertexArray,\r\n            indices: indexArray\r\n        };\r\n    }\r\n\r\n    static createSphere(segments, radius) {\r\n        let numHorizontalSegments = segments;\r\n        // Minium amount of horizontal segments is 2\r\n        if (numHorizontalSegments < 2) {\r\n            numHorizontalSegments = 2;\r\n        }\r\n\r\n        // Number of vertical segments of the sphere\r\n        let numVerticalSegments = 2 * numHorizontalSegments;\r\n        let numVertices = 1 + (numHorizontalSegments - 1) * numVerticalSegments + 1; // top + middle + bottom\r\n        let numTriangles = numVerticalSegments + (numHorizontalSegments - 2) * 4 * numHorizontalSegments + numVerticalSegments; // top + middle + bottom\r\n\r\n        // Floats per row: position(x,y,z), normal(x,y,z), texture(s,t)\r\n        let stride = 8;\r\n        let vertices = []; // Initialize vertex array\r\n        let indices = []; // Initialize index array\r\n\r\n        /** Generate vertex array **/\r\n        // Bottom vertex\r\n        vertices[0] = 0.0; vertices[1] = -radius; vertices[2] = 0.0; // Coordinates\r\n        vertices[3] = 0.0; vertices[4] = -1.0;    vertices[5] = 0.0; // Normal\r\n        vertices[6] = 0.5; vertices[7] = 0.0;\r\n\r\n        const PI = Math.PI;\r\n\r\n        let sampleRate = PI / numHorizontalSegments; // Number of steps\r\n        let theta = -PI + sampleRate; // Go from bottom to top (Y € -PI < theta < PI )\r\n        let  phi = 0.0; // Begin at Z = 0 (Z € 0 < phi < 2PI )\r\n\r\n        // Generate middle part vertices with normals\r\n        let index = stride - 1; // Skip first 7 (the bottom vertex with normal and texture coordinates already specified)\r\n        for (let i = 0; i < (numHorizontalSegments - 1); ++i) {\r\n            let Y = Math.cos(theta); // Y-coordinate\r\n            let R = Math.sin(theta); // XZ-plane\r\n\r\n            phi = 0.0;\r\n            for (let j = 0; j < numVerticalSegments; ++j) {\r\n                // Vertex (x, y, z)\r\n                vertices[++index] = radius * R * Math.sin(phi);\r\n                vertices[++index] = radius * Y;\r\n                vertices[++index] = radius * R * Math.cos(phi);\r\n                // Normal (x, y, z)\r\n                vertices[++index] = R * Math.sin(phi);\r\n                vertices[++index] = Y;\r\n                vertices[++index] = R * Math.cos(phi);\r\n                // Texture Coordinates (s, t)\r\n                vertices[++index] = phi / (2.0 * PI);\r\n                vertices[++index] = 1.0 + (theta / PI);\r\n\r\n                phi += sampleRate;\r\n            }\r\n            theta += sampleRate;\r\n        }\r\n\r\n        // Top vertex\r\n        vertices[++index] = 0.0; vertices[++index] = radius; vertices[++index] = 0.0; // Coordinates\r\n        vertices[++index] = 0.0; vertices[++index] = 1.0;    vertices[++index] = 0.0; // Normal\r\n        vertices[++index] = 0.5; vertices[++index] = 1.0;\r\n\r\n        /** Generate index array */\r\n        // Bottom cap\r\n        index = -1;\r\n        for (let i = 0; i < numVerticalSegments; ++i) {\r\n            indices[++index] = 0;\r\n            if ((i + 2) <= numVerticalSegments) {\r\n                indices[++index] = i + 2;\r\n            }\r\n            else {\r\n                indices[++index] = (i + 2) - numVerticalSegments;\r\n            }\r\n            indices[++index] = i + 1;\r\n        }\r\n\r\n        // Middle part\r\n        let v0 = 1;\r\n        for (let i = 0; i < (numHorizontalSegments - 2); i++) {\r\n            for (let j = 0; j < (numVerticalSegments - 1); ++j) {\r\n                // One rectangle at a time (two triangles)\r\n                indices[++index] = v0;\r\n                indices[++index] = v0 + 1;\r\n                indices[++index] = numVerticalSegments + v0;\r\n                indices[++index] = v0 + 1;\r\n                indices[++index] = numVerticalSegments + v0 + 1;\r\n                indices[++index] = numVerticalSegments + v0;\r\n                ++v0;\r\n            }\r\n            indices[++index] = v0;\r\n            indices[++index] = (v0 + 1) - numVerticalSegments;\r\n            indices[++index] = numVerticalSegments + v0;\r\n            indices[++index] = (v0 + 1) - numVerticalSegments;\r\n            indices[++index] = v0 + 1;\r\n            indices[++index] = numVerticalSegments + v0;\r\n            ++v0;\r\n        }\r\n\r\n        // Top cap\r\n        let lastVertexIndex = numVertices - 1;\r\n        for (let i = 0; i < numVerticalSegments; ++i) {\r\n            indices[++index] = lastVertexIndex;\r\n            if ((lastVertexIndex - 2 - i) >= lastVertexIndex - numVerticalSegments) {\r\n                indices[++index] = lastVertexIndex - 2 - i;\r\n            }\r\n            else {\r\n                indices[++index] = lastVertexIndex - numVerticalSegments - 1;\r\n            }\r\n            indices[++index] = lastVertexIndex - 1 - i;\r\n        }\r\n        indices[(numTriangles * 3) - 2] = (lastVertexIndex - 1);\r\n\r\n        return {\r\n            numVertices: indices.length,\r\n            vertices: vertices,\r\n            indices: indices\r\n        };\r\n    }\r\n\r\n    static createCylinderSmooth (vertSegs, horizSegs, radius, height) {\r\n        if (horizSegs < 1) {\r\n            horizSegs = 1;\r\n        }\r\n        if (vertSegs < 4) {\r\n            vertSegs = 4;\r\n        }\r\n\r\n        const stride = 8;\r\n        let vertices = [];\r\n        let indices = [];\r\n\r\n        // Bottom center\r\n        // Vertex coordinates\r\n        vertices[0] = 0.0; vertices[1] = -(height / 2.0); vertices[2] = 0.0;\r\n        // Normal coordinates\r\n        vertices[3] = 0.0; vertices[4] = -1.0;            vertices[5] = 0.0;\r\n        // Texture coordinates\r\n        vertices[6] = 0.5; vertices[7] = 0.5;\r\n\r\n        const PI = Math.PI;\r\n\r\n        // Go from bottom to top (Y € -PI < theta < PI )\r\n        let theta = -PI;\r\n        // Begin at Z = 0 (Z € 0 < phi < 2PI )\r\n        let phi = 0.0;\r\n\r\n        // Start on index 7\r\n        let index = stride - 1;\r\n        // Generate vertices and normals for bottom circle plane (all normals should be (0.0, -1.0, 0.0))\r\n        for (let j = 0; j < vertSegs; ++j) {\r\n            // Vertex (x, y, z)\r\n            vertices[++index] = radius * Math.sin(phi);\r\n            vertices[++index] = -(height / 2.0); // The bottom circle is on the plane y = -height/2\r\n            vertices[++index] = radius * Math.cos(phi);\r\n            // Normal (x, y, z)\r\n            vertices[++index] = 0.0;\r\n            vertices[++index] = -1.0;\r\n            vertices[++index] = 0.0;\r\n            // Textures (s, t)\r\n            vertices[++index] = Math.cos(phi) * 0.5 + 0.5;\r\n            vertices[++index] = Math.sin(phi + PI) * 0.5 + 0.5;\r\n\r\n            phi += (2.0 * PI) / vertSegs;\r\n        }\r\n\r\n        // Begin at Z = 0 (Z € 0 < phi < 2PI )\r\n        phi = 0.0;\r\n        // Generate middle part vertices with normals (from bottom to top)\r\n        for (let i = 0; i < (horizSegs + 1); ++i) {\r\n            let y = Math.cos(theta);\r\n            for (let j = 0; j < vertSegs; ++j) {\r\n                // Vertex (x, y, z)\r\n                vertices[++index] = radius * Math.sin(phi);\r\n                vertices[++index] = (height / 2.0) * y;\r\n                vertices[++index] = radius * Math.cos(phi);\r\n                // Normal (x, y, z)\r\n                vertices[++index] = Math.sin(phi);\r\n                vertices[++index] = y;\r\n                vertices[++index] = Math.cos(phi);\r\n                // Textures (s, t)\r\n                vertices[++index] = phi/(2.0*PI);\r\n                vertices[++index] = Math.abs(y * 0.5 - 0.5);\r\n\r\n                phi += (2.0 * PI) / vertSegs;\r\n            }\r\n            phi = 0.0;\r\n            theta += PI / horizSegs;\r\n        }\r\n\r\n        phi = 0.0;\r\n        // Generate vertices and normals for top circle plane (all normals should be (0.0, 1.0, 0.0))\r\n        for (let j = 0; j < vertSegs; ++j) {\r\n            // Vertex (x, y, z)\r\n            vertices[++index] = radius * Math.sin(phi);\r\n            vertices[++index] = (height / 2.0);\r\n            vertices[++index] = radius * Math.cos(phi);\r\n            // Normal (x, y, z)\r\n            vertices[++index] = 0.0;\r\n            vertices[++index] = 1.0;\r\n            vertices[++index] = 0.0;\r\n            // Textures (s, t)\r\n            vertices[++index] = Math.cos(phi) * 0.5 + 0.5;\r\n            vertices[++index] = Math.sin(phi + PI) * 0.5 + 0.5;\r\n\r\n            phi += (2.0 * PI) / vertSegs;\r\n        }\r\n\r\n        // Top center vertex, normal and texture coordinates\r\n        vertices[++index] = 0.0; vertices[++index] = (height / 2.0); vertices[++index] = 0.0;\r\n        vertices[++index] = 0.0; vertices[++index] = 1.0;            vertices[++index] = 0.0;\r\n        vertices[++index] = 0.5; vertices[++index] = 0.5;\r\n\r\n        /* Generate Index Array */\r\n        // Bottom circle plane\r\n        index = -1;\r\n        for (let i = 0; i < vertSegs; ++i) {\r\n            indices[++index] = 0;\r\n            if ((i + 2) <= vertSegs) {\r\n                indices[++index] = i + 2;\r\n            }\r\n            else {\r\n                indices[++index] = (i + 2) - vertSegs;\r\n            }\r\n            indices[++index] = i + 1;\r\n        }\r\n\r\n        // Middle part\r\n        let v0 = vertSegs + 1;\r\n        for (let i = 0; i < horizSegs; i++) {\r\n            for (let j = 0; j < (vertSegs - 1); ++j) {\r\n                // One rectangle at a time (two triangles)\r\n                indices[++index] = v0;\r\n                indices[++index] = v0 + 1;\r\n                indices[++index] = vertSegs + v0;\r\n                indices[++index] = v0 + 1;\r\n                indices[++index] = vertSegs + v0 + 1;\r\n                indices[++index] = vertSegs + v0;\r\n                ++v0;\r\n            }\r\n            indices[++index] = v0;\r\n            indices[++index] = (v0 + 1) - vertSegs;\r\n            indices[++index] = vertSegs + v0;\r\n            indices[++index] = (v0 + 1) - vertSegs;\r\n            indices[++index] = v0 + 1;\r\n            indices[++index] = vertSegs + v0;\r\n            ++v0;\r\n        }\r\n\r\n        let numVertices = (4 * vertSegs) + 2 + (vertSegs * (horizSegs - 1));\r\n        // Top circle plane\r\n        let lastVertexIndex = numVertices - 1;\r\n        for (let i = 0; i < vertSegs; ++i) {\r\n            indices[++index] = lastVertexIndex;\r\n            if ((lastVertexIndex - 2 - i) >= lastVertexIndex - vertSegs) {\r\n                indices[++index] = lastVertexIndex - 2 - i;\r\n            }\r\n            else {\r\n                indices[++index] = lastVertexIndex - 1;\r\n            }\r\n            indices[++index] = lastVertexIndex - 1 - i;\r\n        }\r\n\r\n        return {\r\n            numVertices: indices.length,\r\n            vertices: vertices,\r\n            indices: indices\r\n        };\r\n    }\r\n\r\n    static createCylinderSharp(vertSegs, radius, height) {\r\n        const horizSegs = 1;\r\n\r\n        if (vertSegs < 4) {\r\n            vertSegs = 4;\r\n        }\r\n        const stride = 8;\r\n        let vertices = [];\r\n        let indices = [];\r\n\r\n        // Bottom center\r\n        // Vertex coordinates\r\n        vertices[0] = 0.0; vertices[1] = -(height / 2.0); vertices[2] = 0.0;\r\n        // Normal coordinates\r\n        vertices[3] = 0.0; vertices[4] = -1.0;            vertices[5] = 0.0;\r\n        // Texture coordinates\r\n        vertices[6] = 0.5; vertices[7] = 0.5;\r\n\r\n        const PI = Math.PI;\r\n\r\n        // Go from bottom to top (Y € -PI < theta < PI )\r\n        let theta = -PI;\r\n        // Begin at Z = 0 (Z € 0 < phi < 2PI )\r\n        let phi = 0.0;\r\n\r\n        let index = stride - 1;\r\n        // Generate vertices and normals for bottom circle plane (all normals should be (0.0, -1.0, 0.0))\r\n        for (let j = 0; j < vertSegs; ++j) {\r\n            // Vertex (x, y, z)\r\n            vertices[++index] = radius * Math.sin(phi);\r\n            vertices[++index] = -(height / 2.0); // The bottom circle is on the plane y = -height/2\r\n            vertices[++index] = radius * Math.cos(phi);\r\n            // Normal (x, y, z)\r\n            vertices[++index] = 0.0;\r\n            vertices[++index] = -1.0;\r\n            vertices[++index] = 0.0;\r\n            // Textures (s, t)\r\n            vertices[++index] = Math.cos(phi) * 0.5 + 0.5;\r\n            vertices[++index] = Math.sin(phi + PI) * 0.5 + 0.5;\r\n\r\n            phi += (2.0 * PI) / vertSegs;\r\n        }\r\n\r\n        // Begin at Z = 0 (Z € 0 < phi < 2PI )\r\n        phi = 0.0;\r\n        // Generate middle part vertices with normals (from bottom to top)\r\n        for (let i = 0; i < (horizSegs + 1); ++i) {\r\n            let y = Math.cos(theta);\r\n            // Two vertices each iteration which belong to the same face\r\n            for (let j = 0; j < vertSegs; ++j) {\r\n                let phiNext = phi + (2.0 * PI) / vertSegs;\r\n                // First Vertex\r\n                // Vertex (x, y, z)\r\n                vertices[++index] = radius * Math.sin(phi);\r\n                vertices[++index] = (height / 2.0) * y;\r\n                vertices[++index] = radius * Math.cos(phi);\r\n                // Normal (x, y, z)\r\n                vertices[++index] = Math.sin(phi) + Math.sin(phiNext);\r\n                vertices[++index] = y + y;\r\n                vertices[++index] = Math.cos(phi) + Math.cos(phiNext);\r\n\r\n                // Textures (s, t)\r\n                vertices[++index] = phi / (2.0*PI);\r\n                vertices[++index] = Math.abs(y * 0.5 - 0.5);\r\n\r\n                // Second Vertex\r\n                // Vertex (x, y, z)\r\n                vertices[++index] = radius * Math.sin(phiNext);\r\n                vertices[++index] = (height / 2.0) * y;\r\n                vertices[++index] = radius * Math.cos(phiNext);\r\n                // Normal (x, y, z)\r\n                vertices[++index] = Math.sin(phi) + Math.sin(phiNext);\r\n                vertices[++index] = y + y;\r\n                vertices[++index] = Math.cos(phi) + Math.cos(phiNext);\r\n\r\n                // Textures (s, t)\r\n                vertices[++index] = phiNext / (2.0*PI);\r\n                vertices[++index] = Math.abs(y * 0.5 - 0.5);\r\n\r\n                phi = phiNext;\r\n            }\r\n            vertices[index - 1] = 1.0; // Last vertex s-texture coordinate is always 1\r\n\r\n            phi = 0.0;\r\n            theta += PI / horizSegs;\r\n        }\r\n\r\n        // Reset phi to 0\r\n        phi = 0.0;\r\n        // Generate vertices and normals for top circle plane (all normals should be (0.0, 1.0, 0.0))\r\n        for (let j = 0; j < vertSegs; ++j) {\r\n            // Vertex (x, y, z)\r\n            vertices[++index] = radius * Math.sin(phi);\r\n            vertices[++index] = (height / 2.0);\r\n            vertices[++index] = radius * Math.cos(phi);\r\n            // Normal (x, y, z)\r\n            vertices[++index] = 0.0;\r\n            vertices[++index] = 1.0;\r\n            vertices[++index] = 0.0;\r\n            // Textures (s, t)\r\n            vertices[++index] = Math.cos(phi) * 0.5 + 0.5;\r\n            vertices[++index] = Math.sin(phi + PI) * 0.5 + 0.5;\r\n\r\n            phi += (2.0 * PI) / vertSegs;\r\n        }\r\n\r\n        // Top center vertex, normal and texture coordinates\r\n        vertices[++index] = 0.0; vertices[++index] = (height / 2.0); vertices[++index] = 0.0;\r\n        vertices[++index] = 0.0; vertices[++index] = 1.0;            vertices[++index] = 0.0;\r\n        vertices[++index] = 0.5; vertices[++index] = 0.5;\r\n\r\n        /* Generate Index Array */\r\n        // Bottom circle plane\r\n        index = -1;\r\n        for (let i = 0; i < vertSegs; ++i) {\r\n            indices[++index] = 0;\r\n\r\n            if ((i + 2) <= vertSegs) {\r\n                indices[++index] = i + 2;\r\n            }\r\n            else {\r\n                indices[++index] = (i + 2) - vertSegs;\r\n            }\r\n\r\n            indices[++index] = i + 1;\r\n        }\r\n\r\n        // Middle part\r\n        let v0 = vertSegs + 1;\r\n        for (let i = 0; i < horizSegs; i++) {\r\n            for (let j = 0; j < vertSegs; ++j) {\r\n                // One rectangle at a time (two triangles)\r\n                indices[++index] = v0;\r\n                indices[++index] = v0 + 1;\r\n                indices[++index] = 2 * vertSegs + v0;\r\n\r\n                indices[++index] = v0 + 1;\r\n                indices[++index] = 2* vertSegs + v0 + 1;\r\n                indices[++index] = 2 * vertSegs + v0;\r\n                v0 = v0 + 2;\r\n            }\r\n        }\r\n\r\n        // Top circle plane\r\n        let numVertices = 6 * vertSegs + 2;\r\n        let lastVertexIndex = numVertices - 1;\r\n        for (let i = 0; i < vertSegs; ++i) {\r\n            indices[++index] = lastVertexIndex;\r\n\r\n            if ((lastVertexIndex - 2 - i) >= lastVertexIndex - vertSegs) {\r\n                indices[++index] = lastVertexIndex - 2 - i;\r\n            }\r\n            else {\r\n                indices[++index] = lastVertexIndex - 1;\r\n            }\r\n\r\n            indices[++index] = lastVertexIndex - 1 - i;\r\n        }\r\n\r\n        return {\r\n            numVertices: indices.length,\r\n            vertices: vertices,\r\n            indices: indices\r\n        };\r\n    }\r\n\r\n    static createPlane (WIDTH, HEIGHT, textureWidth = -1.0, textureHeight = -1.0) {\r\n        // Textire coordiantes\r\n        let s, t;\r\n        if (textureWidth > 0.0001) {\r\n            s = WIDTH / textureWidth;\r\n        }\r\n        else {\r\n            s = 1.0;\r\n        }\r\n\r\n        if (textureHeight > 0.0001) {\r\n            t = HEIGHT / textureHeight;\r\n        }\r\n        else {\r\n            t = 1.0;\r\n        }\r\n\r\n        let vertexData = [\r\n            // Position Coordinates                 // Normals       // Texture coordinates\r\n            -(WIDTH / 2.0), 0.0, -(HEIGHT / 2.0),   0.0, 1.0, 0.0,   0.0, 0.0, // Upper left\r\n             (WIDTH / 2.0), 0.0, -(HEIGHT / 2.0),   0.0, 1.0, 0.0,   s, 0.0, // Upper right\r\n             (WIDTH / 2.0), 0.0,  (HEIGHT / 2.0),   0.0, 1.0, 0.0,   s, t, // Lower right\r\n            -(WIDTH / 2.0), 0.0,  (HEIGHT / 2.0),   0.0, 1.0, 0.0,   0.0, t  // Lower left\r\n        ];\r\n\r\n        let indexData = [\r\n            0, 2, 1, // First triangle\r\n            0, 3, 2 // Second triangle\r\n        ];\r\n\r\n        let numVertices = 4;\r\n        let numTriangles = 2;\r\n        let stride = 8;\r\n        console.log(\"Vertices before: \" + (numVertices * stride));\r\n        let vertices = [];\r\n        console.log(\"Vertices before: \" + (numTriangles * 3));\r\n        let indices = [];\r\n\r\n        for (let i = 0; i < (numVertices * stride); ++i) {\r\n            vertices[i] = vertexData[i];\r\n        }\r\n\r\n        for (let i = 0; i < (numTriangles * 3); ++i) {\r\n            indices[i] = indexData[i];\r\n        }\r\n\r\n        return {\r\n            numVertices: numVertices,\r\n            vertices: vertices,\r\n            indices: indices\r\n        };\r\n    }\r\n}\r\n\r\nexport default ShapeGenerator;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport Transform from \"./Transform\";\r\nimport ShapeGenerator from \"./ShapeGenerator\";\r\n\r\nclass Mesh {\r\n    constructor(gl) {\r\n        this.gl = gl;\r\n\r\n        this.totalVertices = 0;\r\n\r\n        this.color = [0.5, 0.5, 0.5];\r\n        this.drawMode = this.gl.TRIANGLES;\r\n\r\n        this.transform = new Transform();\r\n    }\r\n\r\n    setDrawMode(drawMode) {\r\n        this.drawMode = drawMode;\r\n    }\r\n\r\n    setColor(color) {\r\n        this.color = color;\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.transform.setPosition(pos);\r\n    }\r\n\r\n    setScale (scale) {\r\n        this.transform.setScale(scale);\r\n    }\r\n\r\n    setRotation (rot) {\r\n        this.transform.setRotation(rot);\r\n    }\r\n\r\n    render(shader) {\r\n        if (this.shape) {\r\n            // Activate the shader\r\n            shader.activate();\r\n            // Set shader uniforms for this mesh\r\n            this.bindBuffersAndEnableAttributes(shader);\r\n            this.updateUniforms(shader);\r\n            // Draw our graphics\r\n            // Param 1 specifies how to draw from vertices,\r\n            // param 2 is how many vertices we use to draw\r\n            // param 3 is what type the elements are\r\n            // param 4 is the starting point from the array\r\n            this.gl.drawElements(this.drawMode, this.totalVertices, this.gl.UNSIGNED_SHORT, 0);\r\n\r\n            this.unbindBuffers();\r\n        }\r\n        else {\r\n            console.log(\"ERROR! The mesh got no shape!\");\r\n        }\r\n    }\r\n\r\n    updateUniforms(shader) {\r\n        this.gl.uniformMatrix4fv(shader.modelViewUniformLocation, this.gl.FALSE, this.transform.matrix);\r\n        this.gl.uniform3fv(shader.colorUniformLocation, this.color);\r\n    }\r\n\r\n    unbindBuffers() {\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n\r\n    bindBuffersAndEnableAttributes(shader) {\r\n        // Vertex buffer\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);\r\n\r\n        // Enable vertex attribute\r\n        this.gl.vertexAttribPointer(\r\n            shader.positionAttributeLocation, // Attribute location\r\n            3, // Number of elements per iteration (x,y,z)\r\n            this.gl.FLOAT, // Type of elements (32bit floats)\r\n            this.gl.FALSE, // Don't normalize the data\r\n            8 * Float32Array.BYTES_PER_ELEMENT, // how many bytes to move to the next vertex\r\n            0// Offset from the beginning of a single vertex to this attribute\r\n        );\r\n        this.gl.enableVertexAttribArray(shader.positionAttributeLocation);\r\n\r\n        // Enable normal attribute\r\n        this.gl.vertexAttribPointer(\r\n            shader.normalAttributeLocation, // Attribute location\r\n            3, // Number of elements per iteration (x,y,z)\r\n            this.gl.FLOAT, // Type of elements (32bit floats)\r\n            this.gl.TRUE, // Not normalized\r\n            8 * Float32Array.BYTES_PER_ELEMENT, // how many bytes to move to the next normal\r\n            3 * Float32Array.BYTES_PER_ELEMENT// Offset from the beginning of a single vertex to this attribute\r\n        );\r\n        this.gl.enableVertexAttribArray(shader.normalAttributeLocation);\r\n\r\n        // Index buffer\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n    }\r\n\r\n    createBuffers(vertices, indices) {\r\n        // Create vertex and normal buffer\r\n        this.vertexBuffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(vertices), this.gl.STATIC_DRAW);\r\n\r\n        // Create index buffer\r\n        this.indexBuffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), this.gl.STATIC_DRAW);\r\n\r\n        // Unbind buffers\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n\r\n    createCylinderSmooth (vertSeg, horizSeg, radius, height) {\r\n        this.shape = 'cylinder';\r\n\r\n        let cylinderData = ShapeGenerator.createCylinderSmooth(vertSeg, horizSeg, radius, height);\r\n        this.totalVertices = cylinderData.numVertices;\r\n\r\n        // Create vertex and normal buffer\r\n        this.vertexBuffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer);\r\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(cylinderData.vertices), this.gl.STATIC_DRAW);\r\n\r\n        // Create index buffer\r\n        this.indexBuffer = this.gl.createBuffer();\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\r\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cylinderData.indices), this.gl.STATIC_DRAW);\r\n\r\n        // Unbind buffers\r\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n    }\r\n\r\n    createCylinderSharp (vertSegs, radius, height) {\r\n        this.shape = 'cylinder';\r\n\r\n        let cylinderData = ShapeGenerator.createCylinderSharp(vertSegs, radius, height);\r\n        this.totalVertices = cylinderData.numVertices;\r\n\r\n        this.createBuffers(cylinderData.vertices, cylinderData.indices);\r\n    }\r\n\r\n    createSphere (segments) {\r\n        this.shape = 'sphere';\r\n\r\n        let sphereData = ShapeGenerator.createSphere(segments, 1.0);\r\n        this.totalVertices = sphereData.numVertices;\r\n\r\n        this.createBuffers(sphereData.vertices, sphereData.indices);\r\n    }\r\n\r\n    createCube() {\r\n        this.shape = 'cube';\r\n        let cubeData = ShapeGenerator.createCube();\r\n        this.totalVertices = cubeData.numVertices;\r\n\r\n        this.createBuffers(cubeData.vertices, cubeData.indices);\r\n    }\r\n\r\n    createPlane (rows, columns) {\r\n        this.shape = 'plane';\r\n\r\n        let index = 0;\r\n        let x = 0;\r\n        let vertexArray = [];\r\n        // Generate and store coordinates in vertex array\r\n        for (let i = 0; i <= columns; ++i) {\r\n            x = -(rows/2);\r\n            for (let k = 0; k <= rows; ++k) {\r\n                // Storing one vertex at the time (x,y,z)\r\n                vertexArray[index] = x;\r\n                vertexArray[index+1] = 0; // y will always be 0 since the floor is flat (xz-plane is being used)\r\n                vertexArray[index+2] = -i;\r\n\r\n                // Set normals\r\n                vertexArray[index+3] = 0.0;\r\n                vertexArray[index+4] = 1.0;\r\n                vertexArray[index+5] = 0.0;\r\n\r\n                // Texture coordinates\r\n                vertexArray[index+6] = 0.0;\r\n                vertexArray[index+7] = 0.0;\r\n\r\n                // We go from left to right in the direction of x-axis\r\n                ++x;\r\n                // Increase by three since we store values in three indices at the time\r\n                index += 8;\r\n            }\r\n        }\r\n\r\n        // v0-v3 represent the four vertices in one quad\r\n        let v0 = 0;\r\n        let v1 = 1;\r\n        let v2 = rows+2;\r\n        let v3 = rows+1;\r\n        index = 0;\r\n        let indexArray = [];\r\n        // Store indices in index array\r\n        for (let j = 0; j < columns; ++j) {\r\n            // Each iteration generates the order of vertex indices for one full quad\r\n            for (let l = 0; l < rows; ++l) {\r\n                // Triangle 1\r\n                indexArray[index] = v0;\r\n                indexArray[index + 1] = v1;\r\n                indexArray[index + 2] = v2;\r\n                // Triangle 2\r\n                indexArray[index + 3] = v2;\r\n                indexArray[index + 4] = v3;\r\n                indexArray[index + 5] = v0;\r\n\r\n                // Increase for next quad\r\n                ++v0;\r\n                ++v1;\r\n                ++v2;\r\n                ++v3;\r\n                index += 6;\r\n            }\r\n            // Increase one more time after a full row of quads\r\n            ++v0;\r\n            ++v1;\r\n            ++v2;\r\n            ++v3;\r\n        }\r\n        //this.totalTriangles = rows*columns*2;\r\n        //this.totalVertices = this.totalTriangles*3;\r\n        this.totalVertices = indexArray.length;\r\n\r\n        this.createBuffers(vertexArray, indexArray);\r\n    };\r\n\r\n    createLine (vertices, indices) {\r\n        this.shape = \"LINE\";\r\n        this.totalVertices = indices.length;\r\n\r\n\r\n        this.createBuffers(vertices, indices);\r\n    }\r\n}\r\n\r\nexport default Mesh;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport GameObject from \"./GameObject\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass PointLightSource extends GameObject{\r\n    constructor(name) {\r\n        super(name);\r\n        // Initialize light color as white\r\n        this.lightColor = new Vector3([1.0, 1.0, 1.0]);\r\n        // The proportional constants for the light's attenuation\r\n        this.attenuationConstants = {\r\n            kLinear: 0.014,\r\n            kQuadratic: 0.0007\r\n        };\r\n    }\r\n\r\n    setLightColor(color) {\r\n        this.lightColor.set(color);\r\n    }\r\n\r\n    setAttenuation(kLinear, kQuadratics) {\r\n        this.attenuationConstants = {\r\n            kLinear: kLinear,\r\n            kQuadratic: kQuadratics\r\n        };\r\n    }\r\n}\r\n\r\nexport default PointLightSource;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nclass ConnectionManager {\r\n\r\n    static init() {\r\n        this.items = new Map();\r\n        this.signalPending = false;\r\n        this.message = \"\";\r\n    }\r\n\r\n    static registerItem(tag, value) {\r\n        this.items.set(tag, value);\r\n    }\r\n\r\n    static setItemValue (tag, value) {\r\n        this.items.set(tag, value);\r\n    }\r\n\r\n    static getItemValue(tag) {\r\n        return this.items.get(tag);\r\n    }\r\n\r\n    static sendSignal(message) {\r\n        this.signalPending = true;\r\n        this.message = message;\r\n    }\r\n\r\n    static resetSignal() {\r\n        this.signalPending = false;\r\n        this.message = \"\";\r\n    }\r\n}\r\n\r\nexport default ConnectionManager;\r\n","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nclass ShaderHandle {\r\n    constructor(canvas, vertexShaderFile, fragmentShaderFile) {\r\n        this.canvas = canvas;\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // Set up the vertex and fragment shaders (glsl)\r\n        let vertexShader = this.createShaderFromFile(this.gl.VERTEX_SHADER, vertexShaderFile);\r\n        let fragmentShader = this.createShaderFromFile(this.gl.FRAGMENT_SHADER, fragmentShaderFile);\r\n\r\n        // Attach shaders to our program\r\n        this.program = this.createProgramFromShaders(vertexShader, fragmentShader);\r\n\r\n        // Catches additional errors /\r\n        /****(ONLY USED IN TESTING)****/\r\n        this.gl.validateProgram(this.program);\r\n        if(!this.gl.getProgramParameter(this.program, this.gl.VALIDATE_STATUS)) {\r\n            console.error(\"ERROR validating program!\", this.gl.getProgramInfoLog(this.program));\r\n        }\r\n        /****(ONLY USED IN TESTING)****/\r\n\r\n        // Tell OpenGL state machine which program should be active\r\n        this.gl.useProgram(this.program);\r\n\r\n        // Save locations for communicating with the shader attributes\r\n        this.fetchAttributeLocations();\r\n        this.fetchUniformLocations();\r\n    }\r\n\r\n    activate () {\r\n        this.gl.useProgram(this.program);\r\n    }\r\n\r\n    fetchAttributeLocations() {\r\n        //Get attribute location from vertex shader text (glsl)\r\n        this.positionAttributeLocation = this.gl.getAttribLocation(this.program, \"vertPosition\");\r\n        this.normalAttributeLocation = this.gl.getAttribLocation(this.program, \"vertNormal\");\r\n        this.textureAttributeLocation = this.gl.getAttribLocation(this.program, \"vertTexCoord\");\r\n    }\r\n\r\n    fetchUniformLocations() {\r\n        // Matrix4f\r\n        this.modelViewUniformLocation = this.gl.getUniformLocation(this.program, \"modelView\");\r\n        this.cameraViewUniformLocation = this.gl.getUniformLocation(this.program, \"cameraView\");\r\n        this.projectionMatrixUniformLocation = this.gl.getUniformLocation(this.program, \"perspective\");\r\n\r\n        // Vector3f\r\n        this.colorUniformLocation = this.gl.getUniformLocation(this.program, \"diffuseColor\");\r\n        this.viewPositionUniformLocation = this.gl.getUniformLocation(this.program, \"viewPosition\");\r\n    }\r\n\r\n    createShaderFromFile(type, source) {\r\n        let shader = this.gl.createShader(type);\r\n        this.gl.shaderSource(shader, source);\r\n        this.gl.compileShader(shader);\r\n\r\n        // Check for errors\r\n        if(this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\r\n            return shader;\r\n        }\r\n\r\n        console.error(\"ERROR compiling shader!\", this.gl.getShaderInfoLog(shader));\r\n        this.gl.deleteShader(shader);\r\n    }\r\n\r\n    createProgramFromShaders(vertexShader, fragmentShader) {\r\n        let program = this.gl.createProgram();\r\n        this.gl.attachShader(program, vertexShader);\r\n        this.gl.attachShader(program, fragmentShader);\r\n        this.gl.linkProgram(program);\r\n\r\n        // Check for errors\r\n        if(this.gl.getProgramParameter(program, this.gl.LINK_STATUS)) {\r\n            return program;\r\n        }\r\n\r\n        console.error(\"ERROR linking program!\", this.gl.getProgramInfoLog(program));\r\n        this.gl.deleteProgram(program);\r\n    }\r\n\r\n    setProjectionUniform(matrix) {\r\n        this.gl.uniformMatrix4fv(this.projectionMatrixUniformLocation, this.gl.FALSE, matrix);\r\n    }\r\n\r\n    setCameraViewUniform(matrix) {\r\n        this.gl.uniformMatrix4fv(this.cameraViewUniformLocation, this.gl.FALSE, matrix);\r\n    }\r\n\r\n    setCameraViewPosition(vector) {\r\n        this.gl.uniform3fv(this.viewPositionUniformLocation, [vector.x, vector.y, vector.z]);\r\n    }\r\n\r\n    getUniformLoc(uniformName) {\r\n        return this.gl.getUniformLocation(this.program, uniformName);\r\n    }\r\n\r\n    setUniformVec3f(location, vector) {\r\n        this.gl.uniform3fv(location, [vector.x, vector.y, vector.z]);\r\n    }\r\n\r\n    setUniformVec2f(location, vector) {\r\n        this.gl.uniform2fv(location, [vector[0], vector[1]]);\r\n    }\r\n\r\n    setUniformMat4f(location, matrix) {\r\n        this.gl.uniformMatrix4fv(location, this.gl.FALSE, matrix);\r\n    }\r\n\r\n    setUniformFloatArray(location, array) {\r\n        this.gl.uniform1fv(location, array);\r\n    }\r\n\r\n    setUniformVec3Array(location, array) {\r\n        this.gl.uniform3fv(location, array);\r\n    }\r\n\r\n    setUniformInt(location, value) {\r\n        this.gl.uniform1i(location, value);\r\n    }\r\n\r\n    setUniformFloat(location, value) {\r\n        this.gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nexport default ShaderHandle;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nclass PhongLightingShader {\r\n    static get vertex () {\r\n        return [\r\n            \"precision highp float;\",\r\n\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n\r\n            \"void main() {\",\r\n                // Final transformation ( Perspective multiplied with the model view )\r\n                \"mat4 T = perspective * cameraView * modelView;\",\r\n                // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\r\n                \"gl_Position = T * vec4(vertPosition, 1.0);\",\r\n\r\n                // Fragment shader input variables\r\n                \"Normal = normalize(mat3(modelView)*vertNormal);\",\r\n                \"TexCoords = vertTexCoord;\",\r\n                \"FragPosition = vec3(modelView * vec4(vertPosition, 1.0));\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    static get fragment () {\r\n        return [\r\n            // Float precision\r\n            \"precision highp float;\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n\r\n            \"struct PointLight {\",\r\n                \"vec3 position;\",\r\n                \"vec3 color;\",\r\n                \"vec2 attenuationConstants;\",\r\n            \"};\",\r\n\r\n            // Shader inputs\r\n            \"uniform vec3 viewPosition;\", // Current camera position\r\n            \"uniform vec3 diffuseColor;\", // Object surface color\r\n            \"uniform int lightCount;\", // Number of light sources\r\n            \"uniform PointLight pointLights[10];\", // Set maximum point light sources to 10 per scene shader\r\n\r\n            // Computes the specular light effect based on the dot product of the reflected light vector and the camera view vector\r\n            \"vec3 computeSpecularLight(vec3 viewDirection, vec3 reflectDirection, vec3 lightColor) {\",\r\n                \"float specularStrength = 0.5;\",\r\n                \"float shininess = 32.0;\",\r\n                \"float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\",\r\n                \"return spec * specularStrength * lightColor;\",\r\n            \"}\",\r\n\r\n            // Computes the intensity based on the distance from the light source\r\n            \"float computeLightAttenuation(vec3 lightPosition, vec2 attenuationConstants) {\",\r\n                // Calculate the distance from current pixel to the light source\r\n                \"float dist = distance(lightPosition, FragPosition);\",\r\n                // The constants are set to simulate the light's intensity drop off over distance\r\n                \"return min(1.0 / (1.0 + dist*attenuationConstants.x + dist*dist*attenuationConstants.y), 1.0);\",\r\n            \"}\",\r\n\r\n            \"vec3 computeDiffuseSpecular(PointLight pointLight, vec3 viewDirection) {\",\r\n                // Compute the vector from the pixel to the light source\r\n                \"vec3 lightDirection = normalize(pointLight.position - FragPosition);\",\r\n                // Diffuse lighting\r\n                \"float diff = max(dot(Normal, lightDirection), 0.0);\",\r\n                \"vec3 diffuse = (diff * pointLight.color * diffuseColor);\",\r\n\r\n                // Compute the vector of the reflected light based on the incoming light vector\r\n                \"vec3 reflectDirection = reflect(-lightDirection, Normal);\",\r\n                // Specular lighting\r\n                \"vec3 specular = computeSpecularLight(viewDirection, reflectDirection, pointLight.color) * diff;\",\r\n\r\n                // Compute attenuation (intensity decrement over distance).\r\n                \"float attenuation = computeLightAttenuation(pointLight.position, pointLight.attenuationConstants);\",\r\n\r\n                // Phong lighting model\r\n                \"return (diffuse + specular) * attenuation;\",\r\n            \"}\",\r\n            \"\",\r\n            \"void main() {\",\r\n                // Ambient lighting\r\n                \"float ambientStrength = 0.05;\",\r\n                \"vec3 ambientColor = vec3(1.0, 1.0, 1.0);\",\r\n                \"vec3 ambient = ambientStrength * ambientColor * diffuseColor;\",\r\n                \"vec3 phong = ambient;\",\r\n\r\n                // Compute the vector from the pixel to the camera\r\n                \"vec3 viewDirection = normalize(viewPosition - FragPosition);\",\r\n                // Add point light sources\r\n                \"for(int i = 0; i < 10; i++) {\",\r\n                    \"if (i > lightCount) break;\",\r\n                    \"phong += computeDiffuseSpecular(pointLights[i], viewDirection);\",\r\n                \"}\",\r\n                // Final shaded color (texture * lighting)\r\n                \"gl_FragColor = vec4 (phong, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default PhongLightingShader;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nclass AmbientShader {\r\n    static get vertex () {\r\n        return [\r\n            \"precision mediump float;\",\r\n\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n\r\n            // Fragment shader input variables\r\n            \"varying vec3 Normal;\",\r\n\r\n            \"void main() {\",\r\n                // Fragment shader input variables\r\n                \"Normal = normalize(mat3(modelView)*vertNormal);\",\r\n                // Final transformation ( Perspective multiplied with the model view )\r\n                \"mat4 T = perspective * cameraView * modelView;\",\r\n                // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\r\n                \"gl_Position = T * vec4(vertPosition, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    static get fragment () {\r\n        return [\r\n            // Float precision\r\n            \"precision mediump float;\",\r\n\r\n            // Fragment shader input variables\r\n            \"varying vec3 Normal;\",\r\n\r\n            // Shader inputs\r\n            \"uniform vec3 viewPosition;\",\r\n            \"uniform vec3 diffuseColor;\",\r\n\r\n            \"void main() {\",\r\n                \"gl_FragColor = vec4 (diffuseColor, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default AmbientShader;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\n/* POSSIBLE IMPROVEMENTS:\r\n*  - Surface breaking foam\r\n*  - Wave sharpness based on the water depth\r\n*  - Tessellation\r\n* */\r\n\r\nclass ProceduralShader {\r\n        static get perlinNoise() {\r\n        //\r\n        // Description : Array and textureless GLSL 3D simplex noise function.\r\n        //      Author : Ian McEwan, Ashima Arts.\r\n        //  Maintainer : ijm\r\n        //     Lastmod : 20110822 (ijm)\r\n        //     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n        //               Distributed under the MIT License. See LICENSE file.\r\n        //               https://github.com/ashima/webgl-noise\r\n        //\r\n        return [\r\n            \"vec3 mod289(vec3 x) {\",\r\n                \"return x - floor(x * (1.0 / 289.0)) * 289.0;\",\r\n            \"}\",\r\n\r\n            \"vec4 mod289(vec4 x) {\",\r\n                \"return x - floor(x * (1.0 / 289.0)) * 289.0;\",\r\n            \"}\",\r\n\r\n            \"vec4 permute(vec4 x) {\",\r\n                \"return mod289(((x*34.0)+1.0)*x);\",\r\n            \"}\",\r\n\r\n            \"vec4 taylorInvSqrt(vec4 r) {\",\r\n                \"return 1.79284291400159 - 0.85373472095314 * r;\",\r\n            \"}\",\r\n\r\n            \"float snoise(vec3 v) {\",\r\n                \"const vec2  C = vec2(1.0/6.0, 1.0/3.0);\",\r\n                \"const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\",\r\n\r\n                // First corner\r\n                \"vec3 i  = floor(v + dot(v, C.yyy) );\",\r\n                \"vec3 x0 =   v - i + dot(i, C.xxx) ;\",\r\n\r\n                // Other corners\r\n                \"vec3 g = step(x0.yzx, x0.xyz);\",\r\n                \"vec3 l = 1.0 - g;\",\r\n                \"vec3 i1 = min( g.xyz, l.zxy );\",\r\n                \"vec3 i2 = max( g.xyz, l.zxy );\",\r\n\r\n                \"vec3 x1 = x0 - i1 + C.xxx;\",\r\n                \"vec3 x2 = x0 - i2 + C.yyy;\", // 2.0*C.x = 1/3 = C.y\r\n                \"vec3 x3 = x0 - D.yyy;\",      // -1.0+3.0*C.x = -0.5 = -D.y\r\n\r\n                // Permutations\r\n                \"i = mod289(i);\",\r\n                \"vec4 p = permute( permute( permute(\",\r\n                \"i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\",\r\n                \"+ i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\",\r\n                \"+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\",\r\n\r\n                // Gradients: 7x7 points over a square, mapped onto an octahedron.\r\n                // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\r\n                \"float n_ = 0.142857142857; // 1.0/7.0\",\r\n                \"vec3  ns = n_ * D.wyz - D.xzx;\",\r\n\r\n                \"vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\",  //  mod(p,7*7)\r\n\r\n                \"vec4 x_ = floor(j * ns.z);\",\r\n                \"vec4 y_ = floor(j - 7.0 * x_ );\",   // mod(j,N)\r\n\r\n                \"vec4 x = x_ *ns.x + ns.yyyy;\",\r\n                \"vec4 y = y_ *ns.x + ns.yyyy;\",\r\n                \"vec4 h = 1.0 - abs(x) - abs(y);\",\r\n\r\n                \"vec4 b0 = vec4( x.xy, y.xy );\",\r\n                \"vec4 b1 = vec4( x.zw, y.zw );\",\r\n\r\n                \"vec4 s0 = floor(b0)*2.0 + 1.0;\",\r\n                \"vec4 s1 = floor(b1)*2.0 + 1.0;\",\r\n                \"vec4 sh = -step(h, vec4(0.0));\",\r\n\r\n                \"vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;\",\r\n                \"vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;\",\r\n\r\n                \"vec3 p0 = vec3(a0.xy,h.x);\",\r\n                \"vec3 p1 = vec3(a0.zw,h.y);\",\r\n                \"vec3 p2 = vec3(a1.xy,h.z);\",\r\n                \"vec3 p3 = vec3(a1.zw,h.w);\",\r\n\r\n                //Normalise gradients\r\n                \"vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\",\r\n                \"p0 *= norm.x;\",\r\n                \"p1 *= norm.y;\",\r\n                \"p2 *= norm.z;\",\r\n                \"p3 *= norm.w;\",\r\n\r\n                // Mix final noise value\r\n                \"vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\",\r\n                \"m = m * m;\",\r\n                \"return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\",\r\n                \"dot(p2,x2), dot(p3,x3) ) );\",\r\n            \"}\",\r\n\r\n            \"float sdnoise(vec3 v, out vec3 gradient) {\",\r\n                \"const vec2  C = vec2(1.0/6.0, 1.0/3.0);\",\r\n                \"const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\",\r\n\r\n                // First corner\r\n                \"vec3 i  = floor(v + dot(v, C.yyy) );\",\r\n                \"vec3 x0 =   v - i + dot(i, C.xxx) ;\",\r\n\r\n                // Other corners\r\n                \"vec3 g = step(x0.yzx, x0.xyz);\",\r\n                \"vec3 l = 1.0 - g;\",\r\n                \"vec3 i1 = min( g.xyz, l.zxy );\",\r\n                \"vec3 i2 = max( g.xyz, l.zxy );\",\r\n\r\n                \"vec3 x1 = x0 - i1 + C.xxx;\",\r\n                \"vec3 x2 = x0 - i2 + C.yyy;\", // 2.0*C.x = 1/3 = C.y\r\n                \"vec3 x3 = x0 - D.yyy;\",      // -1.0+3.0*C.x = -0.5 = -D.y\r\n\r\n                // Permutations\r\n                \"i = mod289(i);\",\r\n                \"vec4 p = permute( permute( permute(\",\r\n                \"i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\",\r\n                \"+ i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\",\r\n                \"+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\",\r\n\r\n                // Gradients: 7x7 points over a square, mapped onto an octahedron.\r\n                // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\r\n                \"float n_ = 0.142857142857;\", // 1.0/7.0\r\n                \"vec3  ns = n_ * D.wyz - D.xzx;\",\r\n\r\n                \"vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\",  //  mod(p,7*7)\r\n\r\n                \"vec4 x_ = floor(j * ns.z);\",\r\n                \"vec4 y_ = floor(j - 7.0 * x_ );\",    // mod(j,N)\r\n\r\n                \"vec4 x = x_ *ns.x + ns.yyyy;\",\r\n                \"vec4 y = y_ *ns.x + ns.yyyy;\",\r\n                \"vec4 h = 1.0 - abs(x) - abs(y);\",\r\n\r\n                \"vec4 b0 = vec4( x.xy, y.xy );\",\r\n                \"vec4 b1 = vec4( x.zw, y.zw );\",\r\n\r\n                \"vec4 s0 = floor(b0)*2.0 + 1.0;\",\r\n                \"vec4 s1 = floor(b1)*2.0 + 1.0;\",\r\n                \"vec4 sh = -step(h, vec4(0.0));\",\r\n\r\n                \"vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;\",\r\n                \"vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;\",\r\n\r\n                \"vec3 p0 = vec3(a0.xy,h.x);\",\r\n                \"vec3 p1 = vec3(a0.zw,h.y);\",\r\n                \"vec3 p2 = vec3(a1.xy,h.z);\",\r\n                \"vec3 p3 = vec3(a1.zw,h.w);\",\r\n\r\n                //Normalise gradients\r\n                \"vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\",\r\n                \"p0 *= norm.x;\",\r\n                \"p1 *= norm.y;\",\r\n                \"p2 *= norm.z;\",\r\n                \"p3 *= norm.w;\",\r\n\r\n                // Mix final noise value\r\n                \"vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\",\r\n                \"vec4 m2 = m * m;\",\r\n                \"vec4 m4 = m2 * m2;\",\r\n                \"vec4 pdotx = vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3));\",\r\n\r\n                // Determine noise gradient\r\n                \"vec4 temp = m2 * m * pdotx;\",\r\n                \"gradient = -8.0 * (temp.x * x0 + temp.y * x1 + temp.z * x2 + temp.w * x3);\",\r\n                \"gradient += m4.x * p0 + m4.y * p1 + m4.z * p2 + m4.w * p3;\",\r\n                \"gradient *= 42.0;\",\r\n\r\n                \"return 42.0 * dot(m4, pdotx);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    static get vertex () {\r\n        return [\r\n            \"precision highp float;\",\r\n\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n\r\n            // Other inputs\r\n            \"uniform float time;\",\r\n            \"uniform float harmonicAmplitude;\",\r\n            \"uniform float harmonicWaveLength;\",\r\n            \"uniform float harmonicSpeed;\",\r\n            \"uniform float waveSharpness;\",\r\n            \"uniform float harmonicDirectionAngle;\",\r\n\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"varying float Time;\",\r\n\r\n            // Perlin noise function\r\n            this.perlinNoise,\r\n\r\n            \"void main() {\",\r\n                // Compute the world position before generating the noise and wave functions\r\n                \"vec4 worldPos = modelView*vec4(vertPosition, 1.0);\",\r\n\r\n                // Compute wave direction\r\n                \"vec2 direction = vec2(sin(harmonicDirectionAngle), cos(harmonicDirectionAngle));\",\r\n                \"vec2 xzRotated = vec2(worldPos.x*direction.x, worldPos.z*direction.y);\",\r\n\r\n                // Create a harmonic base for the wave with a sharp nonnegative sine function\r\n                // Compute frequency based on the wave length (w = 2/L)\r\n                \"float harmonicFrequency = 2.0/harmonicWaveLength;\",\r\n                // Compute the phase based on the speed and frequency\r\n                \"float harmonicPhase = harmonicSpeed * harmonicFrequency;\",\r\n                \"float theta = (xzRotated.x + xzRotated.y)*harmonicFrequency + harmonicPhase*time;\",\r\n                \"float harmonicWave = 2.0*harmonicAmplitude*pow((sin(theta) + 1.0)/2.0, waveSharpness);\",\r\n\r\n                // Add three layers of perlin noise to the wave\r\n                \"float waveNoise = 5.0*snoise(0.005*vec3(worldPos.xz, 20.0*time));\",\r\n                \"waveNoise += 0.25*snoise(0.1*vec3(worldPos.xz, 4.0*time));\",\r\n\r\n                // Add the noise and the harmonic wave together as the final wave function\r\n                \"float waveFunction = harmonicWave + waveNoise;\",\r\n\r\n                // Displace the surface y-coordinate (up/down)\r\n                \"vec3 displacedPosition = vec3(vertPosition.x, vertPosition.y + waveFunction, vertPosition.z);\",\r\n\r\n                // Compute the normal for the displaced surface\r\n                \"float A = waveSharpness*harmonicFrequency*harmonicAmplitude;\",\r\n                \"float B = pow((sin(theta) + 1.0)/2.0, waveSharpness - 1.0);\",\r\n                \"float C = cos(theta);\",\r\n                \"float partialDerivativeX = direction.x*A*B*C;\",\r\n                \"float partialDerivativeZ = direction.y*A*B*C;\",\r\n\r\n                // Compute the displaced normal\r\n                \"vec3 displacedNormal = normalize(vec3(-partialDerivativeX, 1.0, -partialDerivativeZ));\",\r\n                \"Normal = normalize(mat3(modelView)*displacedNormal);\",\r\n                \"vertNormal;\",\r\n\r\n                // Final transformation ( Perspective multiplied with the model view )\r\n                \"mat4 T = perspective * cameraView * modelView;\",\r\n                // Transform (x,y,z) vertex coordinates with the transform matrix\r\n                \"gl_Position = T * vec4(displacedPosition, 1.0);\",\r\n\r\n                // Fragment shader input variables\r\n                \"TexCoords = vertTexCoord;\",\r\n                \"FragPosition = vec3(modelView * vec4(displacedPosition, 1.0));\",\r\n\r\n                // Pass over the time variable to fragment shader\r\n                \"Time = time;\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    static get fragment () {\r\n        return [\r\n            \"\",\r\n            \"#ifdef GL_OES_standard_derivatives\",\r\n            \"#extension GL_OES_standard_derivatives : enable\",\r\n            \"#endif\",\r\n            \"#ifdef GL_ES\",\r\n            // Float precision\r\n            \"precision highp float;\",\r\n            \"#endif\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"varying float Time;\",\r\n\r\n            \"struct PointLight {\",\r\n                \"vec3 position;\",\r\n                \"vec3 color;\",\r\n                \"vec2 attenuationConstants;\",\r\n            \"};\",\r\n\r\n            // Shader inputs\r\n            \"uniform vec3 viewPosition;\", // Current camera position\r\n            \"uniform vec3 diffuseColor;\", // Object surface color\r\n            \"uniform int lightCount;\", // Number of light sources\r\n            \"uniform PointLight pointLights[10];\", // Set maximum point light sources to 10 per scene shader\r\n\r\n            // Computes the specular light effect based on the dot product of the reflected light vector and the camera view vector\r\n            \"vec3 computeSpecularLight(vec3 viewDirection, vec3 reflectDirection, vec3 lightColor) {\",\r\n                \"float specularStrength = 1.0;\",\r\n                \"float shininess = 96.0;\",\r\n                \"float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\",\r\n                \"return spec * specularStrength * lightColor;\",\r\n            \"}\",\r\n\r\n            // Computes the intensity based on the distance from the light source\r\n            \"float computeLightAttenuation(vec3 lightPosition, vec2 attenuationConstants) {\",\r\n                // Calculate the distance from current pixel to the light source\r\n                \"float dist = distance(lightPosition, FragPosition);\",\r\n                // The constants are set to simulate the light's intensity drop off over distance\r\n                \"return min(1.0 / (1.0 + dist*attenuationConstants.x + dist*dist*attenuationConstants.y), 1.0);\",\r\n            \"}\",\r\n\r\n            \"vec3 computeDiffuseSpecular(PointLight pointLight, vec3 viewDirection, vec3 normal) {\",\r\n                // Compute the vector from the pixel to the light source\r\n                \"vec3 lightDirection = normalize(pointLight.position - FragPosition);\",\r\n                // Diffuse lighting\r\n                \"float diff = max(dot(normal, lightDirection), 0.0);\",\r\n                \"vec3 diffuse = (diff * pointLight.color * diffuseColor);\",\r\n\r\n                // Compute the vector of the reflected light based on the incoming light vector\r\n                \"vec3 reflectDirection = reflect(-lightDirection, normal);\",\r\n                // Specular lighting\r\n                \"vec3 specular = computeSpecularLight(viewDirection, reflectDirection, pointLight.color) * diff;\",\r\n\r\n                // Compute attenuation (intensity decrement over distance).\r\n                \"float attenuation = computeLightAttenuation(pointLight.position, pointLight.attenuationConstants);\",\r\n\r\n                // Phong lighting model\r\n                \"return (diffuse + specular) * attenuation;\",\r\n            \"}\",\r\n\r\n            // 3D Perlin noise function\r\n            this.perlinNoise,\r\n\r\n            \"void main() {\",\r\n                // Bump then fragment normal with four layers of perlin noise\r\n                \"float baseSpeed = 2.0;\",\r\n                \"float baseFrequency = 0.5;\",\r\n                \"vec3 gradient1 = vec3(0.0);\",\r\n                \"float noise = sdnoise(baseFrequency*vec3(FragPosition.xz, Time*baseSpeed), gradient1);\",\r\n                \"vec3 gradient2 = vec3(0.0);\",\r\n                \"noise += 0.25*sdnoise(4.0*baseFrequency*vec3(FragPosition.xz, 0.25*Time*baseSpeed), gradient2);\",\r\n                \"vec3 gradient3 = vec3(0.0);\",\r\n                \"noise += 0.125*sdnoise(8.0*baseFrequency*vec3(FragPosition.xz, 0.125*Time*baseSpeed), gradient3);\",\r\n                \"vec3 gradient4 = vec3(0.0);\",\r\n                \"noise += 0.0625*sdnoise(16.0*baseFrequency*vec3(FragPosition.xz, 0.0625*Time*baseSpeed), gradient4);\",\r\n\r\n                \"float bumpStrength = 0.05;\",\r\n                \"vec3 bumb = normalize(0.5*gradient1 + mix(mix(gradient2, gradient3, 0.5), gradient4, 0.5));\",\r\n                \"vec3 bumpedNormal = normalize(vec3(Normal + bumpStrength*bumb));\",\r\n\r\n                // Ambient lighting\r\n                \"float ambientStrength = 0.1;\",\r\n                \"vec3 ambientColor = vec3(1.0, 1.0, 1.0);\",\r\n                \"vec3 ambient = ambientStrength * ambientColor * diffuseColor;\",\r\n\r\n                // Compute the vector from the pixel to the camera\r\n                \"vec3 viewDirection = normalize(viewPosition - FragPosition);\",\r\n\r\n                // Add point light sources\r\n                \"vec3 phong = ambient;\",\r\n                \"for(int i = 0; i < 10; i++) {\",\r\n                    \"if (i > lightCount) break;\",\r\n                    \"phong += computeDiffuseSpecular(pointLights[i], viewDirection, bumpedNormal);\",\r\n                \"}\",\r\n\r\n                // Final shaded color (texture * lighting)\r\n                \"gl_FragColor = vec4 (phong, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default ProceduralShader;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\n// JavaScript components\r\nimport GameEditor from \"./GameEditor\";\r\nimport Time from \"./Time\";\r\n\r\nimport EventHandler from \"./events/EventHandler\";\r\n\r\nimport Scene from \"./Scene\";\r\nimport Camera from \"./Camera\";\r\nimport GameObject from \"./GameObject\";\r\nimport Mesh from \"./Mesh\";\r\nimport PointLightSource from \"./PointLightSource\";\r\n\r\nimport Matrix4 from \"./math/Matrix4\";\r\n\r\nimport ConnectionManager from \"./ConnectionManager\";\r\n\r\n// Shaders\r\nimport ShaderHandle from \"./ShaderHandle\";\r\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\r\nimport AmbientShader from \"./shaders/AmbientShader\";\r\nimport ProceduralShader from \"./shaders/ProceduralShader\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [90.0, 34.0, -90.0];\r\nconst CAMERA_ROTATION = [-15.0, 140.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER_SMOOTH: 2,\r\n    CYLINDER_SHARP: 3,\r\n    PLANE: 4\r\n};\r\n\r\n// 60 degrees field of view\r\nconst FIELD_OF_VIEW = Math.PI / 3.0;\r\n\r\nconst MS_PER_UPDATE = 4.0;\r\nconst UPDATE_TIME_STEP = 0.01;\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Scenes works like blocks in the game world.\r\n        // The active scenes are based on the cameras distance to the origin of each scene.\r\n        this.scenes = [];\r\n        this.shaders = new Map();\r\n\r\n        this.viewportAspectRatio = 1.0;\r\n        this.lag = 0.0;\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Update game loop clock\r\n        Time.update();\r\n\r\n        // Time start of the loop\r\n        //let startTime =  Time.now;\r\n\r\n        // Process mouse and keyboard events\r\n        this.processInputEvents();\r\n\r\n        // Communication between GUI and the graphics engine\r\n        this.processInternalSignals();\r\n\r\n        // Add elapsed time to the lag variable\r\n        this.lag += Time.deltaTime;\r\n\r\n        // Make sure the update function is called on a constant rate\r\n        while (this.lag >= MS_PER_UPDATE) {\r\n            // Updates game object animations, AI, physics, etc.\r\n            this.update();\r\n            // Clear momentary events\r\n            EventHandler.resetMouseEvents();\r\n            this.lag -= MS_PER_UPDATE;\r\n        }\r\n\r\n        // Render graphics\r\n        this.render(this.lag/MS_PER_UPDATE);\r\n\r\n        // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\r\n        //while ((Time.now - startTime) < 16.0) ; // Sleep\r\n    }\r\n\r\n    update() {\r\n        this.scenes.forEach((scene) => {\r\n            scene.update(UPDATE_TIME_STEP);\r\n        });\r\n        this.camera.updateUniforms();\r\n    }\r\n\r\n    render(residualLag) {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scenes\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        this.scenes.forEach((scene) => {\r\n            //scene.updateLightPositions();\r\n            scene.draw();\r\n        });\r\n\r\n        // Display fps and other useful information\r\n        this.editor.render(this.scenes);\r\n    }\r\n\r\n    processInputEvents() {\r\n        // Process editor commands\r\n        this.editor.processUserInput();\r\n    }\r\n\r\n    processInternalSignals() {\r\n        if(ConnectionManager.signalPending) {\r\n            this.updateWaveParameter(ConnectionManager.message);\r\n            ConnectionManager.resetSignal();\r\n        }\r\n    }\r\n\r\n    // This function is called before the game loop is started\r\n    preload() {\r\n        // Initiate static classes\r\n        Time.init();\r\n        EventHandler.init();\r\n\r\n        // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\r\n        this.setUpWebGL();\r\n\r\n        // Create shaders\r\n        let mainShader = new ShaderHandle(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\r\n        let ambientShader = new ShaderHandle(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\r\n        let proceduralShader = new ShaderHandle(this.canvas, ProceduralShader.vertex, ProceduralShader.fragment);\r\n\r\n        // Add them to the shaders container\r\n        this.shaders.set(\"phong\", mainShader);\r\n        this.shaders.set(\"ambient\", ambientShader);\r\n        this.shaders.set(\"procedural\", proceduralShader);\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.shaders);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Initialize the game engine editor used for managing the game scenes\r\n        this.editor = new GameEditor(this.gl, this.context2D, this.shaders, this.camera, this.canvas);\r\n\r\n        // Create and set the projection matrix for the shaders\r\n        this.fieldOfView = FIELD_OF_VIEW;\r\n        this.viewportAspectRatio = this.canvas.width / this.canvas.height;\r\n        this.refreshProjectionMatrix();\r\n\r\n        this.setUpScene();\r\n    }\r\n\r\n    setUpScene() {\r\n        // Create a scene for the objects\r\n        let defaultScene = new Scene(this.shaders);\r\n\r\n        // Create a objects for the scene\r\n        this.loadDefaultScene(defaultScene);\r\n\r\n        // Add default scene to scenes\r\n        this.scenes.push(defaultScene);\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let currentAspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Check if the aspect ratio has changed before going further\r\n        if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001)\r\n            return;\r\n\r\n        // Save new aspect ratio\r\n        this.viewportAspectRatio = currentAspectRatio;\r\n\r\n        // Refresh the projection matrix and send set it in the shaders\r\n        this.refreshProjectionMatrix();\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.gl);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\r\n            mesh.createCylinderSmooth(32, 1, 1, 2);\r\n        }\r\n        else if(settings.shape === SHAPE.CYLINDER_SHARP) {\r\n            mesh.createCylinderSharp(8, 1, 2);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(200, 200);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n        obj.setShader(settings.shader);\r\n\r\n        return obj;\r\n    }\r\n\r\n    createPointLightSource(settings) {\r\n        // Create the light source component\r\n        let lightSource = new PointLightSource(settings.name);\r\n        lightSource.setPosition(settings.position);\r\n        lightSource.setScale(settings.scale);\r\n        lightSource.setLightColor(settings.color);\r\n        lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic);\r\n\r\n        // Create a model for the light source\r\n        let lightSourceModel = new Mesh(this.gl);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor(settings.color);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        return lightSource;\r\n    }\r\n\r\n    loadDefaultScene(scene) {\r\n        // Initiate procedural shader inputs\r\n        this.updateWaveParameter(\"harmonicAmplitude\");\r\n        this.updateWaveParameter(\"harmonicWaveLength\");\r\n        this.updateWaveParameter(\"harmonicSpeed\");\r\n        this.updateWaveParameter(\"waveSharpness\");\r\n        this.updateWaveParameter(\"harmonicDirectionAngle\");\r\n        const color = ConnectionManager.getItemValue('waterColor');\r\n\r\n        // Create four planes for visualizing a water surface\r\n        let plane1 = this.createGameObject({\r\n            shape: SHAPE.PLANE,\r\n            name: 'Waves',\r\n            scale: [1.0, 1.0, 1.0],\r\n            position: [0.0, 10.0, 100.0],\r\n            color: [color.r, color.g, color.b],\r\n            shader: 'procedural'\r\n        });\r\n\r\n        // Add water planes to the scene\r\n        scene.addGameObject(plane1);\r\n        this.water =[];\r\n        this.water.push(plane1);\r\n\r\n        // Wall dimensions\r\n        const wallHeight = 20.0;\r\n        const wallWidth = 100.0;\r\n\r\n        // Create gray floor\r\n        scene.addGameObject(this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Floor',\r\n            scale: [wallWidth, 0.1, wallWidth],\r\n            position: [0.0, -0.1, 0.0],\r\n            color: [0.75, 0.75, 0.75],\r\n            shader: 'phong'\r\n        }));\r\n\r\n        // Create blue walls\r\n        let wallColor = [1.0, 1.0, 1.0];\r\n        scene.addGameObject(this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Left Wall',\r\n            scale: [0.1, wallHeight, wallWidth],\r\n            position: [-wallWidth, wallHeight, 0.0],\r\n            color: wallColor,\r\n            shader: 'phong'\r\n        }));\r\n        scene.addGameObject(this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Right Wall',\r\n            scale: [0.1, wallHeight, wallWidth],\r\n            position: [wallWidth, wallHeight, 0.0],\r\n            color: wallColor,\r\n            shader: 'phong'\r\n        }));\r\n        scene.addGameObject(this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Back Wall',\r\n            scale: [wallWidth, wallHeight, 0.1],\r\n            position: [0.0, wallHeight, -wallWidth],\r\n            color: wallColor,\r\n            shader: 'phong'\r\n        }));\r\n        scene.addGameObject(this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Front Wall',\r\n            scale: [wallWidth, wallHeight, 0.1],\r\n            position: [0.0, wallHeight, wallWidth],\r\n            color: wallColor,\r\n            shader: 'phong'\r\n        }));\r\n\r\n        // Create a point lights for the scene\r\n        // Add the light source to our scene\r\n        let atten = {// The attenuation constants should make the light travel a maximum distance of 325\r\n            kLinear: 0.014,\r\n            kQuadratic: 0.0007\r\n        };\r\n\r\n        let lampRadius = 1.0;\r\n        let lampHeight = 2.0 * wallHeight - lampRadius;\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, lampHeight, -wallWidth*0.75],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [wallWidth*0.75, lampHeight, -wallWidth*0.75],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-wallWidth*0.75, lampHeight, -wallWidth*0.75],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, lampHeight, wallWidth*0.75],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [wallWidth*0.75, lampHeight, wallWidth*0.75],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-wallWidth*0.75, lampHeight, wallWidth*0.75],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n        // Middle section\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-wallWidth*0.75, lampHeight, 0.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [wallWidth*0.75, lampHeight, 0.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, lampHeight, 0.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: atten\r\n        }));\r\n    }\r\n\r\n    setUpWebGL() {\r\n        // 2D Canvas for text display\r\n        this.context2D = document.getElementById('text-canvas').getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n    }\r\n\r\n    refreshProjectionMatrix() {\r\n        // Create a new projection matrix\r\n        this.projectionMatrix = Matrix4.perspective(this.fieldOfView, this.viewportAspectRatio, 0.1, 10000.0);\r\n\r\n        // Update the projection matrix in the editor\r\n        this.editor.projectionMatrix = this.projectionMatrix;\r\n\r\n        // Update the projection matrix for the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniform(this.projectionMatrix);\r\n        });\r\n    }\r\n\r\n    updateWaveParameter(tag) {\r\n        let newValue = ConnectionManager.getItemValue(tag);\r\n\r\n        if(tag === \"waterColor\") {\r\n            this.water.forEach((o)=> {\r\n                o.meshes[0].setColor([newValue.r, newValue.g, newValue.b]);\r\n            });\r\n        }\r\n        else {\r\n            let proceduralShader = this.shaders.get(\"procedural\");\r\n            proceduralShader.activate();\r\n\r\n            let uniformLocation = proceduralShader.getUniformLoc(tag);\r\n            proceduralShader.setUniformFloat(uniformLocation, newValue);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Engine;","/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport React, { Component } from 'react';\r\n\r\n// CSS\r\nimport '../../../css/EngineWindow.css';\r\n\r\n// JS\r\nimport Engine from '../Engine';\r\n\r\nclass EngineWindow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            canvasWidth: 100,\r\n            canvasHeight: 100\r\n        };\r\n\r\n        this.animationId = null;\r\n        this.engine = new Engine();\r\n    }\r\n\r\n    resizeCanvas() {\r\n        this.setState({\r\n            canvasWidth: this.engineWindowContainer.offsetWidth,\r\n            canvasHeight: this.engineWindowContainer.offsetHeight\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // The engine window container component is used for setting the size of the canvas\r\n        this.engineWindowContainer = document.getElementById(\"canvas-container\");\r\n        window.addEventListener(\"resize\", this.resizeCanvas.bind(this));\r\n\r\n        // Start the loop\r\n        this.startMainLoop();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopMainLoop();\r\n        window.removeEventListener(\"resize\", this.resizeCanvas.bind(this));\r\n    }\r\n\r\n    startMainLoop() {\r\n        // Set up the graphics engine (webgl context, shaders and draw scene objects)\r\n        this.engine.preload();\r\n\r\n        // Set to correct dimensions for canvas\r\n        this.resizeCanvas();\r\n\r\n        // Initiate the main loop\r\n        this.animationId = window.requestAnimationFrame( this.mainLoop.bind(this) );\r\n    }\r\n\r\n    stopMainLoop() {\r\n        window.cancelAnimationFrame( this.animationId );\r\n        this.animationId = null;\r\n    }\r\n\r\n    mainLoop() {\r\n        this.animationId = window.requestAnimationFrame( this.mainLoop.bind(this) );\r\n        this.engine.run();\r\n    }\r\n\r\n    render() {\r\n        let canvasStyle = {\r\n            width: this.state.canvasWidth,\r\n            height: this.state.canvasHeight\r\n        };\r\n\r\n        return (\r\n            <div id=\"canvas-container\">\r\n                <canvas style={canvasStyle} id=\"gl-canvas\" width={this.state.canvasWidth} height={this.state.canvasHeight}>\r\n                    Your browser does not support HTML5\r\n                </canvas>\r\n                <canvas style={canvasStyle} id=\"text-canvas\" width={this.state.canvasWidth} height={this.state.canvasHeight}>\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EngineWindow;","import React, { Component } from 'react';\r\n\r\nimport ConnectionManager from \"../ConnectionManager\";\r\n\r\nclass SidePanel extends Component {\r\n\r\n    setNewValue(id) {\r\n        let newValue;\r\n\r\n        if (id === this.props.colorTag) {\r\n            // Color values must be between 0.0 and 1.0\r\n            let r = this.clamp(parseFloat(document.getElementById('r-color').value)/255.0, 0.0, 1.0);\r\n            let g = this.clamp(parseFloat(document.getElementById('g-color').value)/255.0, 0.0, 1.0);\r\n            let b = this.clamp(parseFloat(document.getElementById('b-color').value)/255.0, 0.0, 1.0);\r\n\r\n            newValue = {r, g, b};\r\n        }\r\n        else {\r\n            newValue = parseFloat(document.getElementById(id).value);\r\n        }\r\n\r\n        ConnectionManager.setItemValue(id, newValue);\r\n        ConnectionManager.sendSignal(id);\r\n    }\r\n\r\n    handleKeyPress(id, target) {\r\n        const ENTER = 13;\r\n        //If enter is pressed click submit button with given id.\r\n        if (target.charCode === ENTER) {\r\n            document.getElementById(id).click();\r\n        }\r\n    }\r\n\r\n    clamp(val, min, max) {\r\n        if (val > max)\r\n            return max;\r\n        else if (val < min)\r\n            return min;\r\n\r\n        return val;\r\n    }\r\n\r\n    render() {\r\n\r\n        const containerStyle = {\r\n            backgroundColor: '#2a2d38',\r\n            width: this.props.width,\r\n            textAlign: 'center',\r\n            overflow: 'auto'\r\n        };\r\n\r\n        const titleStyle = {\r\n            color: 'white',\r\n            fontSize: '2em'\r\n        };\r\n\r\n        const textStyle = {\r\n            color: 'white',\r\n            fontSize: '1.0em'\r\n        };\r\n\r\n        const inputStyle = {\r\n            marginLeft: 10,\r\n            width: 40\r\n        };\r\n\r\n        const settingContainerStyle = {\r\n            paddingBottom: 5\r\n        };\r\n\r\n        const rangeWidth = 175;\r\n\r\n        // Displays the value as integer\r\n        let formatInputValue = function (val, radix) {\r\n            return parseInt(val, radix);\r\n        };\r\n\r\n        let waterColor = ConnectionManager.getItemValue(this.props.colorTag);\r\n\r\n        return (\r\n            <div id=\"side-panel\" style={containerStyle}>\r\n                <p style={titleStyle}>\r\n                   PARAMETERS\r\n               </p>\r\n\r\n                <div style={settingContainerStyle}>\r\n                    <p style={textStyle}>\r\n                        Amplitude\r\n                    </p>\r\n                    <input style={{width:rangeWidth}}\r\n                           id={this.props.amplitudeTag}\r\n                           type=\"range\"\r\n                           min=\"0.0\"\r\n                           max=\"10.0\"\r\n                           step=\"0.1\"\r\n                           defaultValue={ConnectionManager.getItemValue(this.props.amplitudeTag)}\r\n                           onChange={this.setNewValue.bind(this, this.props.amplitudeTag)}/>\r\n                </div>\r\n\r\n                <div style={settingContainerStyle}>\r\n                    <p style={textStyle}>\r\n                        Wave Length\r\n                    </p>\r\n                    <input style={{width:rangeWidth}}\r\n                           id={this.props.waveLengthTag}\r\n                           type=\"range\"\r\n                           min=\"5.0\"\r\n                           max=\"100.0\"\r\n                           step=\"1.0\"\r\n                           defaultValue={ConnectionManager.getItemValue(this.props.waveLengthTag)}\r\n                           onChange={this.setNewValue.bind(this, this.props.waveLengthTag)}/>\r\n                </div>\r\n\r\n                <div style={settingContainerStyle}>\r\n                    <p style={textStyle}>\r\n                        Speed\r\n                    </p>\r\n                    <input style={{width:rangeWidth}}\r\n                           id={this.props.speedTag}\r\n                           type=\"range\"\r\n                           min=\"0.0\"\r\n                           max=\"20.0\"\r\n                           step=\"0.1\"\r\n                           defaultValue={ConnectionManager.getItemValue(this.props.speedTag)}\r\n                           onChange={this.setNewValue.bind(this, this.props.speedTag)}/>\r\n                </div>\r\n\r\n                <div style={settingContainerStyle}>\r\n                    <p style={textStyle}>\r\n                        Sharpness\r\n                    </p>\r\n                    <input style={{width:rangeWidth}}\r\n                           id={this.props.sharpnessTag}\r\n                           type=\"range\"\r\n                           min=\"1.0\"\r\n                           max=\"20.0\"\r\n                           step=\"0.1\"\r\n                           defaultValue={ConnectionManager.getItemValue(this.props.sharpnessTag)}\r\n                           onChange={this.setNewValue.bind(this, this.props.sharpnessTag)}/>\r\n                </div>\r\n\r\n                <div style={settingContainerStyle}>\r\n                    <p style={textStyle}>\r\n                        Direction\r\n                    </p>\r\n                    <input style={{width:rangeWidth}}\r\n                           id={this.props.angleTag}\r\n                           type=\"range\"\r\n                           min=\"0.0\"\r\n                           max=\"6.28318530718\"\r\n                           step=\"0.06283185307\"\r\n                           defaultValue={ConnectionManager.getItemValue(this.props.angleTag)}\r\n                           onChange={this.setNewValue.bind(this, this.props.angleTag)}/>\r\n                </div>\r\n\r\n                <div style={settingContainerStyle}>\r\n                    <p style={textStyle}>\r\n                        Color\r\n                    </p>\r\n                    <div style={{display: 'flex', flexDirection: 'row'}}>\r\n\r\n                        <input style={inputStyle}\r\n                               id='r-color'\r\n                               type=\"number\"\r\n                               step='1'\r\n                               min='0'\r\n                               max='255'\r\n                               onKeyPress={this.handleKeyPress.bind(this, 'submit-color')}\r\n                               defaultValue={formatInputValue(waterColor.r*255)}/>\r\n\r\n                        <input style={inputStyle}\r\n                               id='g-color'\r\n                               type=\"number\"\r\n                               step='1.0'\r\n                               min='0.0'\r\n                               max='255.0'\r\n                               onKeyPress={this.handleKeyPress.bind(this, 'submit-color')}\r\n                               defaultValue={formatInputValue(waterColor.g*255)}/>\r\n\r\n                        <input style={inputStyle}\r\n                               id='b-color'\r\n                               type=\"number\"\r\n                               step='1.0'\r\n                               min='0.0'\r\n                               max='255.0'\r\n                               onKeyPress={this.handleKeyPress.bind(this, 'submit-color')}\r\n                               defaultValue={formatInputValue(waterColor.b*255)}/>\r\n                        <button id='submit-color' style={{marginLeft: 10, marginRight: 10, cursor: 'pointer'}} onClick={this.setNewValue.bind(this,this.props.colorTag)}>\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SidePanel;","import React, { Component } from 'react';\r\n\r\n// CSS\r\nimport '../../../css/TopPanel.css';\r\n\r\nclass TopPanel extends Component {\r\n\r\n    render() {\r\n        const containerStyle = {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: '#0074ff',\r\n            color: 'white',\r\n            width: '100%',\r\n            fontSize: '1.0em'\r\n        };\r\n\r\n        const dropdownButtonStyle = {\r\n            backgroundColor: 'Transparent',\r\n            color: 'white',\r\n            padding: '1.0em 2.0em 1.0em 2.0em',\r\n            fontSize: '2.0em',\r\n            border: 'none'\r\n        };\r\n\r\n        return (\r\n            <div id=\"top-panel\" style={containerStyle}>\r\n               <h1>\r\n                   Procedural Waves Demo\r\n               </h1>\r\n                <div className=\"dropdown-container\">\r\n                    <button className=\"dropbtn\" style={dropdownButtonStyle}>Controls</button>\r\n\r\n                    <div className=\"dropdown-content\">\r\n                        <div>\r\n                            <p style={{fontWeight:'bold', margin:0}}>Rotate</p>\r\n                            <p style={{marginTop: 0}}>Press and hold right mouse button</p>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <p style={{fontWeight:'bold', margin:0}}>Move Left/Right/Up/Down</p>\r\n                            <p style={{marginTop: 0}}>Press and hold left mouse button</p>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <p style={{fontWeight:'bold', margin:0}}>Move Forward/Backwards</p>\r\n                            <p style={{marginTop: 0}}>Turn <b>or</b> Press and hold scroll wheel</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopPanel;","import React, { Component } from 'react';\r\n\r\n// CSS\r\nimport './App.css';\r\n\r\n// JavaScript\r\nimport EngineWindow from './js/bluebox/gui/EngineWindow';\r\nimport SidePanel from './js/bluebox/gui/SidePanel';\r\nimport TopPanel from './js/bluebox/gui/TopPanel';\r\nimport ConnectionManager from './js/bluebox/ConnectionManager';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            colorTag: 'waterColor',\r\n            amplitudeTag: 'harmonicAmplitude',\r\n            waveLengthTag: 'harmonicWaveLength',\r\n            sharpnessTag: 'waveSharpness',\r\n            speedTag: 'harmonicSpeed',\r\n            angleTag: 'harmonicDirectionAngle'\r\n        };\r\n\r\n        // Default settings for the procedural waves\r\n        ConnectionManager.init();\r\n        ConnectionManager.registerItem(this.state.colorTag, { r: 0.1, g: 0.15, b: 0.4 });\r\n        ConnectionManager.registerItem(this.state.amplitudeTag, 4.0);\r\n        ConnectionManager.registerItem(this.state.waveLengthTag, 20.0);\r\n        ConnectionManager.registerItem(this.state.sharpnessTag, 3.0);\r\n        ConnectionManager.registerItem(this.state.speedTag, 5.0);\r\n        ConnectionManager.registerItem(this.state.angleTag, 1.57079632679); // PI/2\r\n    }\r\n\r\n    render() {\r\n        const midSectionContainerStyle = {\r\n            height: '100%',\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'row'\r\n        };\r\n\r\n        return (\r\n            <div className=\"App-container\">\r\n                <TopPanel/>\r\n                <div style={midSectionContainerStyle}>\r\n                    <SidePanel width={'300px'}\r\n                               colorTag={this.state.colorTag}\r\n                               amplitudeTag={this.state.amplitudeTag}\r\n                               waveLengthTag={this.state.waveLengthTag}\r\n                               sharpnessTag={this.state.sharpnessTag}\r\n                               speedTag={this.state.speedTag}\r\n                               angleTag={this.state.angleTag}/>\r\n\r\n                    <div id=\"engine-window-container\">\r\n                        <EngineWindow />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
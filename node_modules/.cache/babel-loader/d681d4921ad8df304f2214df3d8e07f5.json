{"ast":null,"code":"//TODO: Implement Quaternion for handling rotations\nimport Matrix4 from './math/Matrix4';\nimport Vector3 from './math/Vector3';\n\nclass Transform {\n  constructor() {\n    this.position = new Vector3([0.0, 0.0, 0.0]);\n    this.rotation = new Vector3([0.0, 0.0, 0.0]);\n    this.scaling = new Vector3([1.0, 1.0, 1.0]);\n    this.matrix = Matrix4.identity();\n    this.localMatrix = Matrix4.identity();\n    this.parent = null;\n    this.children = [];\n  }\n  /*\r\n  clone() {\r\n      let clone = new Transform();\r\n      clone.setPosition([this.position.x, this.position.y, this.position.z]);\r\n      clone.setScale([this.scaling.x, this.scaling.y, this.scaling.z]);\r\n      clone.setRotation([this.rotation.x, this.rotation.y, this.rotation.z]);\r\n      clone.setParent(this.parent);\r\n      return clone;\r\n  }\r\n  */\n\n\n  setScale(scale) {\n    this.scaling.set([scale.x, scale.y, scale.z]);\n    this.composeMatrix();\n    this.updateChildrenTransforms();\n  }\n\n  setPosition(position) {\n    this.position.set([position.x, position.y, position.z]);\n    this.composeMatrix();\n    this.updateChildrenTransforms();\n  }\n\n  setRotation(rotation) {\n    this.rotation.set([rotation.x, rotation.y, rotation.z]);\n    this.composeMatrix();\n    this.updateChildrenTransforms();\n  }\n\n  translate(vec) {\n    let rightVec = new Vector3([this.localMatrix[0] * vec.x, this.localMatrix[4] * vec.x, this.localMatrix[8] * vec.x]);\n    let upVec = new Vector3([this.localMatrix[1] * vec.y, this.localMatrix[5] * vec.y, this.localMatrix[9] * vec.y]);\n    let forwardVec = new Vector3([this.localMatrix[2] * vec.z, this.localMatrix[6] * vec.z, this.localMatrix[10] * vec.z]);\n    this.setPosition([this.position.x + rightVec.x / this.scaling.x - upVec.x / this.scaling.x - forwardVec.x / this.scaling.x, this.position.y - rightVec.y / this.scaling.y + upVec.y / this.scaling.y - forwardVec.y / this.scaling.y, this.position.z - rightVec.z / this.scaling.z - upVec.z / this.scaling.z + forwardVec.z / this.scaling.z]);\n  }\n\n  rotate(rot) {\n    this.setRotation([this.rotation.x + rot.x, this.rotation.y + rot.y, this.rotation.z + rot.z]);\n  }\n\n  setParent(parentTransform) {\n    this.parent = parentTransform;\n    this.matrix = Matrix4.multiply(this.parent.matrix, this.localMatrix);\n    this.updateChildrenTransforms();\n  }\n\n  removeParent() {\n    this.parent = null;\n    this.composeMatrix();\n  }\n\n  addChild(child) {\n    this.children.push(child);\n    child.setParent(this);\n  }\n\n  invert() {\n    return Matrix4.invert(this.matrix, this.matrix);\n  }\n\n  composeMatrix() {\n    let scaleMatrix = Matrix4.scaling(this.scaling.x, this.scaling.y, this.scaling.z);\n    let rotationMatrix = Matrix4.rotateZ(Matrix4.identity(), this.rotation.z * Math.PI / 180);\n    rotationMatrix = Matrix4.rotateX(rotationMatrix, this.rotation.x * Math.PI / 180);\n    rotationMatrix = Matrix4.rotateY(rotationMatrix, this.rotation.y * Math.PI / 180);\n    let translationMatrix = Matrix4.translation(this.position.x, this.position.y, this.position.z);\n    this.localMatrix = Matrix4.multiply(rotationMatrix, scaleMatrix);\n    this.localMatrix = Matrix4.multiply(translationMatrix, this.localMatrix);\n    if (this.parent) this.matrix = Matrix4.multiply(this.parent.matrix, this.localMatrix);else this.matrix = this.localMatrix;\n  }\n\n  updateChildrenTransforms() {\n    for (let i = 0; i < this.children.length; ++i) {\n      this.children[i].setParent(this);\n    }\n  }\n\n}\n\nexport default Transform;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Transform.js"],"names":["Matrix4","Vector3","Transform","constructor","position","rotation","scaling","matrix","identity","localMatrix","parent","children","setScale","scale","set","x","y","z","composeMatrix","updateChildrenTransforms","setPosition","setRotation","translate","vec","rightVec","upVec","forwardVec","rotate","rot","setParent","parentTransform","multiply","removeParent","addChild","child","push","invert","scaleMatrix","rotationMatrix","rotateZ","Math","PI","rotateX","rotateY","translationMatrix","translation","i","length"],"mappings":"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","sourcesContent":["//TODO: Implement Quaternion for handling rotations\r\n\r\nimport Matrix4 from './math/Matrix4';\r\nimport Vector3 from './math/Vector3';\r\n\r\nclass Transform {\r\n    constructor() {\r\n        this.position = new Vector3([0.0, 0.0, 0.0]);\r\n        this.rotation = new Vector3([0.0, 0.0, 0.0]);\r\n        this.scaling = new Vector3([1.0, 1.0, 1.0]);\r\n\r\n        this.matrix = Matrix4.identity();\r\n        this.localMatrix = Matrix4.identity();\r\n\r\n        this.parent = null;\r\n        this.children = [];\r\n    }\r\n    /*\r\n    clone() {\r\n        let clone = new Transform();\r\n        clone.setPosition([this.position.x, this.position.y, this.position.z]);\r\n        clone.setScale([this.scaling.x, this.scaling.y, this.scaling.z]);\r\n        clone.setRotation([this.rotation.x, this.rotation.y, this.rotation.z]);\r\n        clone.setParent(this.parent);\r\n        return clone;\r\n    }\r\n    */\r\n\r\n    setScale(scale) {\r\n        this.scaling.set([scale.x, scale.y, scale.z]);\r\n        this.composeMatrix();\r\n\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    setPosition(position) {\r\n        this.position.set([position.x, position.y, position.z]);\r\n        this.composeMatrix();\r\n\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    setRotation (rotation) {\r\n        this.rotation.set([rotation.x, rotation.y, rotation.z]);\r\n        this.composeMatrix();\r\n\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    translate(vec) {\r\n        let rightVec = new Vector3([this.localMatrix[0]*vec.x, this.localMatrix[4]*vec.x, this.localMatrix[8]*vec.x]);\r\n        let upVec = new Vector3([this.localMatrix[1]*vec.y, this.localMatrix[5]*vec.y, this.localMatrix[9]*vec.y]);\r\n        let forwardVec = new Vector3([this.localMatrix[2]*vec.z, this.localMatrix[6]*vec.z, this.localMatrix[10]*vec.z]);\r\n\r\n        this.setPosition([\r\n            this.position.x + rightVec.x/this.scaling.x - upVec.x/this.scaling.x - forwardVec.x/this.scaling.x,\r\n            this.position.y - rightVec.y/this.scaling.y + upVec.y/this.scaling.y - forwardVec.y/this.scaling.y,\r\n            this.position.z - rightVec.z/this.scaling.z - upVec.z/this.scaling.z + forwardVec.z/this.scaling.z,\r\n        ]);\r\n    }\r\n\r\n    rotate (rot) {\r\n        this.setRotation([\r\n            this.rotation.x + rot.x,\r\n            this.rotation.y + rot.y,\r\n            this.rotation.z + rot.z\r\n        ]);\r\n    }\r\n\r\n    setParent(parentTransform) {\r\n        this.parent = parentTransform;\r\n        this.matrix = Matrix4.multiply(this.parent.matrix, this.localMatrix);\r\n\r\n        this.updateChildrenTransforms();\r\n    }\r\n\r\n    removeParent() {\r\n        this.parent = null;\r\n        this.composeMatrix();\r\n    }\r\n\r\n    addChild(child) {\r\n        this.children.push(child);\r\n        child.setParent(this);\r\n    }\r\n\r\n    invert () {\r\n        return Matrix4.invert(this.matrix, this.matrix);\r\n    }\r\n\r\n    composeMatrix () {\r\n        let scaleMatrix = Matrix4.scaling(this.scaling.x, this.scaling.y, this.scaling.z);\r\n        let rotationMatrix = Matrix4.rotateZ(Matrix4.identity(), (this.rotation.z*Math.PI/180));\r\n        rotationMatrix = Matrix4.rotateX(rotationMatrix, (this.rotation.x*Math.PI/180));\r\n        rotationMatrix = Matrix4.rotateY(rotationMatrix, (this.rotation.y*Math.PI/180));\r\n\r\n        let translationMatrix = Matrix4.translation(this.position.x, this.position.y, this.position.z);\r\n\r\n        this.localMatrix = Matrix4.multiply(rotationMatrix, scaleMatrix);\r\n        this.localMatrix = Matrix4.multiply(translationMatrix, this.localMatrix);\r\n\r\n        if (this.parent)\r\n            this.matrix = Matrix4.multiply(this.parent.matrix, this.localMatrix);\r\n        else\r\n            this.matrix = this.localMatrix\r\n    }\r\n\r\n    updateChildrenTransforms() {\r\n        for (let i = 0; i < this.children.length; ++i) {\r\n            this.children[i].setParent(this);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Transform;"]},"metadata":{},"sourceType":"module"}
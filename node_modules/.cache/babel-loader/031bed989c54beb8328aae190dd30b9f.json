{"ast":null,"code":"class AmbientShader {\n  static get vertex() {\n    return [\"precision mediump float;\", \"\", // Attribute locations\n    \"attribute vec3 vertPosition;\", \"attribute vec3 vertNormal;\", \"attribute vec2 vertTexCoord;\", \"\", // Time variable\n    \"uniform float time;\", \"\", // Transformation matrices\n    \"uniform mat4 cameraView;\", \"uniform mat4 modelView;\", \"uniform mat4 perspective;\", \"\", \"void main() {\", // Final transformation ( Perspective multiplied with the model view )\n    \"   mat4 T = perspective * cameraView * modelView;\", // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\n    \"   gl_Position = T * vec4(vertPosition, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n  static get fragment() {\n    return [// Float precision\n    \"precision mediump float;\", // Shader inputs\n    \"uniform vec3 diffuseColor;\", \"\", \"void main() {\", // Final shaded color (texture * lighting)\n    \"\tgl_FragColor = vec4 (diffuseColor, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default AmbientShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\AmbientShader.js"],"names":["AmbientShader","vertex","join","fragment"],"mappings":"AAAA,MAAMA,aAAN,CAAoB;AAChB,aAAWC,MAAX,GAAqB;AACjB,WAAO,CACH,0BADG,EAEH,EAFG,EAGH;AACA,kCAJG,EAKH,4BALG,EAMH,8BANG,EAOH,EAPG,EAQH;AACA,yBATG,EAUH,EAVG,EAWH;AACA,8BAZG,EAaH,yBAbG,EAcH,2BAdG,EAeH,EAfG,EAgBH,eAhBG,EAiBH;AACA,uDAlBG,EAmBH;AACA,mDApBG,EAqBH,GArBG,EAsBLC,IAtBK,CAsBA,IAtBA,CAAP;AAuBH;;AAED,aAAWC,QAAX,GAAuB;AACnB,WAAO,CACH;AACA,8BAFG,EAGH;AACA,gCAJG,EAKH,EALG,EAMH,eANG,EAOH;AACA,+CARG,EASH,GATG,EAULD,IAVK,CAUA,IAVA,CAAP;AAWH;;AAvCe;;AA0CpB,eAAeF,aAAf","sourcesContent":["class AmbientShader {\r\n    static get vertex () {\r\n        return [\r\n            \"precision mediump float;\",\r\n            \"\",\r\n            // Attribute locations\r\n            \"attribute vec3 vertPosition;\",\r\n            \"attribute vec3 vertNormal;\",\r\n            \"attribute vec2 vertTexCoord;\",\r\n            \"\",\r\n            // Time variable\r\n            \"uniform float time;\",\r\n            \"\",\r\n            // Transformation matrices\r\n            \"uniform mat4 cameraView;\",\r\n            \"uniform mat4 modelView;\",\r\n            \"uniform mat4 perspective;\",\r\n            \"\",\r\n            \"void main() {\",\r\n            // Final transformation ( Perspective multiplied with the model view )\r\n            \"   mat4 T = perspective * cameraView * modelView;\",\r\n            // Transform (x,y,z) vertex coordinates with a 4x4 matrix T\r\n            \"   gl_Position = T * vec4(vertPosition, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    static get fragment () {\r\n        return [\r\n            // Float precision\r\n            \"precision mediump float;\",\r\n            // Shader inputs\r\n            \"uniform vec3 diffuseColor;\",\r\n            \"\",\r\n            \"void main() {\",\r\n            // Final shaded color (texture * lighting)\r\n            \"\tgl_FragColor = vec4 (diffuseColor, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default AmbientShader;"]},"metadata":{},"sourceType":"module"}
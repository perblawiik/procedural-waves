{"ast":null,"code":"// Enum struct for handling mouse events\nconst MouseKey = {\n  LEFT_CLICK: 1,\n  RIGHT_CLICK: 3\n};\n\nclass MouseEventHandler {\n  constructor(sceneObjects) {\n    this.mouseInputReader = {\n      leftClickIsActive: false,\n      rightClickIsActive: false,\n      moveX: 0,\n      moveY: 0,\n      altKey: false,\n      ctrlKey: false,\n      shiftKey: false,\n      selectedGameObjectIndex: 0,\n      selectedGameObjectAxis: null,\n      moveGameObjectX: 0,\n      moveGameObjectY: 0\n    };\n    let mouseInput = this.mouseInputReader;\n    let canvas2D = document.getElementById('text-canvas');\n    canvas2D.addEventListener(\"mousedown\", function (event) {\n      switch (event.which) {\n        case MouseKey.LEFT_CLICK:\n          mouseInput.leftClickIsActive = true;\n          mouseInput.altKey = event.altKey;\n          mouseInput.ctrlKey = event.ctrlKey;\n          mouseInput.shiftKey = event.shiftKey; // Extend the click box borders\n\n          let offset = 4;\n\n          for (let i = 0; i < sceneObjects.length; ++i) {\n            // Check if the coordinate system is visible\n            if (sceneObjects[i].localCoordinateSystemUI.isVisible) {\n              // Check if mouse is in the click box area\n              if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMax + offset && event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMin - offset && event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMax + offset && event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMin - offset) {\n                mouseInput.selectedGameObjectAxis = 'x';\n              } else if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax + offset && event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMin - offset && event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMax + offset && event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMin - offset) {\n                mouseInput.selectedGameObjectAxis = 'y';\n              } else if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax + offset && event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.xMin - offset && event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMax + offset && event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMin - offset) {\n                mouseInput.selectedGameObjectAxis = 'z';\n              }\n\n              mouseInput.selectedGameObjectIndex = i;\n            }\n          }\n\n          break;\n\n        case MouseKey.RIGHT_CLICK:\n          mouseInput.rightClickIsActive = true;\n          break;\n\n        default:\n          break;\n      }\n    }, false);\n    canvas2D.addEventListener(\"mouseup\", function (event) {\n      switch (event.which) {\n        case MouseKey.LEFT_CLICK:\n          mouseInput.leftClickIsActive = false;\n          mouseInput.selectedGameObjectAxis = null;\n          break;\n\n        case MouseKey.RIGHT_CLICK:\n          mouseInput.rightClickIsActive = false;\n          break;\n\n        default:\n          break;\n      }\n    }, false);\n    canvas2D.addEventListener(\"mouseleave\", function (event) {\n      if (mouseInput.leftClickIsActive) {\n        mouseInput.leftClickIsActive = false;\n      } else if (mouseInput.rightClickIsActive) {\n        mouseInput.rightClickIsActive = false;\n      }\n    }, false);\n    canvas2D.addEventListener(\"mousemove\", function (event) {\n      if (mouseInput.leftClickIsActive || mouseInput.rightClickIsActive) {\n        mouseInput.moveX = event.movementX;\n        mouseInput.moveY = event.movementY;\n        mouseInput.moveGameObjectX = event.movementX;\n        mouseInput.moveGameObjectY = event.movementY;\n      }\n    }, false);\n\n    canvas2D.onwheel = function (event) {\n      console.log(event.deltaX);\n    };\n  }\n\n  processCameraMovement(camera) {\n    if (this.mouseInputReader.leftClickIsActive) {\n      // Move forward/backwards\n      if (this.mouseInputReader.ctrlKey) {\n        camera.translate([0.0, 0.0, -(this.mouseInputReader.moveY + this.mouseInputReader.moveX) / 4]);\n      } else {\n        // Move left/right and up/down\n        camera.translate([-this.mouseInputReader.moveX / 4, this.mouseInputReader.moveY / 4, 0.0]);\n      }\n\n      this.mouseInputReader.moveX = 0;\n      this.mouseInputReader.moveY = 0; //this.UpdateGameObjectScreenPosition();\n    } else if (this.mouseInputReader.rightClickIsActive) {\n      camera.rotate([-this.mouseInputReader.moveY / 8, -this.mouseInputReader.moveX / 8, 0.0]);\n      this.mouseInputReader.moveX = 0;\n      this.mouseInputReader.moveY = 0;\n    }\n  }\n\n}\n\nexport default MouseEventHandler;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\MouseEventHandler.js"],"names":["MouseKey","LEFT_CLICK","RIGHT_CLICK","MouseEventHandler","constructor","sceneObjects","mouseInputReader","leftClickIsActive","rightClickIsActive","moveX","moveY","altKey","ctrlKey","shiftKey","selectedGameObjectIndex","selectedGameObjectAxis","moveGameObjectX","moveGameObjectY","mouseInput","canvas2D","document","getElementById","addEventListener","event","which","offset","i","length","localCoordinateSystemUI","isVisible","offsetX","clickBoxAxisX","borders","xMax","xMin","offsetY","yMax","yMin","clickBoxAxisY","clickBoxAxisZ","movementX","movementY","onwheel","console","log","deltaX","processCameraMovement","camera","translate","rotate"],"mappings":"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","sourcesContent":["// Enum struct for handling mouse events\r\nconst MouseKey = {\r\n    LEFT_CLICK: 1,\r\n    RIGHT_CLICK: 3\r\n};\r\n\r\nclass MouseEventHandler {\r\n    constructor(sceneObjects) {\r\n        this.mouseInputReader = {\r\n            leftClickIsActive: false,\r\n            rightClickIsActive: false,\r\n            moveX: 0,\r\n            moveY: 0,\r\n            altKey: false,\r\n            ctrlKey: false,\r\n            shiftKey: false,\r\n            selectedGameObjectIndex: 0,\r\n            selectedGameObjectAxis: null,\r\n            moveGameObjectX: 0,\r\n            moveGameObjectY: 0\r\n        };\r\n        let mouseInput = this.mouseInputReader;\r\n\r\n        let canvas2D = document.getElementById('text-canvas');\r\n\r\n        canvas2D.addEventListener(\"mousedown\", function(event) {\r\n            switch(event.which) {\r\n                case MouseKey.LEFT_CLICK:\r\n                    mouseInput.leftClickIsActive = true;\r\n                    mouseInput.altKey = event.altKey;\r\n                    mouseInput.ctrlKey = event.ctrlKey;\r\n                    mouseInput.shiftKey = event.shiftKey;\r\n\r\n                    // Extend the click box borders\r\n                    let offset = 4;\r\n\r\n                    for (let i = 0; i < sceneObjects.length; ++i) {\r\n                        // Check if the coordinate system is visible\r\n                        if (sceneObjects[i].localCoordinateSystemUI.isVisible) {\r\n                            // Check if mouse is in the click box area\r\n                            if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMax+offset &&\r\n                                event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMin-offset &&\r\n                                event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMax+offset &&\r\n                                event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'x';\r\n                            }\r\n                            else if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                                event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMin-offset &&\r\n                                event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMax+offset &&\r\n                                event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'y';\r\n                            }\r\n                            else if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                                event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.xMin-offset &&\r\n                                event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMax+offset &&\r\n                                event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'z';\r\n                            }\r\n\r\n                            mouseInput.selectedGameObjectIndex = i;\r\n                        }\r\n                    }\r\n                    break;\r\n                case MouseKey.RIGHT_CLICK:\r\n                    mouseInput.rightClickIsActive = true;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }, false);\r\n\r\n        canvas2D.addEventListener(\"mouseup\", function(event) {\r\n            switch(event.which) {\r\n                case MouseKey.LEFT_CLICK:\r\n                    mouseInput.leftClickIsActive = false;\r\n                    mouseInput.selectedGameObjectAxis = null;\r\n                    break;\r\n                case MouseKey.RIGHT_CLICK:\r\n                    mouseInput.rightClickIsActive = false;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }, false);\r\n\r\n        canvas2D.addEventListener(\"mouseleave\", function(event) {\r\n            if (mouseInput.leftClickIsActive) {\r\n                mouseInput.leftClickIsActive = false;\r\n            }\r\n            else if (mouseInput.rightClickIsActive) {\r\n                mouseInput.rightClickIsActive = false;\r\n            }\r\n        }, false);\r\n\r\n        canvas2D.addEventListener(\"mousemove\", function(event) {\r\n            if (mouseInput.leftClickIsActive || mouseInput.rightClickIsActive) {\r\n                mouseInput.moveX = event.movementX;\r\n                mouseInput.moveY = event.movementY;\r\n                mouseInput.moveGameObjectX = event.movementX;\r\n                mouseInput.moveGameObjectY = event.movementY;\r\n            }\r\n        }, false);\r\n\r\n        canvas2D.onwheel = function(event) {\r\n            console.log(event.deltaX);\r\n        };\r\n    }\r\n\r\n    processCameraMovement (camera) {\r\n        if (this.mouseInputReader.leftClickIsActive) {\r\n            // Move forward/backwards\r\n            if (this.mouseInputReader.ctrlKey) {\r\n                camera.translate([0.0, 0.0, -(this.mouseInputReader.moveY+this.mouseInputReader.moveX)/4]);\r\n            }\r\n            else { // Move left/right and up/down\r\n                camera.translate([-this.mouseInputReader.moveX/4, this.mouseInputReader.moveY/4, 0.0]);\r\n            }\r\n\r\n            this.mouseInputReader.moveX = 0;\r\n            this.mouseInputReader.moveY = 0;\r\n\r\n            //this.UpdateGameObjectScreenPosition();\r\n        }\r\n        else if (this.mouseInputReader.rightClickIsActive) {\r\n            camera.rotate([-this.mouseInputReader.moveY/8, -this.mouseInputReader.moveX/8, 0.0]);\r\n            this.mouseInputReader.moveX = 0;\r\n            this.mouseInputReader.moveY = 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MouseEventHandler;"]},"metadata":{},"sourceType":"module"}
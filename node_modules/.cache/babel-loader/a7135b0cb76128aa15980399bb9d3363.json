{"ast":null,"code":"import Vector3 from \"./math/Vector3\";\nimport RigidBody from \"./RigidBody\";\n\nclass ParticleEmitter {\n  constructor(particleModel, particleSpeed, particleReach) {\n    this.activeBullets = [];\n    this.model = particleModel;\n    this.speed = particleSpeed;\n    this.reach = particleReach;\n    this.gravityIsEnabled = false;\n    this.gravity = 9.82;\n  }\n\n  emitParticle(origin, direction) {\n    let rb = new RigidBody(origin);\n    rb.setVelocity([direction.x * this.speed, direction.y * this.speed, direction.z * this.speed]);\n    rb.enableGravity(this.gravityIsEnabled);\n    this.activeBullets.push({\n      body: rb,\n      origin: new Vector3(origin)\n    });\n  }\n\n  enableGravity(state) {\n    this.gravityIsEnabled = state;\n    this.activeBullets.forEach(bullet => {\n      bullet.body.enableGravity(state);\n    });\n  }\n\n  update(timeStep) {\n    let i = 0;\n\n    while (i < this.activeBullets.length) {\n      // Update rigid body motion\n      this.activeBullets[i].body.update(timeStep); // Check distance from start position\n\n      if (Vector3.distance(this.activeBullets[i].body.position, this.activeBullets[i].origin) < this.reach) {\n        ++i;\n      } else {\n        // Remove bullet if distance is greater than reach\n        this.activeBullets.splice(i, 1);\n      }\n    }\n  }\n\n  render(shader) {\n    this.activeBullets.forEach(bullet => {\n      // Set bullet position\n      this.model.setPosition([bullet.body.position.x, bullet.body.position.y, bullet.body.position.z]); // Draw bullet\n\n      this.model.render(shader);\n    });\n  }\n\n}\n\nexport default ParticleEmitter;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Bullets.js"],"names":["Vector3","RigidBody","ParticleEmitter","constructor","particleModel","particleSpeed","particleReach","activeBullets","model","speed","reach","gravityIsEnabled","gravity","emitParticle","origin","direction","rb","setVelocity","x","y","z","enableGravity","push","body","state","forEach","bullet","update","timeStep","i","length","distance","position","splice","render","shader","setPosition"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,eAAN,CAAsB;AAClBC,EAAAA,WAAW,CAAEC,aAAF,EAAiBC,aAAjB,EAAgCC,aAAhC,EAA+C;AACtD,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,KAAL,GAAaJ,aAAb;AACA,SAAKK,KAAL,GAAaJ,aAAb;AACA,SAAKK,KAAL,GAAaJ,aAAb;AAEA,SAAKK,gBAAL,GAAwB,KAAxB;AACA,SAAKC,OAAL,GAAe,IAAf;AACH;;AAEDC,EAAAA,YAAY,CAACC,MAAD,EAASC,SAAT,EAAoB;AAC5B,QAAIC,EAAE,GAAG,IAAIf,SAAJ,CAAca,MAAd,CAAT;AACAE,IAAAA,EAAE,CAACC,WAAH,CAAe,CAACF,SAAS,CAACG,CAAV,GAAc,KAAKT,KAApB,EAA2BM,SAAS,CAACI,CAAV,GAAc,KAAKV,KAA9C,EAAqDM,SAAS,CAACK,CAAV,GAAc,KAAKX,KAAxE,CAAf;AACAO,IAAAA,EAAE,CAACK,aAAH,CAAiB,KAAKV,gBAAtB;AAEA,SAAKJ,aAAL,CAAmBe,IAAnB,CAAwB;AACpBC,MAAAA,IAAI,EAAEP,EADc;AAEpBF,MAAAA,MAAM,EAAE,IAAId,OAAJ,CAAYc,MAAZ;AAFY,KAAxB;AAIH;;AAEDO,EAAAA,aAAa,CAACG,KAAD,EAAQ;AACjB,SAAKb,gBAAL,GAAwBa,KAAxB;AAEA,SAAKjB,aAAL,CAAmBkB,OAAnB,CAA4BC,MAAD,IAAY;AACnCA,MAAAA,MAAM,CAACH,IAAP,CAAYF,aAAZ,CAA0BG,KAA1B;AACH,KAFD;AAGH;;AAEDG,EAAAA,MAAM,CAACC,QAAD,EAAW;AACb,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAMA,CAAC,GAAG,KAAKtB,aAAL,CAAmBuB,MAA7B,EAAqC;AACjC;AACA,WAAKvB,aAAL,CAAmBsB,CAAnB,EAAsBN,IAAtB,CAA2BI,MAA3B,CAAkCC,QAAlC,EAFiC,CAIjC;;AACA,UAAI5B,OAAO,CAAC+B,QAAR,CAAiB,KAAKxB,aAAL,CAAmBsB,CAAnB,EAAsBN,IAAtB,CAA2BS,QAA5C,EAAsD,KAAKzB,aAAL,CAAmBsB,CAAnB,EAAsBf,MAA5E,IAAsF,KAAKJ,KAA/F,EAAsG;AAClG,UAAEmB,CAAF;AACH,OAFD,MAGK;AAAC;AACF,aAAKtB,aAAL,CAAmB0B,MAAnB,CAA0BJ,CAA1B,EAA6B,CAA7B;AACH;AACJ;AACJ;;AAEDK,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,SAAK5B,aAAL,CAAmBkB,OAAnB,CAA4BC,MAAD,IAAY;AACnC;AACA,WAAKlB,KAAL,CAAW4B,WAAX,CAAuB,CAACV,MAAM,CAACH,IAAP,CAAYS,QAAZ,CAAqBd,CAAtB,EAAyBQ,MAAM,CAACH,IAAP,CAAYS,QAAZ,CAAqBb,CAA9C,EAAiDO,MAAM,CAACH,IAAP,CAAYS,QAAZ,CAAqBZ,CAAtE,CAAvB,EAFmC,CAGnC;;AACA,WAAKZ,KAAL,CAAW0B,MAAX,CAAkBC,MAAlB;AACH,KALD;AAMH;;AArDiB;;AAwDtB,eAAejC,eAAf","sourcesContent":["import Vector3 from \"./math/Vector3\";\r\nimport RigidBody from \"./RigidBody\";\r\n\r\nclass ParticleEmitter {\r\n    constructor (particleModel, particleSpeed, particleReach) {\r\n        this.activeBullets = [];\r\n        this.model = particleModel;\r\n        this.speed = particleSpeed;\r\n        this.reach = particleReach;\r\n\r\n        this.gravityIsEnabled = false;\r\n        this.gravity = 9.82;\r\n    }\r\n\r\n    emitParticle(origin, direction) {\r\n        let rb = new RigidBody(origin);\r\n        rb.setVelocity([direction.x * this.speed, direction.y * this.speed, direction.z * this.speed]);\r\n        rb.enableGravity(this.gravityIsEnabled);\r\n\r\n        this.activeBullets.push({\r\n            body: rb,\r\n            origin: new Vector3(origin),\r\n        });\r\n    }\r\n\r\n    enableGravity(state) {\r\n        this.gravityIsEnabled = state;\r\n\r\n        this.activeBullets.forEach((bullet) => {\r\n            bullet.body.enableGravity(state);\r\n        });\r\n    }\r\n\r\n    update(timeStep) {\r\n        let i = 0;\r\n        while(i < this.activeBullets.length) {\r\n            // Update rigid body motion\r\n            this.activeBullets[i].body.update(timeStep);\r\n\r\n            // Check distance from start position\r\n            if (Vector3.distance(this.activeBullets[i].body.position, this.activeBullets[i].origin) < this.reach) {\r\n                ++i;\r\n            }\r\n            else {// Remove bullet if distance is greater than reach\r\n                this.activeBullets.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    render(shader) {\r\n        this.activeBullets.forEach((bullet) => {\r\n            // Set bullet position\r\n            this.model.setPosition([bullet.body.position.x, bullet.body.position.y, bullet.body.position.z]);\r\n            // Draw bullet\r\n            this.model.render(shader);\r\n        })\r\n    }\r\n}\r\n\r\nexport default ParticleEmitter;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// JS\nimport Shader from \"./Shader.js\";\nimport Time from \"./Time.js\";\nimport Camera from \"./Camera.js\"; // Settings\n\nconst CAMERA_POSITION = [0.0, 50.0, 300.0];\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0;\n    this.frameCount = 0;\n    this.fps = 0;\n  }\n\n  run() {\n    // Keeps track of time passed and delta time\n    Time.Update(); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Draw the 3D scene\n\n    this.drawScene(); // Clear screen 2D\n    //this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\n    // Calculate fps\n\n    this.displayFrameRate();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000) {\n      // Set text font style\n      this.ctx.font = \"20px Consolas\";\n      this.ctx.fillStyle = 'white'; // Fps = the number of frames\n\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0; // Clear previous\n\n      this.ctx.clearRect(0, 0, this.canvas.width, 25); // Draw fps and frame time in milliseconds\n\n      this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\n    } else {\n      ++this.frameCount;\n    }\n  }\n\n  preload() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    }\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to light blue, fully opaque\n\n    this.gl.clearColor(0.0, 0.40, 0.55, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas);\n    this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\n    this.camera.SetPosition(CAMERA_POSITION);\n    this.camera.SetRotation(CAMERA_ROTATION); //this.SetUpEventListeners();\n  }\n\n  drawScene() {\n    // Clear screen 3D\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw objects\n    // Clear depth so that local coordinate axes is visible through models\n    // Draw local coordinate axes UI\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.mainShader);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.CreateCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.CreateSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER) {\n      mesh.CreateCylinder(32, 1);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.CreatePlane(50, 50);\n    }\n\n    mesh.SetColor(settings.color);\n    let obj = new GameObject(settings.name, this.mainShader);\n    obj.SetPosition(settings.position);\n    obj.SetScale(settings.scale);\n    obj.AddMesh(mesh);\n    let update = this.state.listOfGameObjects;\n    update.push(obj);\n    this.setState({\n      listOfGameObjects: update\n    });\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","CAMERA_POSITION","CAMERA_ROTATION","Engine","constructor","lastTime","frameCount","fps","run","Update","gl","viewport","canvas","width","height","drawScene","displayFrameRate","currentTime","time","ctx","font","fillStyle","clearRect","fillText","preload","canvas2D","document","getElementById","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","mainShader","camera","cameraViewUniformLocation","SetPosition","SetRotation","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","createGameObject","settings","mesh","Mesh","shape","SHAPE","CUBE","CreateCube","SPHERE","CreateSphere","CYLINDER","CreateCylinder","PLANE","CreatePlane","SetColor","color","obj","GameObject","name","position","SetScale","scale","AddMesh","update","state","listOfGameObjects","push","setState"],"mappings":"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","sourcesContent":["// JS\r\nimport Shader from \"./Shader.js\";\r\nimport Time from \"./Time.js\";\r\nimport Camera from \"./Camera.js\";\r\n\r\n// Settings\r\nconst CAMERA_POSITION = [0.0, 50.0, 300.0];\r\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n    }\r\n\r\n    run() {\r\n        // Keeps track of time passed and delta time\r\n        Time.Update();\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Draw the 3D scene\r\n        this.drawScene();\r\n\r\n        // Clear screen 2D\r\n        //this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\r\n\r\n        // Calculate fps\r\n        this.displayFrameRate();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000) {\r\n            // Set text font style\r\n            this.ctx.font = \"20px Consolas\";\r\n            this.ctx.fillStyle = 'white';\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n            // Clear previous\r\n            this.ctx.clearRect(0, 0, this.canvas.width, 25);\r\n            // Draw fps and frame time in milliseconds\r\n            this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n    }\r\n\r\n    preload() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to light blue, fully opaque\r\n        this.gl.clearColor(0.0, 0.40, 0.55, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\r\n        this.camera.SetPosition(CAMERA_POSITION);\r\n        this.camera.SetRotation(CAMERA_ROTATION);\r\n\r\n        //this.SetUpEventListeners();\r\n    }\r\n\r\n    drawScene() {\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw objects\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n\r\n        // Draw local coordinate axes UI\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.mainShader);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.CreateCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.CreateSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER) {\r\n            mesh.CreateCylinder(32,1);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.CreatePlane(50,50);\r\n        }\r\n        mesh.SetColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name, this.mainShader);\r\n        obj.SetPosition(settings.position);\r\n        obj.SetScale(settings.scale);\r\n        obj.AddMesh(mesh);\r\n\r\n        let update = this.state.listOfGameObjects;\r\n        update.push(obj);\r\n        this.setState({\r\n            listOfGameObjects: update\r\n        });\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
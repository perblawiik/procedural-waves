{"ast":null,"code":"import Time from \"./Time\";\nimport MouseEvent from \"./events/MouseEvent\";\nimport Raycast from \"./Raycast\";\n\nclass GameEditor {\n  constructor(gl, context2D, shaders, camera, canvas, projectionMatrix) {\n    this.gl = gl;\n    this.context2D = context2D;\n    this.canvas = canvas;\n    this.shaders = shaders;\n    this.camera = camera;\n    this.projectionMatrix = projectionMatrix;\n    this.selectedObject = null; // Initialize timing variables\n\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0; // Create a 3D model used for visualizing the sphere collider\n\n    this.sphereColliderModel = new Mesh(this.gl);\n    this.sphereColliderModel.createSphere(6);\n    this.sphereColliderModel.setColor([0.75, 0.75, 0.75]);\n    this.sphereColliderModel.setDrawMode(this.gl.LINE_STRIP);\n  }\n\n  render() {\n    this.drawTextElements();\n  }\n\n  processUserInput() {\n    // Handle camera navigation\n    this.processCameraNavigation(); // If left mouse button is pressed, cast a ray from the mouse cursor position\n\n    if (MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\n      // Create a ray from the camera\n      let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height); //// Test ray intersections ////\n\n      let objectFound = Raycast.findObjectIntersection(ray);\n\n      if (objectFound) {\n        if (this.selectedObject) this.selectedObject.setActive(false);\n        objectFound.setActive(true);\n        this.selectedObject = objectFound;\n      }\n    }\n  }\n\n  processCameraNavigation() {\n    // Zoom camera view in and out\n    if (MouseEvent.isPressed.middleButton) {\n      this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX) / 20.0]);\n    } // Pan the camera view\n    else if (MouseEvent.isPressed.leftButton) {\n        this.camera.translate([-MouseEvent.movementX / 40.0, MouseEvent.movementY / 40.0, 0.0]);\n      } // Rotate the camera view\n      else if (MouseEvent.isPressed.rightButton) {\n          this.camera.rotate([-MouseEvent.movementY / 10.0, -MouseEvent.movementX / 10.0, 0.0]);\n        }\n\n    if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\n      if (MouseEvent.wheelDelta > 0.0) {\n        this.camera.translate([0.0, 0.0, 0.5]);\n      } else this.camera.translate([0.0, 0.0, -0.5]);\n    }\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.context2D.font = \"20px Consolas\";\n    this.context2D.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.context2D.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\"; // Draw fps and frame time in milliseconds\n\n    this.context2D.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 10;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.context2D.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n}\n\nexport default GameEditor;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\GameEditor.js"],"names":["Time","MouseEvent","Raycast","GameEditor","constructor","gl","context2D","shaders","camera","canvas","projectionMatrix","selectedObject","lastTime","frameCount","fps","currentTextOffset","sphereColliderModel","Mesh","createSphere","setColor","setDrawMode","LINE_STRIP","render","drawTextElements","processUserInput","processCameraNavigation","mouseDown","isPressed","leftButton","ray","raycastFromMouseCursor","offsetX","offsetY","transform","width","height","objectFound","findObjectIntersection","setActive","middleButton","translate","movementY","movementX","rightButton","rotate","Math","abs","wheelDelta","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","deltaTime","toFixed","fillText","length","pos","position","cameraPositionText","x","y","z"],"mappings":"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","sourcesContent":["import Time from \"./Time\";\r\nimport MouseEvent from \"./events/MouseEvent\";\r\nimport Raycast from \"./Raycast\";\r\n\r\nclass GameEditor {\r\n    constructor(gl, context2D, shaders, camera, canvas, projectionMatrix) {\r\n        this.gl = gl;\r\n        this.context2D = context2D;\r\n        this.canvas = canvas;\r\n\r\n        this.shaders = shaders;\r\n        this.camera = camera;\r\n        this.projectionMatrix = projectionMatrix;\r\n        this.selectedObject = null;\r\n\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n\r\n        // Create a 3D model used for visualizing the sphere collider\r\n        this.sphereColliderModel = new Mesh(this.gl);\r\n        this.sphereColliderModel.createSphere(6);\r\n        this.sphereColliderModel.setColor([0.75, 0.75, 0.75]);\r\n        this.sphereColliderModel.setDrawMode(this.gl.LINE_STRIP);\r\n    }\r\n\r\n    render() {\r\n        this.drawTextElements();\r\n    }\r\n\r\n    processUserInput() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation();\r\n\r\n        // If left mouse button is pressed, cast a ray from the mouse cursor position\r\n        if(MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\r\n            // Create a ray from the camera\r\n            let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height);\r\n\r\n            //// Test ray intersections ////\r\n            let objectFound = Raycast.findObjectIntersection(ray);\r\n            if (objectFound) {\r\n                if (this.selectedObject)\r\n                    this.selectedObject.setActive(false);\r\n\r\n                objectFound.setActive(true);\r\n                this.selectedObject = objectFound;\r\n            }\r\n        }\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 0.5]);\r\n            }\r\n            else\r\n                this.camera.translate([0.0, 0.0, -0.5]);\r\n        }\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.context2D.font = \"20px Consolas\";\r\n        this.context2D.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.context2D.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.context2D.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 10;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.context2D.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n}\r\n\r\nexport default GameEditor;"]},"metadata":{},"sourceType":"module"}
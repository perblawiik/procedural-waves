{"ast":null,"code":"// JavaScript\nimport Shader from \"./Shader\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./EventHandler\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 50.0, 300.0];\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER: 2,\n  PLANE: 3\n};\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.sceneObjects = [];\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Keeps track of time passed and delta time\n    Time.update(); // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n\n    this.updateViewportDimensions(); // Handle camera navigation\n\n    this.eventHandler.processCameraNavigation(this.camera);\n    this.mainShader.setCameraPosition(this.camera.transform.position); // Draw the 3D scene\n\n    this.drawScene(); // Clear screen 2D\n    //this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\n    // Calculate fps\n\n    this.displayFrameRate();\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let aspectRatio = this.canvas.width / this.canvas.height; // Update the projection matrix\n\n    this.mainShader.setProjectionMatrix(aspectRatio); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  preload() {\n    // Initiate the mouse event handler\n    this.eventHandler = new EventHandler(this.sceneObjects); // 2D Canvas for text display\n\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    }\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.05, 0.05, 0.05, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas);\n    this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create scene objects\n\n    this.loadDefaultSceneObjects(); // Define event listeners for mouse events\n    //this.setUpEventListeners();\n  }\n\n  drawScene() {\n    // Clear screen 3D\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scene objects\n\n    this.sceneObjects.forEach(object => {\n      object.render();\n    }); // Clear depth so that local coordinate axes is visible through models\n    // Draw local coordinate axes UI\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.mainShader);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER) {\n      mesh.createCylinder(32, 1);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name, this.mainShader);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    this.sceneObjects.push(obj);\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Set text font style\n      this.ctx.font = \"20px Consolas\";\n      this.ctx.fillStyle = 'white'; // Fps = the number of frames\n\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0; // Clear previous\n\n      this.ctx.clearRect(0, 0, this.canvas.width, 30); // Draw fps and frame time in milliseconds\n\n      this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 10, 25);\n    } else {\n      ++this.frameCount;\n    }\n  }\n\n  loadDefaultSceneObjects() {\n    // Create a white sphere\n    this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [10.0, 10.0, 10.0],\n      position: [100.0, 100.0, 0.0],\n      color: [1.0, 1.0, 1.0]\n    }); // Create a cyan cube\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [10.0, 10.0, 10.0],\n      position: [0.0, 10.0, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); // Create a green sphere\n\n    this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [10.0, 10.0, 10.0],\n      position: [40.0, 20.0, 20.0],\n      color: [0.0, 1.0, 0.0]\n    }); // Create a magenta cylinder\n\n    this.createGameObject({\n      shape: SHAPE.CYLINDER,\n      name: 'Magenta Cylinder',\n      scale: [10.0, 10.0, 10.0],\n      position: [-40.0, 20.0, 20.0],\n      color: [1.0, 0.0, 1.0]\n    }); // Create gray floor\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    }); // Create Walls\n\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 01',\n      scale: [1.0, 30.0, 200.0],\n      position: [-200.0, 30.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 02',\n      scale: [1.0, 30.0, 200.0],\n      position: [200.0, 30.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n    this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 03',\n      scale: [200.0, 30.0, 1.0],\n      position: [0.0, 30.0, -200, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER","PLANE","Engine","constructor","lastTime","frameCount","fps","sceneObjects","run","update","updateViewportDimensions","eventHandler","processCameraNavigation","camera","mainShader","setCameraPosition","transform","position","drawScene","displayFrameRate","aspectRatio","canvas","width","height","setProjectionMatrix","gl","viewport","preload","canvas2D","document","getElementById","ctx","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","cameraViewUniformLocation","setPosition","setRotation","loadDefaultSceneObjects","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","forEach","object","render","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinder","createPlane","setColor","color","obj","name","setScale","scale","addMesh","push","currentTime","time","font","fillStyle","clearRect","fillText"],"mappings":"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","sourcesContent":["// JavaScript\r\nimport Shader from \"./Shader\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./EventHandler\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 50.0, 300.0];\r\nconst CAMERA_ROTATION = [-15.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER: 2,\r\n    PLANE: 3\r\n};\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.sceneObjects = [];\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Keeps track of time passed and delta time\r\n        Time.update();\r\n\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Handle camera navigation\r\n        this.eventHandler.processCameraNavigation(this.camera);\r\n        this.mainShader.setCameraPosition(this.camera.transform.position);\r\n\r\n        // Draw the 3D scene\r\n        this.drawScene();\r\n\r\n        // Clear screen 2D\r\n        //this.ctx.clearRect(0, 25, this.canvas.width, this.canvas.height);\r\n\r\n        // Calculate fps\r\n        this.displayFrameRate();\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let aspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Update the projection matrix\r\n        this.mainShader.setProjectionMatrix(aspectRatio);\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    preload() {\r\n        // Initiate the mouse event handler\r\n        this.eventHandler = new EventHandler(this.sceneObjects);\r\n\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.05, 0.05, 0.05, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects();\r\n\r\n        // Define event listeners for mouse events\r\n        //this.setUpEventListeners();\r\n    }\r\n\r\n    drawScene() {\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scene objects\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render();\r\n        });\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n\r\n        // Draw local coordinate axes UI\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.mainShader);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER) {\r\n            mesh.createCylinder(32,1);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name, this.mainShader);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        this.sceneObjects.push(obj);\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Set text font style\r\n            this.ctx.font = \"20px Consolas\";\r\n            this.ctx.fillStyle = 'white';\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n            // Clear previous\r\n            this.ctx.clearRect(0, 0, this.canvas.width, 30);\r\n            // Draw fps and frame time in milliseconds\r\n            this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 10, 25);\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n    }\r\n\r\n    loadDefaultSceneObjects() {\r\n        // Create a white sphere\r\n        this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Green Sphere',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [100.0, 100.0, 0.0],\r\n            color: [1.0, 1.0, 1.0]\r\n        });\r\n\r\n        // Create a cyan cube\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [0.0, 10.0, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n\r\n        // Create a green sphere\r\n        this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Green Sphere',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [40.0, 20.0, 20.0],\r\n            color: [0.0, 1.0, 0.0]\r\n        });\r\n\r\n        // Create a magenta cylinder\r\n        this.createGameObject({\r\n            shape: SHAPE.CYLINDER,\r\n            name: 'Magenta Cylinder',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [-40.0, 20.0, 20.0],\r\n            color: [1.0, 0.0, 1.0]\r\n        });\r\n\r\n        // Create gray floor\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Floor',\r\n            scale: [200.0, 1.0, 200.0],\r\n            position: [0.0, 0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n\r\n        // Create Walls\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 01',\r\n            scale: [1.0, 30.0, 200.0],\r\n            position: [-200.0, 30.0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 02',\r\n            scale: [1.0, 30.0, 200.0],\r\n            position: [200.0, 30.0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n        this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 03',\r\n            scale: [200.0, 30.0, 1.0],\r\n            position: [0.0, 30.0, -200, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
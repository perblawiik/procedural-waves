{"ast":null,"code":"import MouseEvent from \"./events/MouseEvent\";\n\nclass GameEditor {\n  constructor(gl, shaders, camera, canvas) {\n    this.gl = gl;\n    this.shaders = shaders;\n    this.camera = camera;\n    this.canvas = canvas;\n  }\n\n  processUserInput() {\n    // Handle camera navigation\n    this.processCameraNavigation(this.camera); // If left mouse button is pressed, cast a ray from the mouse cursor position\n\n    if (MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\n      // Create a ray from the camera\n      let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height); //// Test ray intersections ////\n\n      let objectFound = Raycast.findObjectIntersection(ray);\n\n      if (objectFound) {\n        if (this.selectedObject) this.selectedObject.setActive(false);\n        objectFound.setActive(true);\n        this.selectedObject = objectFound;\n      } // Create a raycast bullet for visualization purpose\n      // Offset the bullet start point\n      //const bulletOrigin = [ray.origin.x + ray.direction.x*2.0, ray.origin.y + ray.direction.y*2.0, ray.origin.z + ray.direction.z*2.0];\n      //this.raycastBullets.addBullet(bulletOrigin, ray.direction.clone());\n\n    }\n  }\n\n}\n\nexport default GameEditor;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\GameEditor.js"],"names":["MouseEvent","GameEditor","constructor","gl","shaders","camera","canvas","processUserInput","processCameraNavigation","mouseDown","isPressed","leftButton","ray","Raycast","raycastFromMouseCursor","offsetX","offsetY","transform","projectionMatrix","width","height","objectFound","findObjectIntersection","selectedObject","setActive"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,qBAAvB;;AAEA,MAAMC,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,EAAD,EAAKC,OAAL,EAAcC,MAAd,EAAsBC,MAAtB,EAA8B;AACrC,SAAKH,EAAL,GAAUA,EAAV;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AAEDC,EAAAA,gBAAgB,GAAG;AACf;AACA,SAAKC,uBAAL,CAA6B,KAAKH,MAAlC,EAFe,CAIf;;AACA,QAAGL,UAAU,CAACS,SAAX,IAAwBT,UAAU,CAACU,SAAX,CAAqBC,UAAhD,EAA4D;AACxD;AACA,UAAIC,GAAG,GAAGC,OAAO,CAACC,sBAAR,CAA+Bd,UAAU,CAACe,OAA1C,EAAmDf,UAAU,CAACgB,OAA9D,EAAuE,KAAKX,MAAL,CAAYY,SAAnF,EAA8F,KAAKC,gBAAnG,EAAqH,KAAKZ,MAAL,CAAYa,KAAjI,EAAwI,KAAKb,MAAL,CAAYc,MAApJ,CAAV,CAFwD,CAIxD;;AACA,UAAIC,WAAW,GAAGR,OAAO,CAACS,sBAAR,CAA+BV,GAA/B,CAAlB;;AACA,UAAIS,WAAJ,EAAiB;AACb,YAAI,KAAKE,cAAT,EACI,KAAKA,cAAL,CAAoBC,SAApB,CAA8B,KAA9B;AAEJH,QAAAA,WAAW,CAACG,SAAZ,CAAsB,IAAtB;AACA,aAAKD,cAAL,GAAsBF,WAAtB;AACH,OAZuD,CAaxD;AACA;AACA;AACA;;AACH;AACJ;;AA/BY;;AAmCjB,eAAepB,UAAf","sourcesContent":["import MouseEvent from \"./events/MouseEvent\";\r\n\r\nclass GameEditor {\r\n    constructor(gl, shaders, camera, canvas) {\r\n        this.gl = gl;\r\n        this.shaders = shaders;\r\n        this.camera = camera;\r\n        this.canvas = canvas;\r\n    }\r\n\r\n    processUserInput() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation(this.camera);\r\n\r\n        // If left mouse button is pressed, cast a ray from the mouse cursor position\r\n        if(MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\r\n            // Create a ray from the camera\r\n            let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height);\r\n\r\n            //// Test ray intersections ////\r\n            let objectFound = Raycast.findObjectIntersection(ray);\r\n            if (objectFound) {\r\n                if (this.selectedObject)\r\n                    this.selectedObject.setActive(false);\r\n\r\n                objectFound.setActive(true);\r\n                this.selectedObject = objectFound;\r\n            }\r\n            // Create a raycast bullet for visualization purpose\r\n            // Offset the bullet start point\r\n            //const bulletOrigin = [ray.origin.x + ray.direction.x*2.0, ray.origin.y + ray.direction.y*2.0, ray.origin.z + ray.direction.z*2.0];\r\n            //this.raycastBullets.addBullet(bulletOrigin, ray.direction.clone());\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default GameEditor;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Transform from \"./Transform\";\n\nclass Scene {\n  constructor(shaders) {\n    this.sceneObjects = [];\n    this.lightSources = [];\n    this.shaders = shaders;\n    this.transform = new Transform();\n    console.log(this.transform);\n  }\n\n  setPosition(position) {\n    this.transform.setPosition(position);\n    this.sceneObjects.forEach(gameObject => {\n      gameObject.translate(position);\n    });\n    this.lightSources.forEach(lightSource => {\n      lightSource.translate(position);\n    });\n  }\n\n  setRotation(rotation) {\n    this.transform.setRotation(rotation);\n    this.sceneObjects.forEach(gameObject => {\n      gameObject.rotate(rotation);\n    });\n    this.lightSources.forEach(lightSource => {\n      lightSource.rotate(rotation);\n    });\n  }\n\n  addGameObject(gameObject) {\n    gameObject.translate(this.transform.position);\n    this.sceneObjects.push(gameObject);\n  }\n\n  addLightSource(lightSource) {\n    lightSource.translate(this.transform.position); // Activate the main shader\n\n    let shader = this.shaders.get(\"phong\");\n    shader.activate();\n    let lightCount = this.lightSources.length;\n    let arrayName = \"pointLights[\" + lightCount + \"].\"; // Get uniform locations\n\n    let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\n    let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\n    let attenuationUniformLoc = shader.getUniformLoc(arrayName + \"attenuationConstants\");\n    let lightCountUniformLoc = shader.getUniformLoc(\"lightCount\"); // Set the uniforms in the fragment shader\n\n    shader.setUniformVec3f(positionUniformLoc, lightSource.position);\n    shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor); //shader.setUniformFloat(strengthUniformLoc, lightSource.lightStrength);\n\n    shader.setUniformVec2f(attenuationUniformLoc, [lightSource.attenuationConstants.kLinear, lightSource.attenuationConstants.kQuadratic]);\n    shader.setUniformInt(lightCountUniformLoc, lightCount); // Add light source to the list\n\n    this.lightSources.push(lightSource);\n  }\n\n  draw() {\n    this.sceneObjects.forEach(object => {\n      object.render(this.shaders.get(\"phong\"));\n    });\n    this.lightSources.forEach(lightSource => {\n      //let currentPos = lightSource.transform.position;\n      //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\n      //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\n      lightSource.render(this.shaders.get(\"ambient\"));\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Scene.js"],"names":["Transform","Scene","constructor","shaders","sceneObjects","lightSources","transform","console","log","setPosition","position","forEach","gameObject","translate","lightSource","setRotation","rotation","rotate","addGameObject","push","addLightSource","shader","get","activate","lightCount","length","arrayName","positionUniformLoc","getUniformLoc","colorUniformLoc","attenuationUniformLoc","lightCountUniformLoc","setUniformVec3f","lightColor","setUniformVec2f","attenuationConstants","kLinear","kQuadratic","setUniformInt","draw","object","render"],"mappings":"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","sourcesContent":["import Transform from \"./Transform\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n\r\n        this.transform = new Transform();\r\n        console.log(this.transform);\r\n    }\r\n\r\n    setPosition(position) {\r\n        this.transform.setPosition(position);\r\n\r\n        this.sceneObjects.forEach((gameObject) => {\r\n            gameObject.translate(position);\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            lightSource.translate(position);\r\n        });\r\n    }\r\n\r\n    setRotation(rotation) {\r\n        this.transform.setRotation(rotation);\r\n\r\n        this.sceneObjects.forEach((gameObject) => {\r\n            gameObject.rotate(rotation);\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            lightSource.rotate(rotation);\r\n        });\r\n    };\r\n\r\n    addGameObject(gameObject) {\r\n        gameObject.translate(this.transform.position);\r\n        this.sceneObjects.push(gameObject);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        lightSource.translate(this.transform.position);\r\n\r\n        // Activate the main shader\r\n        let shader = this.shaders.get(\"phong\");\r\n        shader.activate();\r\n\r\n        let lightCount = this.lightSources.length;\r\n        let arrayName = \"pointLights[\" + lightCount + \"].\";\r\n\r\n        // Get uniform locations\r\n        let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\r\n        let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\r\n        let attenuationUniformLoc = shader.getUniformLoc(arrayName + \"attenuationConstants\");\r\n        let lightCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n\r\n        // Set the uniforms in the fragment shader\r\n        shader.setUniformVec3f(positionUniformLoc, lightSource.position);\r\n        shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\r\n        //shader.setUniformFloat(strengthUniformLoc, lightSource.lightStrength);\r\n        shader.setUniformVec2f(attenuationUniformLoc, [lightSource.attenuationConstants.kLinear, lightSource.attenuationConstants.kQuadratic]);\r\n        shader.setUniformInt(lightCountUniformLoc, lightCount);\r\n\r\n        // Add light source to the list\r\n        this.lightSources.push(lightSource);\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(\"phong\"));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            //let currentPos = lightSource.transform.position;\r\n            //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\r\n            //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}
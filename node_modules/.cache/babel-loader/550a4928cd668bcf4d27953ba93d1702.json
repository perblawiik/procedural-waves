{"ast":null,"code":"import SphereCollider from \"./SphereCollider\";\nimport Vector3 from \"./math/Vector3\";\nimport Raycast from \"./Raycast\";\nimport CollisionManager from \"./CollisionManager\";\n\nclass RigidBody {\n  constructor(position, mass = 1.0) {\n    this.id = -1;\n    this.position = new Vector3(position);\n    this.velocity = new Vector3([0.0, 0.0, 0.0]);\n    this.acceleration = new Vector3([0.0, 0.0, 0.0]);\n    /*\r\n    this.rotationAxis = new Vector3([0.0, 0.0, 0.0]);\r\n    this.rotationSpeed = 0.0;\r\n    this.rotationAngle = 0.0;\r\n       */\n\n    this.collider = new SphereCollider();\n    this.mass = mass;\n    this.enableGravity(true);\n  }\n\n  setVelocity(vel) {\n    this.velocity.set(vel);\n  }\n\n  setAcceleration(acc) {\n    this.acceleration.set(acc);\n  }\n\n  setPosition(pos) {\n    this.position.set(pos);\n  }\n\n  enableGravity(state) {\n    if (state) this.gravity = 9.82;else this.gravity = 0.0;\n  }\n\n  update(timeStep) {\n    this.updateMotion(timeStep);\n    this.handlePlaneCollisions(timeStep);\n    this.scanForBodyCollisions(timeStep);\n  }\n\n  updateMotion(timeStep) {\n    this.velocity.set([this.velocity.x + this.acceleration.x * timeStep, this.velocity.y + (this.acceleration.y - this.gravity) * timeStep, this.velocity.z + this.acceleration.z * timeStep]);\n    this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]); //this.rotationAngle += this.rotationSpeed * timeStep;\n  }\n\n  handlePlaneCollisions(timeStep) {\n    let planes = CollisionManager.getPlaneColliders();\n    let rayDir = this.velocity.normalized();\n    let rayOrigin = this.position.clone(); // Find closest intersectionPoint\n\n    planes.forEach(plane => {\n      // If the plane intersection test returns null, no plane was found\n      let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\n\n      if (intersectionPoint !== null) {\n        // Calculate the closest distance from the rigid body collider and the plane\n        let distanceToPlane = Vector3.dot(plane.normal, Vector3.subtract(rayOrigin, intersectionPoint)); // Check if the sphere is intersecting the plane\n\n        if (distanceToPlane < this.collider.radius) {\n          // Move the object to the plane surface\n          let diff = this.collider.radius - distanceToPlane;\n          this.position.set([this.position.x + plane.normal.x * diff, this.position.y + plane.normal.y * diff, this.position.z + plane.normal.z * diff]); // Calculate the reflected velocity\n\n          let bounce = this.velocity.magnitude * 0.9;\n          let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir).inverted();\n          let velocityPlaneProjection = Vector3.crossProduct(plane.normal, Vector3.crossProduct(reflectDirection, plane.normal));\n          console.log(velocityPlaneProjection); // Apply new velocity and position\n\n          this.velocity.set([velocityPlaneProjection.x * bounce, velocityPlaneProjection.y * bounce, velocityPlaneProjection.z * bounce]);\n          this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]);\n          /*\r\n          let velocityPlaneProjection = Vector3.crossProduct(plane.normal,Vector3.crossProduct(reflectDirection, plane.normal));\r\n          if (velocityPlaneProjection.magnitude > 0.1) {\r\n              let rotAxis = Vector3.crossProduct(velocityPlaneProjection, plane.normal);\r\n              this.rotationAxis.set([rotAxis.x, rotAxis.y, rotAxis.z]);\r\n              this.rotationSpeed = bounce * 5.0 / this.collider.radius;\r\n          }\r\n          else {\r\n              this.rotationSpeed = 0.0;\r\n          }\r\n          */\n        }\n      }\n    });\n  }\n\n  scanForBodyCollisions(timeStep) {\n    // If the rigid body is not moving, don't check for target collisions\n    if (this.velocity.magnitude < 0.1) {\n      return;\n    } //TODO: Optimize collision scanning (if two bodies have collided, we dont need to check collision again in this update\n    // Example: Sum ids of two bodies on collision. We can then simply check if this.id + target.id == markedCollision.\n\n\n    let rigidBodies = CollisionManager.getRigidBodies();\n    rigidBodies.forEach(target => {\n      // Don't check for collision with self\n      if (this.id !== target.id) {\n        // Compute the distance between the two sphere colliders\n        let targetDistance = Vector3.distance(target.position, this.position); // If the distance is within this collider radius and target collider radius, we have a collision\n\n        if (targetDistance < target.collider.radius + this.collider.radius) {\n          this.handleBodyCollision(timeStep, target, targetDistance);\n        }\n      }\n    });\n  }\n\n  handleBodyCollision(timeStep, target, targetDistance) {\n    // Get velocity directions\n    let thisVelocityDirection = this.velocity.normalized();\n    let targetVelocityDirection = target.velocity.normalized(); // Move the body outside of collision area\n\n    let diff = this.collider.radius + target.collider.radius - targetDistance;\n    this.position.set([this.position.x - thisVelocityDirection.x * diff, this.position.y - thisVelocityDirection.y * diff, this.position.z - thisVelocityDirection.z * diff]); // Compute new velocity directions (given by the normal of the collision point's tangent plane)\n\n    let thisTangentNormal = Vector3.subtract(target.position, this.position).normalized();\n    let targetTangentNormal = thisTangentNormal.inverted(); // Compute a multiplier based on the angle between the before and after velocities.\n    // Wider angles results in lesser impact (lower multipliers)\n\n    let thisMultiplier = Math.abs(Vector3.dot(thisVelocityDirection, thisTangentNormal));\n    let targetMultiplier = Math.abs(Vector3.dot(targetVelocityDirection, targetTangentNormal)); // Compute the speeds before collision\n\n    let thisSpeedBefore = this.velocity.magnitude * 0.9;\n    let targetSpeedBefore = target.velocity.magnitude * 0.9; // Compute elastic Collision Coefficients\n\n    let A = Math.abs(thisMultiplier * this.mass - target.mass) / (thisMultiplier * this.mass + target.mass);\n    let B = 2.0 * target.mass / (this.mass + target.mass); // Set new velocity and position\n\n    this.velocity.set([(targetTangentNormal.x * (1.0 - thisMultiplier) + thisVelocityDirection.x * thisMultiplier) * thisSpeedBefore * A + targetTangentNormal.x * targetSpeedBefore * B, (targetTangentNormal.y * (1.0 - thisMultiplier) + thisVelocityDirection.y * thisMultiplier) * thisSpeedBefore * A + targetTangentNormal.y * targetSpeedBefore * B, (targetTangentNormal.z * (1.0 - thisMultiplier) + thisVelocityDirection.z * thisMultiplier) * thisSpeedBefore * A + targetTangentNormal.z * targetSpeedBefore * B]);\n    this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]); // Compute elastic Collision Coefficients\n\n    A = 2.0 * this.mass / (this.mass + target.mass);\n    B = Math.abs(targetMultiplier * target.mass - this.mass) / (this.mass + targetMultiplier * target.mass); // Set new velocity for the target\n\n    target.velocity.set([thisTangentNormal.x * thisSpeedBefore * A + (thisTangentNormal.x * (1.0 - targetMultiplier) + targetVelocityDirection.x * targetMultiplier) * targetSpeedBefore * B, thisTangentNormal.y * thisSpeedBefore * A + (thisTangentNormal.y * (1.0 - targetMultiplier) + targetVelocityDirection.y * targetMultiplier) * targetSpeedBefore * B, thisTangentNormal.z * thisSpeedBefore * A + (thisTangentNormal.z * (1.0 - targetMultiplier) + targetVelocityDirection.z * targetMultiplier) * targetSpeedBefore * B]);\n  }\n\n}\n\nexport default RigidBody;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\RigidBody.js"],"names":["SphereCollider","Vector3","Raycast","CollisionManager","RigidBody","constructor","position","mass","id","velocity","acceleration","collider","enableGravity","setVelocity","vel","set","setAcceleration","acc","setPosition","pos","state","gravity","update","timeStep","updateMotion","handlePlaneCollisions","scanForBodyCollisions","x","y","z","planes","getPlaneColliders","rayDir","normalized","rayOrigin","clone","forEach","plane","intersectionPoint","planeIntersectionTest","distanceToPlane","dot","normal","subtract","radius","diff","bounce","magnitude","reflectDirection","multipleBy","inverted","velocityPlaneProjection","crossProduct","console","log","rigidBodies","getRigidBodies","target","targetDistance","distance","handleBodyCollision","thisVelocityDirection","targetVelocityDirection","thisTangentNormal","targetTangentNormal","thisMultiplier","Math","abs","targetMultiplier","thisSpeedBefore","targetSpeedBefore","A","B"],"mappings":"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","sourcesContent":["import SphereCollider from \"./SphereCollider\";\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Raycast from \"./Raycast\";\r\nimport CollisionManager from \"./CollisionManager\";\r\n\r\nclass RigidBody {\r\n    constructor(position, mass = 1.0) {\r\n        this.id = -1;\r\n        this.position = new Vector3(position);\r\n        this.velocity = new Vector3([0.0, 0.0, 0.0]);\r\n        this.acceleration = new Vector3([0.0, 0.0, 0.0]);\r\n\r\n        /*\r\n        this.rotationAxis = new Vector3([0.0, 0.0, 0.0]);\r\n        this.rotationSpeed = 0.0;\r\n        this.rotationAngle = 0.0;\r\n           */\r\n\r\n        this.collider = new SphereCollider();\r\n\r\n        this.mass = mass;\r\n        this.enableGravity(true);\r\n    }\r\n\r\n    setVelocity(vel) {\r\n        this.velocity.set(vel);\r\n    }\r\n\r\n    setAcceleration(acc) {\r\n        this.acceleration.set(acc);\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.position.set(pos);\r\n    }\r\n\r\n    enableGravity(state) {\r\n        if (state)\r\n            this.gravity = 9.82;\r\n        else\r\n            this.gravity = 0.0;\r\n    }\r\n\r\n    update(timeStep) {\r\n        this.updateMotion(timeStep);\r\n        this.handlePlaneCollisions(timeStep);\r\n        this.scanForBodyCollisions(timeStep);\r\n    }\r\n\r\n    updateMotion(timeStep) {\r\n        this.velocity.set([\r\n            this.velocity.x + this.acceleration.x * timeStep,\r\n            this.velocity.y + (this.acceleration.y - this.gravity) * timeStep,\r\n            this.velocity.z + this.acceleration.z * timeStep,\r\n        ]);\r\n        this.position.set([\r\n            this.position.x + this.velocity.x * timeStep,\r\n            this.position.y + this.velocity.y * timeStep,\r\n            this.position.z + this.velocity.z * timeStep,\r\n        ]);\r\n\r\n        //this.rotationAngle += this.rotationSpeed * timeStep;\r\n    }\r\n\r\n    handlePlaneCollisions(timeStep) {\r\n        let planes = CollisionManager.getPlaneColliders();\r\n\r\n        let rayDir = this.velocity.normalized();\r\n        let rayOrigin = this.position.clone();\r\n\r\n        // Find closest intersectionPoint\r\n        planes.forEach((plane) => {\r\n            // If the plane intersection test returns null, no plane was found\r\n            let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\r\n            if (intersectionPoint !== null) {\r\n                // Calculate the closest distance from the rigid body collider and the plane\r\n                let distanceToPlane = Vector3.dot(plane.normal, Vector3.subtract(rayOrigin, intersectionPoint));\r\n\r\n                // Check if the sphere is intersecting the plane\r\n                if (distanceToPlane < this.collider.radius) {\r\n                    // Move the object to the plane surface\r\n                    let diff = (this.collider.radius - distanceToPlane);\r\n                    this.position.set([\r\n                        this.position.x + plane.normal.x * diff,\r\n                        this.position.y + plane.normal.y * diff,\r\n                        this.position.z + plane.normal.z * diff\r\n                    ]);\r\n\r\n                    // Calculate the reflected velocity\r\n                    let bounce = this.velocity.magnitude*0.9;\r\n                    let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir).inverted();\r\n                    let velocityPlaneProjection = Vector3.crossProduct(plane.normal,Vector3.crossProduct(reflectDirection, plane.normal));\r\n                    console.log(velocityPlaneProjection);\r\n\r\n                    // Apply new velocity and position\r\n                    this.velocity.set([\r\n                        velocityPlaneProjection.x*bounce,\r\n                        velocityPlaneProjection.y*bounce,\r\n                        velocityPlaneProjection.z*bounce\r\n                    ]);\r\n                    this.position.set([\r\n                        this.position.x + this.velocity.x * timeStep,\r\n                        this.position.y + this.velocity.y * timeStep,\r\n                        this.position.z + this.velocity.z * timeStep,\r\n                    ]);\r\n\r\n                    /*\r\n                    let velocityPlaneProjection = Vector3.crossProduct(plane.normal,Vector3.crossProduct(reflectDirection, plane.normal));\r\n                    if (velocityPlaneProjection.magnitude > 0.1) {\r\n                        let rotAxis = Vector3.crossProduct(velocityPlaneProjection, plane.normal);\r\n                        this.rotationAxis.set([rotAxis.x, rotAxis.y, rotAxis.z]);\r\n                        this.rotationSpeed = bounce * 5.0 / this.collider.radius;\r\n                    }\r\n                    else {\r\n                        this.rotationSpeed = 0.0;\r\n                    }\r\n                    */\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    scanForBodyCollisions(timeStep) {\r\n        // If the rigid body is not moving, don't check for target collisions\r\n        if (this.velocity.magnitude < 0.1) {\r\n            return;\r\n        }\r\n\r\n        //TODO: Optimize collision scanning (if two bodies have collided, we dont need to check collision again in this update\r\n        // Example: Sum ids of two bodies on collision. We can then simply check if this.id + target.id == markedCollision.\r\n\r\n        let rigidBodies = CollisionManager.getRigidBodies();\r\n        rigidBodies.forEach((target) => {\r\n            // Don't check for collision with self\r\n            if (this.id !== target.id){\r\n                // Compute the distance between the two sphere colliders\r\n                let targetDistance = Vector3.distance(target.position, this.position);\r\n                // If the distance is within this collider radius and target collider radius, we have a collision\r\n                if (targetDistance < (target.collider.radius + this.collider.radius)) {\r\n                    this.handleBodyCollision(timeStep, target, targetDistance);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleBodyCollision(timeStep, target, targetDistance) {\r\n        // Get velocity directions\r\n        let thisVelocityDirection = this.velocity.normalized();\r\n        let targetVelocityDirection = target.velocity.normalized();\r\n\r\n        // Move the body outside of collision area\r\n        let diff = (this.collider.radius + target.collider.radius) - targetDistance;\r\n        this.position.set([\r\n            this.position.x - thisVelocityDirection.x * diff,\r\n            this.position.y - thisVelocityDirection.y * diff,\r\n            this.position.z - thisVelocityDirection.z * diff\r\n        ]);\r\n\r\n        // Compute new velocity directions (given by the normal of the collision point's tangent plane)\r\n        let thisTangentNormal = Vector3.subtract(target.position, this.position).normalized();\r\n        let targetTangentNormal = thisTangentNormal.inverted();\r\n\r\n        // Compute a multiplier based on the angle between the before and after velocities.\r\n        // Wider angles results in lesser impact (lower multipliers)\r\n        let thisMultiplier = Math.abs(Vector3.dot(thisVelocityDirection, thisTangentNormal));\r\n        let targetMultiplier = Math.abs(Vector3.dot(targetVelocityDirection, targetTangentNormal));\r\n\r\n        // Compute the speeds before collision\r\n        let thisSpeedBefore = this.velocity.magnitude * 0.9;\r\n        let targetSpeedBefore = target.velocity.magnitude * 0.9;\r\n\r\n        // Compute elastic Collision Coefficients\r\n        let A = (Math.abs(thisMultiplier * this.mass - target.mass)) / (thisMultiplier * this.mass + target.mass);\r\n        let B = (2.0 * target.mass) / (this.mass + target.mass);\r\n\r\n        // Set new velocity and position\r\n        this.velocity.set([\r\n            ((targetTangentNormal.x * (1.0 - thisMultiplier) + thisVelocityDirection.x * thisMultiplier) * thisSpeedBefore * A) + (targetTangentNormal.x * targetSpeedBefore * B),\r\n            ((targetTangentNormal.y * (1.0 - thisMultiplier) + thisVelocityDirection.y * thisMultiplier) * thisSpeedBefore * A) + (targetTangentNormal.y * targetSpeedBefore * B),\r\n            ((targetTangentNormal.z * (1.0 - thisMultiplier) + thisVelocityDirection.z * thisMultiplier) * thisSpeedBefore * A) + (targetTangentNormal.z * targetSpeedBefore * B)\r\n        ]);\r\n        this.position.set([\r\n            this.position.x + this.velocity.x * timeStep,\r\n            this.position.y + this.velocity.y * timeStep,\r\n            this.position.z + this.velocity.z * timeStep,\r\n        ]);\r\n\r\n        // Compute elastic Collision Coefficients\r\n        A = (2.0 * this.mass) / (this.mass + target.mass);\r\n        B = (Math.abs(targetMultiplier * target.mass - this.mass)) / (this.mass + targetMultiplier * target.mass);\r\n\r\n        // Set new velocity for the target\r\n        target.velocity.set([\r\n            (thisTangentNormal.x * thisSpeedBefore * A) + ((thisTangentNormal.x * (1.0 - targetMultiplier) + targetVelocityDirection.x * targetMultiplier) * targetSpeedBefore * B),\r\n            (thisTangentNormal.y * thisSpeedBefore * A) + ((thisTangentNormal.y * (1.0 - targetMultiplier) + targetVelocityDirection.y * targetMultiplier) * targetSpeedBefore * B),\r\n            (thisTangentNormal.z * thisSpeedBefore * A) + ((thisTangentNormal.z * (1.0 - targetMultiplier) + targetVelocityDirection.z * targetMultiplier) * targetSpeedBefore * B)\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default RigidBody;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\nimport Time from \"./Time\";\nimport MouseEvent from \"./events/MouseEvent\";\n\nclass GameEditor {\n  constructor(gl, context2D, shaders, camera, canvas) {\n    this.gl = gl;\n    this.context2D = context2D;\n    this.canvas = canvas;\n    this.camera = camera; // Initialize timing variables\n\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0;\n  }\n\n  render(scenes) {\n    this.drawTextElements();\n  }\n\n  processUserInput() {\n    // Handle camera navigation\n    this.processCameraNavigation();\n  }\n\n  processCameraNavigation() {\n    // Zoom camera view in and out\n    if (MouseEvent.isPressed.middleButton) {\n      this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX) / 20.0]);\n    } // Pan the camera view\n    else if (MouseEvent.isPressed.leftButton) {\n        this.camera.translate([-MouseEvent.movementX / 40.0, MouseEvent.movementY / 40.0, 0.0]);\n      } // Rotate the camera view\n      else if (MouseEvent.isPressed.rightButton) {\n          this.camera.rotate([-MouseEvent.movementY / 10.0, -MouseEvent.movementX / 10.0, 0.0]);\n        }\n\n    if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\n      if (MouseEvent.wheelDelta > 0.0) {\n        this.camera.translate([0.0, 0.0, 2.0]);\n      } else {\n        this.camera.translate([0.0, 0.0, -2.0]);\n      }\n    }\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.context2D.font = \"20px Consolas\";\n    this.context2D.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.context2D.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\"; // Draw fps and frame time in milliseconds\n\n    this.context2D.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 10;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.context2D.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n}\n\nexport default GameEditor;","map":{"version":3,"sources":["G:/DOKUMENT/Projekt/React/Waves/procedural-waves/src/js/bluebox/GameEditor.js"],"names":["Time","MouseEvent","GameEditor","constructor","gl","context2D","shaders","camera","canvas","lastTime","frameCount","fps","currentTextOffset","render","scenes","drawTextElements","processUserInput","processCameraNavigation","isPressed","middleButton","translate","movementY","movementX","leftButton","rightButton","rotate","Math","abs","wheelDelta","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","deltaTime","toFixed","fillText","length","pos","transform","position","cameraPositionText","x","y","z"],"mappings":"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","sourcesContent":["/**\r\n * Author: Per Blåwiik\r\n * Date: 2019-12-29\r\n */\r\n\r\nimport Time from \"./Time\";\r\nimport MouseEvent from \"./events/MouseEvent\";\r\n\r\nclass GameEditor {\r\n    constructor(gl, context2D, shaders, camera, canvas) {\r\n        this.gl = gl;\r\n        this.context2D = context2D;\r\n        this.canvas = canvas;\r\n        this.camera = camera;\r\n\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n    }\r\n\r\n    render(scenes) {\r\n        this.drawTextElements();\r\n    }\r\n\r\n    processUserInput() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation();\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 2.0]);\r\n            }\r\n            else {\r\n                this.camera.translate([0.0, 0.0, -2.0]);\r\n            }\r\n        }\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.context2D.font = \"20px Consolas\";\r\n        this.context2D.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.context2D.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.context2D.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 10;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.context2D.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n}\r\n\r\nexport default GameEditor;"]},"metadata":{},"sourceType":"module"}
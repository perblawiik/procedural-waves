{"ast":null,"code":"// Enum struct for handling mouse events\nconst MouseKey = {\n  LEFT: 1,\n  MIDDLE: 2,\n  RIGHT: 3\n};\n\nclass EventHandler {\n  constructor(sceneObjects) {\n    this.mouseEvent = {\n      movementX: 0,\n      movementY: 0,\n      deltaX: 0,\n      deltaY: 0,\n      isPressed: {\n        leftButton: false,\n        rightButton: false,\n        middleButton: false\n      },\n      wheelDelta: 0\n    };\n    let me = this.mouseEvent;\n    /*\r\n    this.mouseInputReader = {\r\n        leftClickIsActive: false,\r\n        rightClickIsActive: false,\r\n        moveX: 0,\r\n        moveY: 0,\r\n        altKey: false,\r\n        ctrlKey: false,\r\n        shiftKey: false,\r\n        selectedGameObjectIndex: 0,\r\n        selectedGameObjectAxis: null,\r\n        moveGameObjectX: 0,\r\n        moveGameObjectY: 0,\r\n        wheelDelta: 0\r\n    };\r\n    let mouseInput = this.mouseInputReader;\r\n    */\n\n    let canvas2D = document.getElementById('text-canvas'); // Mouse down event function definition\n\n    canvas2D.onmousedown = function (event) {\n      if (event.which === MouseKey.LEFT) {\n        me.isPressed.leftButton = true;\n      }\n\n      if (event.which === MouseKey.RIGHT) {\n        me.isPressed.rightButton = true;\n      }\n\n      if (event.which === MouseKey.MIDDLE) {\n        me.isPressed.middleButton = true;\n      }\n      /*\r\n      switch(event.which) {\r\n          case MouseKey.LEFT:\r\n              mouseInput.leftClickIsActive = true;\r\n              mouseInput.altKey = event.altKey;\r\n              mouseInput.ctrlKey = event.ctrlKey;\r\n              mouseInput.shiftKey = event.shiftKey;\r\n                // Extend the click box borders\r\n              let offset = 4;\r\n                for (let i = 0; i < sceneObjects.length; ++i) {\r\n                  // Check if the coordinate system is visible\r\n                  if (sceneObjects[i].localCoordinateSystemUI.isVisible) {\r\n                      // Check if mouse is in the click box area\r\n                      if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMax+offset &&\r\n                          event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMin-offset &&\r\n                          event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMax+offset &&\r\n                          event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMin-offset) {\r\n                            mouseInput.selectedGameObjectAxis = 'x';\r\n                      }\r\n                      else if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                          event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMin-offset &&\r\n                          event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMax+offset &&\r\n                          event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMin-offset) {\r\n                            mouseInput.selectedGameObjectAxis = 'y';\r\n                      }\r\n                      else if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                          event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.xMin-offset &&\r\n                          event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMax+offset &&\r\n                          event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMin-offset) {\r\n                            mouseInput.selectedGameObjectAxis = 'z';\r\n                      }\r\n                        mouseInput.selectedGameObjectIndex = i;\r\n                  }\r\n              }\r\n              break;\r\n          case MouseKey.RIGHT:\r\n              mouseInput.rightClickIsActive = true;\r\n              break;\r\n          default:\r\n              break;\r\n      }\r\n      */\n\n    }; // Mouse up event function definition\n\n\n    canvas2D.onmouseup = function (event) {\n      if (event.which === MouseKey.LEFT) {\n        me.isPressed.leftButton = false;\n      }\n\n      if (event.which === MouseKey.RIGHT) {\n        me.isPressed.rightButton = false;\n      }\n\n      if (event.which === MouseKey.MIDDLE) {\n        me.isPressed.middleButton = false;\n      }\n      /*\r\n      switch(event.which) {\r\n          case MouseKey.LEFT:\r\n              mouseInput.leftClickIsActive = false;\r\n              mouseInput.selectedGameObjectAxis = null;\r\n              break;\r\n          case MouseKey.RIGHT:\r\n              mouseInput.rightClickIsActive = false;\r\n              break;\r\n          default:\r\n              break;\r\n      }\r\n      */\n\n    }; // Mouse leave event function definition\n\n\n    canvas2D.onmouseleave = function (event) {\n      if (me.isPressed.leftButton) {\n        me.isPressed.leftButton = false;\n      }\n\n      if (me.isPressed.rightButton) {\n        me.isPressed.rightButton = false;\n      }\n\n      if (me.isPressed.middleButton) {\n        me.isPressed.middleButton = false;\n      }\n      /*\r\n      if (mouseInput.leftClickIsActive) {\r\n          mouseInput.leftClickIsActive = false;\r\n      }\r\n      else if (mouseInput.rightClickIsActive) {\r\n          mouseInput.rightClickIsActive = false;\r\n      }\r\n      */\n\n    }; // Mouse move event function definition\n\n\n    canvas2D.onmousemove = function (event) {\n      me.movementX = event.movementX;\n      me.movementY = event.movementY;\n      /*\r\n      if (mouseInput.leftClickIsActive || mouseInput.rightClickIsActive) {\r\n          mouseInput.moveX = event.movementX;\r\n          mouseInput.moveY = event.movementY;\r\n          mouseInput.moveGameObjectX = event.movementX;\r\n          mouseInput.moveGameObjectY = event.movementY;\r\n      }\r\n      */\n    }; // Mouse wheel event function definition\n\n\n    canvas2D.onwheel = function (event) {\n      me.wheelDelta = event.deltaY; //mouseInput.wheelDelta = event.deltaY;\n    };\n  }\n\n  processCameraNavigation(camera) {\n    // Zoom camera view in and out\n    if (this.mouseEvent.isPressed.middleButton) {\n      camera.translate([0.0, 0.0, -(this.mouseEvent.movementY + this.mouseEvent.movementX) / 4]);\n      this.mouseEvent.movementX = 0;\n      this.mouseEvent.movementY = 0;\n    } // Pan the camera view\n    else if (this.mouseEvent.isPressed.leftButton) {\n        camera.translate([-this.mouseEvent.movementX / 4, this.mouseEvent.movementY / 4, 0.0]);\n        this.mouseEvent.movementX = 0;\n        this.mouseEvent.movementY = 0;\n      } // Rotate the camera view\n      else if (this.mouseEvent.isPressed.rightButton) {\n          camera.rotate([-this.mouseEvent.movementY / 8, -this.mouseEvent.movementX / 8, 0.0]);\n          this.mouseEvent.movementX = 0;\n          this.mouseEvent.movementY = 0;\n        }\n\n    if (Math.abs(this.mouseEvent.wheelDelta) > 0.01) {\n      if (this.mouseEvent.wheelDelta > 0.0) {\n        camera.translate([0.0, 0.0, 4.0]);\n      } else camera.translate([0.0, 0.0, -4.0]);\n\n      this.mouseEvent.wheelDelta = 0;\n    }\n  }\n\n}\n\nexport default EventHandler;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\EventHandler.js"],"names":["MouseKey","LEFT","MIDDLE","RIGHT","EventHandler","constructor","sceneObjects","mouseEvent","movementX","movementY","deltaX","deltaY","isPressed","leftButton","rightButton","middleButton","wheelDelta","me","canvas2D","document","getElementById","onmousedown","event","which","onmouseup","onmouseleave","onmousemove","onwheel","processCameraNavigation","camera","translate","rotate","Math","abs"],"mappings":"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","sourcesContent":["// Enum struct for handling mouse events\r\nconst MouseKey = {\r\n    LEFT: 1,\r\n    MIDDLE: 2,\r\n    RIGHT: 3\r\n};\r\n\r\nclass EventHandler {\r\n    constructor(sceneObjects) {\r\n\r\n        this.mouseEvent = {\r\n            movementX: 0,\r\n            movementY: 0,\r\n            deltaX: 0,\r\n            deltaY: 0,\r\n            isPressed: {\r\n                leftButton: false,\r\n                rightButton: false,\r\n                middleButton: false\r\n            },\r\n            wheelDelta: 0\r\n        };\r\n\r\n        let me = this.mouseEvent;\r\n\r\n        /*\r\n        this.mouseInputReader = {\r\n            leftClickIsActive: false,\r\n            rightClickIsActive: false,\r\n            moveX: 0,\r\n            moveY: 0,\r\n            altKey: false,\r\n            ctrlKey: false,\r\n            shiftKey: false,\r\n            selectedGameObjectIndex: 0,\r\n            selectedGameObjectAxis: null,\r\n            moveGameObjectX: 0,\r\n            moveGameObjectY: 0,\r\n            wheelDelta: 0\r\n        };\r\n        let mouseInput = this.mouseInputReader;\r\n        */\r\n\r\n        let canvas2D = document.getElementById('text-canvas');\r\n\r\n        // Mouse down event function definition\r\n        canvas2D.onmousedown = function(event) {\r\n            if(event.which === MouseKey.LEFT) {\r\n                me.isPressed.leftButton = true;\r\n            }\r\n            if (event.which === MouseKey.RIGHT) {\r\n                me.isPressed.rightButton = true;\r\n            }\r\n            if (event.which === MouseKey.MIDDLE) {\r\n                me.isPressed.middleButton = true;\r\n            }\r\n\r\n            /*\r\n            switch(event.which) {\r\n                case MouseKey.LEFT:\r\n                    mouseInput.leftClickIsActive = true;\r\n                    mouseInput.altKey = event.altKey;\r\n                    mouseInput.ctrlKey = event.ctrlKey;\r\n                    mouseInput.shiftKey = event.shiftKey;\r\n\r\n                    // Extend the click box borders\r\n                    let offset = 4;\r\n\r\n                    for (let i = 0; i < sceneObjects.length; ++i) {\r\n                        // Check if the coordinate system is visible\r\n                        if (sceneObjects[i].localCoordinateSystemUI.isVisible) {\r\n                            // Check if mouse is in the click box area\r\n                            if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMax+offset &&\r\n                                event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.xMin-offset &&\r\n                                event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMax+offset &&\r\n                                event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisX.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'x';\r\n                            }\r\n                            else if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                                event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMin-offset &&\r\n                                event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMax+offset &&\r\n                                event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'y';\r\n                            }\r\n                            else if (event.offsetX <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisY.borders.xMax+offset &&\r\n                                event.offsetX >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.xMin-offset &&\r\n                                event.offsetY <= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMax+offset &&\r\n                                event.offsetY >= sceneObjects[i].localCoordinateSystemUI.clickBoxAxisZ.borders.yMin-offset) {\r\n\r\n                                mouseInput.selectedGameObjectAxis = 'z';\r\n                            }\r\n\r\n                            mouseInput.selectedGameObjectIndex = i;\r\n                        }\r\n                    }\r\n                    break;\r\n                case MouseKey.RIGHT:\r\n                    mouseInput.rightClickIsActive = true;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            */\r\n        };\r\n\r\n        // Mouse up event function definition\r\n        canvas2D.onmouseup = function(event) {\r\n            if(event.which === MouseKey.LEFT) {\r\n                me.isPressed.leftButton = false;\r\n            }\r\n            if (event.which === MouseKey.RIGHT) {\r\n                me.isPressed.rightButton = false;\r\n            }\r\n            if (event.which === MouseKey.MIDDLE) {\r\n                me.isPressed.middleButton = false;\r\n            }\r\n\r\n            /*\r\n            switch(event.which) {\r\n                case MouseKey.LEFT:\r\n                    mouseInput.leftClickIsActive = false;\r\n                    mouseInput.selectedGameObjectAxis = null;\r\n                    break;\r\n                case MouseKey.RIGHT:\r\n                    mouseInput.rightClickIsActive = false;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            */\r\n        };\r\n\r\n        // Mouse leave event function definition\r\n        canvas2D.onmouseleave = function(event) {\r\n            if(me.isPressed.leftButton) {\r\n                me.isPressed.leftButton = false;\r\n            }\r\n            if (me.isPressed.rightButton) {\r\n                me.isPressed.rightButton = false;\r\n            }\r\n            if (me.isPressed.middleButton) {\r\n                me.isPressed.middleButton = false;\r\n            }\r\n\r\n            /*\r\n            if (mouseInput.leftClickIsActive) {\r\n                mouseInput.leftClickIsActive = false;\r\n            }\r\n            else if (mouseInput.rightClickIsActive) {\r\n                mouseInput.rightClickIsActive = false;\r\n            }\r\n            */\r\n        };\r\n\r\n        // Mouse move event function definition\r\n        canvas2D.onmousemove  = function(event) {\r\n            me.movementX = event.movementX;\r\n            me.movementY = event.movementY;\r\n\r\n            /*\r\n            if (mouseInput.leftClickIsActive || mouseInput.rightClickIsActive) {\r\n                mouseInput.moveX = event.movementX;\r\n                mouseInput.moveY = event.movementY;\r\n                mouseInput.moveGameObjectX = event.movementX;\r\n                mouseInput.moveGameObjectY = event.movementY;\r\n            }\r\n            */\r\n        };\r\n\r\n        // Mouse wheel event function definition\r\n        canvas2D.onwheel = function(event) {\r\n            me.wheelDelta = event.deltaY;\r\n\r\n            //mouseInput.wheelDelta = event.deltaY;\r\n        };\r\n    }\r\n\r\n    processCameraNavigation (camera) {\r\n        // Zoom camera view in and out\r\n        if (this.mouseEvent.isPressed.middleButton) {\r\n            camera.translate([0.0, 0.0, -(this.mouseEvent.movementY+this.mouseEvent.movementX)/4]);\r\n            this.mouseEvent.movementX = 0;\r\n            this.mouseEvent.movementY = 0;\r\n        } // Pan the camera view\r\n        else if(this.mouseEvent.isPressed.leftButton) {\r\n            camera.translate([-this.mouseEvent.movementX/4, this.mouseEvent.movementY/4, 0.0]);\r\n            this.mouseEvent.movementX = 0;\r\n            this.mouseEvent.movementY = 0;\r\n        } // Rotate the camera view\r\n        else if (this.mouseEvent.isPressed.rightButton) {\r\n            camera.rotate([-this.mouseEvent.movementY/8, -this.mouseEvent.movementX/8, 0.0]);\r\n            this.mouseEvent.movementX = 0;\r\n            this.mouseEvent.movementY = 0;\r\n        }\r\n\r\n        if (Math.abs(this.mouseEvent.wheelDelta) > 0.01) {\r\n            if (this.mouseEvent.wheelDelta > 0.0) {\r\n                camera.translate([0.0, 0.0, 4.0]);\r\n            }\r\n            else\r\n                camera.translate([0.0, 0.0, -4.0]);\r\n\r\n            this.mouseEvent.wheelDelta = 0;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default EventHandler;"]},"metadata":{},"sourceType":"module"}
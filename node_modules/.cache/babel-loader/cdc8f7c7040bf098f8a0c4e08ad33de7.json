{"ast":null,"code":"//TODO: Implement a sky box background\n//TODO: Implement cubic shadow mapping\n//TODO: Implement a ParticleSystem component\n// JavaScript components\nimport Shader from \"./ShaderHandle\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./events/EventHandler\";\nimport MouseEvent from \"./events/MouseEvent\";\nimport Scene from \"./Scene\";\nimport PointLightSource from \"./PointLightSource\";\nimport Raycast from \"./Raycast\";\nimport Vector3 from \"./math/Vector3\";\nimport Matrix4 from \"./math/Matrix4\";\nimport Transform from \"./Transform\"; // Shader files\n\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\nimport AmbientShader from \"./shaders/AmbientShader\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\nconst CAMERA_ROTATION = [0.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER_SMOOTH: 2,\n  CYLINDER_SHARP: 3,\n  PLANE: 4\n};\nconst MS_PER_UPDATE = 2.0;\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0;\n    this.viewportAspectRatio = 1.0;\n    this.lag = 0.0; // Scenes works like blocks in the game world.\n    // The active scenes are based on the cameras distance to the origin of each scene.\n\n    this.scenes = [];\n    this.shaders = new Map(); //// THIS IS FOR DEBUGGING ////\n\n    this.raycastBullets = []; //// THIS IS FOR DEBUGGING ////\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Update game loop clock\n    Time.update(); // Time start of the loop\n\n    let startTime = Time.now; // Process mouse and keyboard inputs\n\n    this.processUserInput(); // Add elapsed time to the lag variable\n\n    this.lag += Time.deltaTime; // Make sure the update function is called on a constant rate\n\n    while (this.lag >= MS_PER_UPDATE) {\n      this.update();\n      this.lag -= MS_PER_UPDATE;\n    } // Render graphics\n\n\n    this.render(this.lag / MS_PER_UPDATE); // Clear momentary events\n\n    EventHandler.resetMouseEvents(); // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\n\n    while (Time.now - startTime < 16.0); // Sleep\n\n  }\n\n  update() {\n    this.scenes.forEach(scene => {\n      scene.update();\n    }); //// RAYCAST BULLETS UPDATE ////\n\n    let bulletTransform = new Transform();\n    let speed = 0.2;\n    let i = 0;\n\n    while (i < this.raycastBullets.length) {\n      // Set bullets position and move it in the bullet direction\n      bulletTransform.setPosition(this.raycastBullets[i].position);\n      bulletTransform.translate([this.raycastBullets[i].direction.x * speed, this.raycastBullets[i].direction.y * speed, this.raycastBullets[i].direction.z * speed]); // Check distance from camera and bullet\n\n      if (Vector3.distance(bulletTransform.position, this.camera.position) < 100.0) {\n        // Save current position\n        this.raycastBullets[i].position = [bulletTransform.position.x, bulletTransform.position.y, bulletTransform.position.z];\n        ++i;\n      } else {\n        // Remove bullet if distance is too great\n        this.raycastBullets.splice(i, 1);\n      }\n    } //// RAYCAST BULLETS UPDATE ////\n\n  }\n\n  render(residualLag) {\n    // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n    this.updateViewportDimensions(); // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scenes\n\n    this.scenes.forEach(scene => {\n      //scene.updateLightPositions();\n      scene.draw();\n    }); //// RAYCAST BULLETS RENDER ////\n\n    this.raycastBullets.forEach(bulletInfo => {\n      // Set bullet position\n      this.bulletModel.setPosition(bulletInfo.position); // Draw bullet\n\n      this.bulletModel.render(this.shaders.get(\"ambient\"));\n    }); //// RAYCAST BULLETS RENDER ////\n    // Display fps and other information\n\n    this.drawTextElements();\n  }\n\n  processUserInput() {\n    // Handle camera navigation\n    this.processCameraNavigation(this.camera); // If left mouse button is pressed, cast a ray from the mouse cursor position\n\n    if (MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\n      // Create a ray from the camera\n      let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height); //// Test ray intersections ////\n      // Define a sphere placed in the origin\n\n      let sphere = {\n        center: new Vector3([0.0, 1.0, 0.0]),\n        radius: 2.0\n      };\n      Raycast.sphereIntersectionTest(ray, sphere); // Define a xz plane with y = 0;\n\n      let plane = {\n        normal: new Vector3([0.0, 1.0, 0.0]),\n        offset: 0\n      };\n      Raycast.planeIntersectionTest(ray, plane); //// Test ray intersections ////\n      // Add a ray bullet\n      // Offset the bullet start point\n\n      const bulletStart = [ray.origin.x + ray.direction.x * 2.0, ray.origin.y + ray.direction.y * 2.0, ray.origin.z + ray.direction.z * 2.0];\n      this.raycastBullets.push({\n        position: bulletStart,\n        direction: ray.direction.clone()\n      });\n    }\n  } // This function is called before the game loop is started\n\n\n  preload() {\n    // Initiate time tracker component\n    Time.init(); // Initiate the event handler\n\n    EventHandler.init(); // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\n\n    this.setUpWebGL(); // Create shaders\n\n    let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\n    let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\n    this.shaders.set(\"phong\", mainShader);\n    this.shaders.set(\"ambient\", ambientShader); // The projection matrix adds 3D perspective (depth) to the graphics\n\n    this.fieldOfView = Math.PI / 6;\n    this.viewportAspectRatio = this.canvas.width / this.canvas.height;\n    this.projectionMatrix = Matrix4.perspective(this.fieldOfView, this.viewportAspectRatio, 0.1, 10000.0); // Initiate the projection matrix in the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniform(this.projectionMatrix);\n    }); // Initialize the main camera\n\n    this.camera = new Camera(this.shaders);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create a scene for the objects\n\n    let defaultScene = new Scene(this.shaders); // Create scene objects\n\n    this.loadDefaultSceneObjects(defaultScene); // Add to scenes\n\n    this.scenes.push(defaultScene); ///// MULTIPLE SCENE TEST ///////\n\n    /*\r\n    let defaultScene2 = new Scene(this.shaders);\r\n    let defaultScene3 = new Scene(this.shaders);\r\n    let defaultScene4 = new Scene(this.shaders);\r\n      this.loadDefaultSceneObjects(defaultScene2);\r\n    this.loadDefaultSceneObjects(defaultScene3);\r\n    this.loadDefaultSceneObjects(defaultScene4);\r\n      defaultScene3.setPosition([0.0, 0.0, 80.0]);\r\n    defaultScene3.setRotation([0.0, 180.0, 0.0]);\r\n      defaultScene2.setPosition([0.0, 60.0, 0.0]);\r\n    defaultScene2.setRotation([0.0, 0.0, 180.0]);\r\n      defaultScene4.setPosition([0.0, 60.0, 80.0]);\r\n    defaultScene4.setRotation([0.0, 180.0, 180.0]);\r\n      this.scenes.push(defaultScene2);\r\n    this.scenes.push(defaultScene3);\r\n    this.scenes.push(defaultScene4);\r\n    */\n    ///// MULTIPLE SCENE TEST ///////\n    // Create a bullet for displaying raycast\n\n    this.bulletModel = this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Cyan Sphere',\n      scale: [0.5, 0.5, 0.5],\n      position: [0.0, 0.0, 0.0],\n      color: [0.0, 1.0, 1.0]\n    });\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let currentAspectRatio = this.canvas.width / this.canvas.height; // Check if the aspect ratio has changed before going further\n\n    if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001) return; // Create a new projection matrix\n\n    this.projectionMatrix = Matrix4.perspective(this.fieldOfView, currentAspectRatio, 0.1, 10000.0); // Update the projection matrix for the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniform(this.projectionMatrix);\n    }); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Save current aspect ratio\n\n    this.viewportAspectRatio = currentAspectRatio;\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 10;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.gl);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\n      mesh.createCylinderSmooth(32, 1, 1, 2);\n    } else if (settings.shape === SHAPE.CYLINDER_SHARP) {\n      mesh.createCylinderSharp(8, 1, 2);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    return obj;\n  }\n\n  createPointLightSource(settings) {\n    // Create the light source component\n    let lightSource = new PointLightSource(settings.name);\n    lightSource.setPosition(settings.position);\n    lightSource.setScale(settings.scale);\n    lightSource.setLightColor(settings.color);\n    lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic); // Create a model for the light source\n\n    let lightSourceModel = new Mesh(this.gl);\n    lightSourceModel.createSphere(8);\n    lightSourceModel.setColor(settings.color);\n    lightSource.addMesh(lightSourceModel);\n    return lightSource;\n  }\n\n  loadDefaultSceneObjects(scene) {\n    // Create a red cube\n    let cube = this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [1.0, 1.0, 1.0],\n      position: [0.0, 1.5, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); // Add rotation to the cube\n\n    cube.update = function () {\n      this.rotate([0.0, 0.1, 0.0]);\n    };\n\n    scene.addGameObject(cube); // Create a green sphere\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [1.0, 1.0, 1.0],\n      position: [4.0, 2.0, 2.0],\n      color: [0.0, 1.0, 0.0]\n    })); // Create a smooth magenta cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SMOOTH,\n      name: 'Magenta Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-4.0, 2.0, 2.0],\n      color: [1.0, 0.0, 1.0]\n    })); // Create a sharp orange cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SHARP,\n      name: 'Orange Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-8.0, 2.0, 2.0],\n      color: [1.0, 0.5, 0.0]\n    })); // Create gray floor\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [40.0, 0.1, 40.0],\n      position: [0.0, 0.0, 0.0],\n      color: [0.75, 0.75, 0.75]\n    })); // Create blue walls\n\n    let wallColor = [0.0, 0.2, 1.0];\n    let wallHeight = 10.0;\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Left Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [-40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Right Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Back Wall',\n      scale: [40.0, wallHeight, 0.1],\n      position: [0.0, wallHeight, -40.0],\n      color: wallColor\n    })); // Create gray roof\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [40.0, 0.1, 20.0],\n      position: [0.0, wallHeight * 2.0, -20.0],\n      color: [0.5, 0.5, 0.5]\n    })); // Create a point lights for the scene\n    // Add the light source to our scene\n\n    let lampRadius = 0.5;\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Middle Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Right Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Left Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n  }\n\n  processCameraNavigation() {\n    // Zoom camera view in and out\n    if (MouseEvent.isPressed.middleButton) {\n      this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX) / 20.0]);\n    } // Pan the camera view\n    else if (MouseEvent.isPressed.leftButton) {\n        this.camera.translate([-MouseEvent.movementX / 40.0, MouseEvent.movementY / 40.0, 0.0]);\n      } // Rotate the camera view\n      else if (MouseEvent.isPressed.rightButton) {\n          this.camera.rotate([-MouseEvent.movementY / 10.0, -MouseEvent.movementX / 10.0, 0.0]);\n        }\n\n    if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\n      if (MouseEvent.wheelDelta > 0.0) {\n        this.camera.translate([0.0, 0.0, 0.5]);\n      } else this.camera.translate([0.0, 0.0, -0.5]);\n    }\n  }\n\n  setUpWebGL() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    } // Set the viewport dimensions to the same as the canvas\n\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","MouseEvent","Scene","PointLightSource","Raycast","Vector3","Matrix4","Transform","PhongLightingShader","AmbientShader","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER_SMOOTH","CYLINDER_SHARP","PLANE","MS_PER_UPDATE","Engine","constructor","lastTime","frameCount","fps","currentTextOffset","viewportAspectRatio","lag","scenes","shaders","Map","raycastBullets","run","update","startTime","now","processUserInput","deltaTime","render","resetMouseEvents","forEach","scene","bulletTransform","speed","i","length","setPosition","position","translate","direction","x","y","z","distance","camera","splice","residualLag","updateViewportDimensions","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","draw","bulletInfo","bulletModel","get","drawTextElements","processCameraNavigation","mouseDown","isPressed","leftButton","ray","raycastFromMouseCursor","offsetX","offsetY","transform","projectionMatrix","canvas","width","height","sphere","center","radius","sphereIntersectionTest","plane","normal","offset","planeIntersectionTest","bulletStart","origin","push","clone","preload","init","setUpWebGL","mainShader","vertex","fragment","ambientShader","set","fieldOfView","Math","PI","perspective","shader","activate","setProjectionUniform","setRotation","defaultScene","loadDefaultSceneObjects","createGameObject","shape","name","scale","color","currentAspectRatio","abs","viewport","ctx","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","toFixed","fillText","pos","cameraPositionText","settings","mesh","createCube","createSphere","createCylinderSmooth","createCylinderSharp","createPlane","setColor","obj","setScale","addMesh","createPointLightSource","lightSource","setLightColor","setAttenuation","attenuation","kLinear","kQuadratic","lightSourceModel","cube","rotate","addGameObject","wallColor","wallHeight","lampRadius","addLightSource","middleButton","movementY","movementX","rightButton","wheelDelta","canvas2D","document","getElementById","getContext","console","log","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW"],"mappings":"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","sourcesContent":["//TODO: Implement a sky box background\r\n//TODO: Implement cubic shadow mapping\r\n//TODO: Implement a ParticleSystem component\r\n\r\n// JavaScript components\r\nimport Shader from \"./ShaderHandle\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./events/EventHandler\";\r\nimport MouseEvent from \"./events/MouseEvent\";\r\nimport Scene from \"./Scene\";\r\nimport PointLightSource from \"./PointLightSource\";\r\nimport Raycast from \"./Raycast\";\r\n\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Matrix4 from \"./math/Matrix4\";\r\nimport Transform from \"./Transform\";\r\n\r\n// Shader files\r\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\r\nimport AmbientShader from \"./shaders/AmbientShader\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\r\nconst CAMERA_ROTATION = [0.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER_SMOOTH: 2,\r\n    CYLINDER_SHARP: 3,\r\n    PLANE: 4\r\n};\r\n\r\nconst MS_PER_UPDATE = 2.0;\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n        this.viewportAspectRatio = 1.0;\r\n\r\n        this.lag = 0.0;\r\n\r\n        // Scenes works like blocks in the game world.\r\n        // The active scenes are based on the cameras distance to the origin of each scene.\r\n        this.scenes = [];\r\n        this.shaders = new Map();\r\n\r\n        //// THIS IS FOR DEBUGGING ////\r\n        this.raycastBullets = [];\r\n        //// THIS IS FOR DEBUGGING ////\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Update game loop clock\r\n        Time.update();\r\n\r\n        // Time start of the loop\r\n        let startTime =  Time.now;\r\n\r\n        // Process mouse and keyboard inputs\r\n        this.processUserInput();\r\n\r\n        // Add elapsed time to the lag variable\r\n        this.lag += Time.deltaTime;\r\n\r\n        // Make sure the update function is called on a constant rate\r\n        while (this.lag >= MS_PER_UPDATE) {\r\n            this.update();\r\n            this.lag -= MS_PER_UPDATE;\r\n        }\r\n\r\n        // Render graphics\r\n        this.render(this.lag/MS_PER_UPDATE);\r\n\r\n        // Clear momentary events\r\n        EventHandler.resetMouseEvents();\r\n\r\n        // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\r\n        while ((Time.now - startTime) < 16.0) ; // Sleep\r\n    }\r\n\r\n    update() {\r\n        this.scenes.forEach((scene) => {\r\n            scene.update();\r\n        });\r\n\r\n        //// RAYCAST BULLETS UPDATE ////\r\n        let bulletTransform = new Transform();\r\n        let speed = 0.2;\r\n        let i = 0;\r\n        while(i < this.raycastBullets.length) {\r\n            // Set bullets position and move it in the bullet direction\r\n            bulletTransform.setPosition(this.raycastBullets[i].position);\r\n            bulletTransform.translate([this.raycastBullets[i].direction.x * speed, this.raycastBullets[i].direction.y * speed, this.raycastBullets[i].direction.z * speed]);\r\n\r\n            // Check distance from camera and bullet\r\n            if (Vector3.distance(bulletTransform.position, this.camera.position) < 100.0) {\r\n                // Save current position\r\n                this.raycastBullets[i].position = [bulletTransform.position.x, bulletTransform.position.y, bulletTransform.position.z];\r\n                ++i;\r\n            }\r\n            else { // Remove bullet if distance is too great\r\n                this.raycastBullets.splice(i, 1);\r\n            }\r\n        }\r\n        //// RAYCAST BULLETS UPDATE ////\r\n    }\r\n\r\n    render(residualLag) {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scenes\r\n        this.scenes.forEach((scene) => {\r\n            //scene.updateLightPositions();\r\n            scene.draw();\r\n        });\r\n\r\n        //// RAYCAST BULLETS RENDER ////\r\n        this.raycastBullets.forEach((bulletInfo) => {\r\n            // Set bullet position\r\n            this.bulletModel.setPosition(bulletInfo.position);\r\n            // Draw bullet\r\n            this.bulletModel.render(this.shaders.get(\"ambient\"));\r\n        });\r\n        //// RAYCAST BULLETS RENDER ////\r\n\r\n        // Display fps and other information\r\n        this.drawTextElements();\r\n    }\r\n\r\n    processUserInput() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation(this.camera);\r\n\r\n        // If left mouse button is pressed, cast a ray from the mouse cursor position\r\n        if(MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\r\n            // Create a ray from the camera\r\n            let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height);\r\n\r\n            //// Test ray intersections ////\r\n            // Define a sphere placed in the origin\r\n            let sphere = {\r\n                center: new Vector3([0.0, 1.0, 0.0]),\r\n                radius: 2.0\r\n            };\r\n            Raycast.sphereIntersectionTest(ray, sphere);\r\n\r\n            // Define a xz plane with y = 0;\r\n            let plane = {\r\n                normal: new Vector3([0.0, 1.0, 0.0]),\r\n                offset: 0\r\n            };\r\n            Raycast.planeIntersectionTest(ray, plane);\r\n            //// Test ray intersections ////\r\n\r\n            // Add a ray bullet\r\n            // Offset the bullet start point\r\n            const bulletStart = [ray.origin.x + ray.direction.x*2.0, ray.origin.y + ray.direction.y*2.0, ray.origin.z + ray.direction.z*2.0];\r\n            this.raycastBullets.push({\r\n                position: bulletStart,\r\n                direction: ray.direction.clone()\r\n            });\r\n        }\r\n    }\r\n\r\n    // This function is called before the game loop is started\r\n    preload() {\r\n        // Initiate time tracker component\r\n        Time.init();\r\n\r\n        // Initiate the event handler\r\n        EventHandler.init();\r\n\r\n        // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\r\n        this.setUpWebGL();\r\n\r\n        // Create shaders\r\n        let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\r\n        let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\r\n\r\n        this.shaders.set(\"phong\", mainShader);\r\n        this.shaders.set(\"ambient\", ambientShader);\r\n\r\n        // The projection matrix adds 3D perspective (depth) to the graphics\r\n        this.fieldOfView = Math.PI / 6;\r\n        this.viewportAspectRatio = this.canvas.width / this.canvas.height;\r\n        this.projectionMatrix = Matrix4.perspective(this.fieldOfView, this.viewportAspectRatio, 0.1, 10000.0);\r\n\r\n        // Initiate the projection matrix in the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniform(this.projectionMatrix);\r\n        });\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.shaders);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create a scene for the objects\r\n        let defaultScene = new Scene(this.shaders);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects(defaultScene);\r\n        // Add to scenes\r\n        this.scenes.push(defaultScene);\r\n\r\n        ///// MULTIPLE SCENE TEST ///////\r\n        /*\r\n        let defaultScene2 = new Scene(this.shaders);\r\n        let defaultScene3 = new Scene(this.shaders);\r\n        let defaultScene4 = new Scene(this.shaders);\r\n\r\n        this.loadDefaultSceneObjects(defaultScene2);\r\n        this.loadDefaultSceneObjects(defaultScene3);\r\n        this.loadDefaultSceneObjects(defaultScene4);\r\n\r\n        defaultScene3.setPosition([0.0, 0.0, 80.0]);\r\n        defaultScene3.setRotation([0.0, 180.0, 0.0]);\r\n\r\n        defaultScene2.setPosition([0.0, 60.0, 0.0]);\r\n        defaultScene2.setRotation([0.0, 0.0, 180.0]);\r\n\r\n        defaultScene4.setPosition([0.0, 60.0, 80.0]);\r\n        defaultScene4.setRotation([0.0, 180.0, 180.0]);\r\n\r\n        this.scenes.push(defaultScene2);\r\n        this.scenes.push(defaultScene3);\r\n        this.scenes.push(defaultScene4);\r\n        */\r\n        ///// MULTIPLE SCENE TEST ///////\r\n\r\n\r\n        // Create a bullet for displaying raycast\r\n        this.bulletModel = this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Cyan Sphere',\r\n            scale: [0.5, 0.5, 0.5],\r\n            position: [0.0, 0.0, 0.0],\r\n            color: [0.0, 1.0, 1.0]\r\n        });\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let currentAspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Check if the aspect ratio has changed before going further\r\n        if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001)\r\n            return;\r\n\r\n        // Create a new projection matrix\r\n        this.projectionMatrix = Matrix4.perspective(this.fieldOfView, currentAspectRatio, 0.1, 10000.0);\r\n\r\n        // Update the projection matrix for the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniform(this.projectionMatrix);\r\n        });\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Save current aspect ratio\r\n        this.viewportAspectRatio = currentAspectRatio;\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 10;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.gl);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\r\n            mesh.createCylinderSmooth(32, 1, 1, 2);\r\n        }\r\n        else if(settings.shape === SHAPE.CYLINDER_SHARP) {\r\n            mesh.createCylinderSharp(8, 1, 2);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        return obj;\r\n    }\r\n\r\n    createPointLightSource(settings) {\r\n        // Create the light source component\r\n        let lightSource = new PointLightSource(settings.name);\r\n        lightSource.setPosition(settings.position);\r\n        lightSource.setScale(settings.scale);\r\n        lightSource.setLightColor(settings.color);\r\n        lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic);\r\n\r\n        // Create a model for the light source\r\n        let lightSourceModel = new Mesh(this.gl);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor(settings.color);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        return lightSource;\r\n    }\r\n\r\n    loadDefaultSceneObjects(scene) {\r\n        // Create a red cube\r\n        let cube = this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [1.0, 1.0, 1.0],\r\n            position: [0.0, 1.5, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n        // Add rotation to the cube\r\n        cube.update = function() {\r\n            this.rotate([0.0, 0.1, 0.0]);\r\n        };\r\n        scene.addGameObject(cube);\r\n\r\n        // Create a green sphere\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.SPHERE,\r\n                name: 'Green Sphere',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [4.0, 2.0, 2.0],\r\n                color: [0.0, 1.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a smooth magenta cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SMOOTH,\r\n                name: 'Magenta Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-4.0, 2.0, 2.0],\r\n                color: [1.0, 0.0, 1.0]\r\n            })\r\n        );\r\n\r\n        // Create a sharp orange cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SHARP,\r\n                name: 'Orange Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-8.0, 2.0, 2.0],\r\n                color: [1.0, 0.5, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create gray floor\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Roof',\r\n                scale: [40.0, 0.1, 40.0],\r\n                position: [0.0, 0.0, 0.0],\r\n                color: [0.75, 0.75, 0.75]\r\n            })\r\n        );\r\n\r\n        // Create blue walls\r\n        let wallColor = [0.0, 0.2, 1.0];\r\n        let wallHeight = 10.0;\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Left Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [-40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Right Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Back Wall',\r\n                scale: [40.0, wallHeight, 0.1],\r\n                position: [0.0, wallHeight, -40.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n\r\n        // Create gray roof\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Floor',\r\n                scale: [40.0, 0.1, 20.0],\r\n                position: [0.0, wallHeight * 2.0, -20.0],\r\n                color: [0.5, 0.5, 0.5]\r\n            })\r\n        );\r\n\r\n        // Create a point lights for the scene\r\n        // Add the light source to our scene\r\n        let lampRadius = 0.5;\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 0.5]);\r\n            }\r\n            else\r\n                this.camera.translate([0.0, 0.0, -0.5]);\r\n        }\r\n    }\r\n\r\n    setUpWebGL() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
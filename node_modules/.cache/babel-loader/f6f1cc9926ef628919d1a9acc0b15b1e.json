{"ast":null,"code":"import SphereCollider from \"./SphereCollider\";\nimport Vector3 from \"./math/Vector3\";\nimport Raycast from \"./Raycast\";\nimport CollisionManager from \"./CollisionManager\";\n\nclass RigidBody {\n  constructor(position, mass = 1.0) {\n    this.id = -1;\n    this.position = new Vector3(position);\n    this.velocity = new Vector3([0.0, 0.0, 0.0]);\n    this.acceleration = new Vector3([0.0, 0.0, 0.0]);\n    this.collider = new SphereCollider();\n    this.mass = mass;\n    this.enableGravity(true);\n    this.inCollision = false;\n  }\n\n  setVelocity(vel) {\n    this.velocity.set(vel);\n  }\n\n  setAcceleration(acc) {\n    this.acceleration.set(acc);\n  }\n\n  setPosition(pos) {\n    this.position.set(pos);\n  }\n\n  enableGravity(state) {\n    if (state) this.gravity = 9.82;else this.gravity = 0.0;\n  }\n\n  get gravityIsEnabled() {\n    return this.gravity > 0.1;\n  }\n\n  update(timeStep) {\n    this.updateMotion(timeStep);\n    this.handlePlaneCollisions(timeStep);\n    this.handleBodyCollisions(timeStep);\n    return true;\n  }\n\n  updateMotion(timeStep) {\n    let nextVelocity = [this.velocity.x + this.acceleration.x * timeStep, this.velocity.y + (this.acceleration.y - this.gravity) * timeStep, this.velocity.z + this.acceleration.z * timeStep];\n    this.velocity.set(nextVelocity);\n    let nextPosition = [this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep];\n    this.position.set(nextPosition);\n  }\n\n  handlePlaneCollisions(timeStep) {\n    let planes = CollisionManager.getPlaneColliders();\n    let rayDir = this.velocity.normalized();\n    let rayOrigin = this.position.clone(); // Find closest intersectionPoint\n\n    planes.forEach(plane => {\n      // If the plane intersection test returns null, no plane was found\n      let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\n\n      if (intersectionPoint !== null) {\n        // Calculate the closest distance from the rigid body and the plane\n        let distanceToPlane = Vector3.dot(plane.normal, Vector3.subtract(rayOrigin, intersectionPoint)); // Check if the sphere is intersecting the plane\n\n        if (distanceToPlane < this.collider.radius) {\n          // Move the object to the plane surface\n          this.position.set([this.position.x + plane.normal.x * (this.collider.radius - distanceToPlane), this.position.y + plane.normal.y * (this.collider.radius - distanceToPlane), this.position.z + plane.normal.z * (this.collider.radius - distanceToPlane)]);\n          let bounce = this.velocity.magnitude * 0.75;\n          let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir);\n          this.velocity.set([-reflectDirection.x * bounce, -reflectDirection.y * bounce, -reflectDirection.z * bounce]);\n          let nextPosition = [this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep];\n          this.position.set(nextPosition);\n        }\n      }\n    });\n  }\n\n  handleBodyCollisions(timeStep) {\n    if (this.velocity.magnitude < 0.1) {\n      return;\n    }\n\n    let sceneRigidBodies = CollisionManager.getRigidBodies();\n    sceneRigidBodies.forEach(rb => {\n      // Check if other id is different from this id\n      if (this.id - rb.id !== 0) {\n        let targetDistance = Vector3.distance(rb.position, this.position);\n\n        if (targetDistance < rb.collider.radius + this.collider.radius) {\n          // Move the body outside of collision area\n          this.position.set([this.position.x + this.velocity.x * (this.collider.radius - distanceToPlane), this.position.y + this.velocity.y * (this.collider.radius - distanceToPlane), this.position.z + this.velocity.z * (this.collider.radius - distanceToPlane)]); // Stationary target\n\n          if (rb.velocity.magnitude < 0.1) {\n            let speedChange = (this.mass - rb.mass) / (this.mass + rb.mass);\n            let velocityNew = [this.velocity.x * speedChange, this.velocity.y * speedChange, this.velocity.z * speedChange];\n            this.velocity.set(velocityNew);\n            this.updateMotion(timeStep);\n            let targetSpeed = 2.0 * this.mass / (this.mass + rb.mass);\n            let targetVelocity = [rb.velocity.x * targetSpeed, rb.velocity.y * targetSpeed, rb.velocity.z * targetSpeed];\n            rb.velocity.set(targetVelocity);\n            console.log(rb.velocity);\n            rb.updateMotion(timeStep);\n          }\n        }\n      }\n    });\n  }\n\n}\n\nexport default RigidBody;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\RigidBody.js"],"names":["SphereCollider","Vector3","Raycast","CollisionManager","RigidBody","constructor","position","mass","id","velocity","acceleration","collider","enableGravity","inCollision","setVelocity","vel","set","setAcceleration","acc","setPosition","pos","state","gravity","gravityIsEnabled","update","timeStep","updateMotion","handlePlaneCollisions","handleBodyCollisions","nextVelocity","x","y","z","nextPosition","planes","getPlaneColliders","rayDir","normalized","rayOrigin","clone","forEach","plane","intersectionPoint","planeIntersectionTest","distanceToPlane","dot","normal","subtract","radius","bounce","magnitude","reflectDirection","multipleBy","sceneRigidBodies","getRigidBodies","rb","targetDistance","distance","speedChange","velocityNew","targetSpeed","targetVelocity","console","log"],"mappings":"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","sourcesContent":["import SphereCollider from \"./SphereCollider\";\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Raycast from \"./Raycast\";\r\nimport CollisionManager from \"./CollisionManager\";\r\n\r\nclass RigidBody {\r\n    constructor(position, mass = 1.0) {\r\n        this.id = -1;\r\n        this.position = new Vector3(position);\r\n        this.velocity = new Vector3([0.0, 0.0, 0.0]);\r\n        this.acceleration = new Vector3([0.0, 0.0, 0.0]);\r\n\r\n        this.collider = new SphereCollider();\r\n\r\n        this.mass = mass;\r\n        this.enableGravity(true);\r\n\r\n        this.inCollision = false;\r\n    }\r\n\r\n    setVelocity(vel) {\r\n        this.velocity.set(vel);\r\n    }\r\n\r\n    setAcceleration(acc) {\r\n        this.acceleration.set(acc);\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.position.set(pos);\r\n    }\r\n\r\n    enableGravity(state) {\r\n        if (state)\r\n            this.gravity = 9.82;\r\n        else\r\n            this.gravity = 0.0;\r\n    }\r\n\r\n    get gravityIsEnabled () {\r\n        return this.gravity > 0.1;\r\n    }\r\n\r\n    update(timeStep) {\r\n\r\n        this.updateMotion(timeStep);\r\n        this.handlePlaneCollisions(timeStep);\r\n        this.handleBodyCollisions(timeStep);\r\n\r\n        return true;\r\n    }\r\n\r\n    updateMotion(timeStep) {\r\n        let nextVelocity = [\r\n            this.velocity.x + this.acceleration.x * timeStep,\r\n            this.velocity.y + (this.acceleration.y - this.gravity) * timeStep,\r\n            this.velocity.z + this.acceleration.z * timeStep,\r\n        ];\r\n        this.velocity.set(nextVelocity);\r\n\r\n        let nextPosition = [\r\n            this.position.x + this.velocity.x * timeStep,\r\n            this.position.y + this.velocity.y * timeStep,\r\n            this.position.z + this.velocity.z * timeStep,\r\n        ];\r\n        this.position.set(nextPosition);\r\n    }\r\n\r\n    handlePlaneCollisions(timeStep) {\r\n        let planes = CollisionManager.getPlaneColliders();\r\n\r\n        let rayDir = this.velocity.normalized();\r\n        let rayOrigin = this.position.clone();\r\n\r\n        // Find closest intersectionPoint\r\n        planes.forEach((plane) => {\r\n            // If the plane intersection test returns null, no plane was found\r\n            let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\r\n            if (intersectionPoint !== null) {\r\n                // Calculate the closest distance from the rigid body and the plane\r\n                let distanceToPlane = Vector3.dot(plane.normal, Vector3.subtract(rayOrigin, intersectionPoint));\r\n\r\n                // Check if the sphere is intersecting the plane\r\n                if (distanceToPlane < this.collider.radius) {\r\n                    // Move the object to the plane surface\r\n                    this.position.set([\r\n                        this.position.x + plane.normal.x * (this.collider.radius - distanceToPlane),\r\n                        this.position.y + plane.normal.y * (this.collider.radius - distanceToPlane),\r\n                        this.position.z + plane.normal.z * (this.collider.radius - distanceToPlane)\r\n                    ]);\r\n\r\n                    let bounce = this.velocity.magnitude*0.75;\r\n                    let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir);\r\n\r\n                    this.velocity.set([\r\n                        -reflectDirection.x*bounce,\r\n                        -reflectDirection.y*bounce,\r\n                        -reflectDirection.z*bounce\r\n                    ]);\r\n                    let nextPosition = [\r\n                        this.position.x + this.velocity.x * timeStep,\r\n                        this.position.y + this.velocity.y * timeStep,\r\n                        this.position.z + this.velocity.z * timeStep,\r\n                    ];\r\n                    this.position.set(nextPosition);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleBodyCollisions(timeStep) {\r\n        if (this.velocity.magnitude < 0.1) {\r\n            return;\r\n        }\r\n\r\n        let sceneRigidBodies = CollisionManager.getRigidBodies();\r\n\r\n        sceneRigidBodies.forEach((rb) => {\r\n            // Check if other id is different from this id\r\n            if ((this.id - rb.id) !== 0){\r\n\r\n                let targetDistance = Vector3.distance(rb.position,this.position);\r\n                if ( targetDistance < (rb.collider.radius + this.collider.radius)) {\r\n                    // Move the body outside of collision area\r\n                    this.position.set([\r\n                        this.position.x + this.velocity.x * (this.collider.radius - distanceToPlane),\r\n                        this.position.y + this.velocity.y * (this.collider.radius - distanceToPlane),\r\n                        this.position.z + this.velocity.z * (this.collider.radius - distanceToPlane)\r\n                    ]);\r\n\r\n\r\n\r\n                    // Stationary target\r\n                    if (rb.velocity.magnitude < 0.1) {\r\n                        let speedChange = (this.mass - rb.mass) / (this.mass + rb.mass);\r\n                        let velocityNew = [this.velocity.x * speedChange, this.velocity.y * speedChange, this.velocity.z * speedChange];\r\n                        this.velocity.set(velocityNew);\r\n                        this.updateMotion(timeStep);\r\n\r\n                        let targetSpeed = (2.0 * this.mass) / (this.mass + rb.mass);\r\n                        let targetVelocity = [rb.velocity.x * targetSpeed, rb.velocity.y * targetSpeed, rb.velocity.z * targetSpeed];\r\n                        rb.velocity.set(targetVelocity);\r\n                        console.log(rb.velocity);\r\n                        rb.updateMotion(timeStep);\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default RigidBody;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Transform from \"./Transform\";\nimport Vector3 from \"./math/Vector3\";\n\nclass Scene {\n  constructor(shaders) {\n    this.sceneObjects = [];\n    this.lightSources = [];\n    this.shaders = shaders;\n    this.transform = new Transform();\n    this.transform.setPosition([-100.0, -100.0, 0.0]);\n  }\n\n  addGameObject(gameObject) {\n    this.sceneObjects.push(gameObject);\n    this.sceneObjects[this.sceneObjects.length - 1].transform.setParent(this.transform);\n  }\n\n  addLightSource(lightSource) {\n    // Activate the main shader\n    let shader = this.shaders.get(\"phong\");\n    shader.activate();\n    let lightCount = this.lightSources.length;\n    let arrayName = \"pointLights[\" + lightCount + \"].\"; // Get uniform locations\n\n    let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\n    let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\n    let attenuationUniformLoc = shader.getUniformLoc(arrayName + \"attenuationConstants\");\n    let lightCountUniformLoc = shader.getUniformLoc(\"lightCount\"); // Set the uniforms in the fragment shader\n\n    shader.setUniformVec3f(positionUniformLoc, lightSource.position);\n    shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor); //shader.setUniformFloat(strengthUniformLoc, lightSource.lightStrength);\n\n    shader.setUniformVec2f(attenuationUniformLoc, [lightSource.attenuationConstants.kLinear, lightSource.attenuationConstants.kQuadratic]);\n    shader.setUniformInt(lightCountUniformLoc, lightCount); // Add light source to the list\n\n    this.lightSources.push(lightSource);\n  }\n\n  draw() {\n    this.sceneObjects.forEach(object => {\n      object.render(this.shaders.get(\"phong\"));\n    });\n    this.lightSources.forEach(lightSource => {\n      //let currentPos = lightSource.transform.position;\n      //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\n      //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\n      lightSource.render(this.shaders.get(\"ambient\"));\n    });\n  }\n\n}\n\nexport default Scene;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Scene.js"],"names":["Transform","Vector3","Scene","constructor","shaders","sceneObjects","lightSources","transform","setPosition","addGameObject","gameObject","push","length","setParent","addLightSource","lightSource","shader","get","activate","lightCount","arrayName","positionUniformLoc","getUniformLoc","colorUniformLoc","attenuationUniformLoc","lightCountUniformLoc","setUniformVec3f","position","lightColor","setUniformVec2f","attenuationConstants","kLinear","kQuadratic","setUniformInt","draw","forEach","object","render"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKG,SAAL,GAAiB,IAAIP,SAAJ,EAAjB;AACA,SAAKO,SAAL,CAAeC,WAAf,CAA2B,CAAC,CAAC,KAAF,EAAS,CAAC,KAAV,EAAiB,GAAjB,CAA3B;AACH;;AAEDC,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKL,YAAL,CAAkBM,IAAlB,CAAuBD,UAAvB;AACA,SAAKL,YAAL,CAAkB,KAAKA,YAAL,CAAkBO,MAAlB,GAAyB,CAA3C,EAA8CL,SAA9C,CAAwDM,SAAxD,CAAkE,KAAKN,SAAvE;AACH;;AAEDO,EAAAA,cAAc,CAACC,WAAD,EAAc;AACxB;AACA,QAAIC,MAAM,GAAG,KAAKZ,OAAL,CAAaa,GAAb,CAAiB,OAAjB,CAAb;AACAD,IAAAA,MAAM,CAACE,QAAP;AAEA,QAAIC,UAAU,GAAG,KAAKb,YAAL,CAAkBM,MAAnC;AACA,QAAIQ,SAAS,GAAG,iBAAiBD,UAAjB,GAA8B,IAA9C,CANwB,CAQxB;;AACA,QAAIE,kBAAkB,GAAGL,MAAM,CAACM,aAAP,CAAqBF,SAAS,GAAG,UAAjC,CAAzB;AACA,QAAIG,eAAe,GAAGP,MAAM,CAACM,aAAP,CAAqBF,SAAS,GAAG,OAAjC,CAAtB;AACA,QAAII,qBAAqB,GAAGR,MAAM,CAACM,aAAP,CAAqBF,SAAS,GAAG,sBAAjC,CAA5B;AACA,QAAIK,oBAAoB,GAAGT,MAAM,CAACM,aAAP,CAAqB,YAArB,CAA3B,CAZwB,CAcxB;;AACAN,IAAAA,MAAM,CAACU,eAAP,CAAuBL,kBAAvB,EAA2CN,WAAW,CAACY,QAAvD;AACAX,IAAAA,MAAM,CAACU,eAAP,CAAuBH,eAAvB,EAAwCR,WAAW,CAACa,UAApD,EAhBwB,CAiBxB;;AACAZ,IAAAA,MAAM,CAACa,eAAP,CAAuBL,qBAAvB,EAA8C,CAACT,WAAW,CAACe,oBAAZ,CAAiCC,OAAlC,EAA2ChB,WAAW,CAACe,oBAAZ,CAAiCE,UAA5E,CAA9C;AACAhB,IAAAA,MAAM,CAACiB,aAAP,CAAqBR,oBAArB,EAA2CN,UAA3C,EAnBwB,CAqBxB;;AACA,SAAKb,YAAL,CAAkBK,IAAlB,CAAuBI,WAAvB;AACH;;AAEDmB,EAAAA,IAAI,GAAG;AACH,SAAK7B,YAAL,CAAkB8B,OAAlB,CAA2BC,MAAD,IAAW;AACjCA,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKjC,OAAL,CAAaa,GAAb,CAAiB,OAAjB,CAAd;AACH,KAFD;AAIA,SAAKX,YAAL,CAAkB6B,OAAlB,CAA2BpB,WAAD,IAAiB;AACvC;AACA;AACA;AACAA,MAAAA,WAAW,CAACsB,MAAZ,CAAmB,KAAKjC,OAAL,CAAaa,GAAb,CAAiB,SAAjB,CAAnB;AACH,KALD;AAMH;;AAlDO;;AAqDZ,eAAef,KAAf","sourcesContent":["import Transform from \"./Transform\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass Scene {\r\n    constructor(shaders) {\r\n        this.sceneObjects = [];\r\n        this.lightSources = [];\r\n        this.shaders = shaders;\r\n        this.transform = new Transform();\r\n        this.transform.setPosition([-100.0, -100.0, 0.0]);\r\n    }\r\n\r\n    addGameObject(gameObject) {\r\n        this.sceneObjects.push(gameObject);\r\n        this.sceneObjects[this.sceneObjects.length-1].transform.setParent(this.transform);\r\n    }\r\n\r\n    addLightSource(lightSource) {\r\n        // Activate the main shader\r\n        let shader = this.shaders.get(\"phong\");\r\n        shader.activate();\r\n\r\n        let lightCount = this.lightSources.length;\r\n        let arrayName = \"pointLights[\" + lightCount + \"].\";\r\n\r\n        // Get uniform locations\r\n        let positionUniformLoc = shader.getUniformLoc(arrayName + \"position\");\r\n        let colorUniformLoc = shader.getUniformLoc(arrayName + \"color\");\r\n        let attenuationUniformLoc = shader.getUniformLoc(arrayName + \"attenuationConstants\");\r\n        let lightCountUniformLoc = shader.getUniformLoc(\"lightCount\");\r\n\r\n        // Set the uniforms in the fragment shader\r\n        shader.setUniformVec3f(positionUniformLoc, lightSource.position);\r\n        shader.setUniformVec3f(colorUniformLoc, lightSource.lightColor);\r\n        //shader.setUniformFloat(strengthUniformLoc, lightSource.lightStrength);\r\n        shader.setUniformVec2f(attenuationUniformLoc, [lightSource.attenuationConstants.kLinear, lightSource.attenuationConstants.kQuadratic]);\r\n        shader.setUniformInt(lightCountUniformLoc, lightCount);\r\n\r\n        // Add light source to the list\r\n        this.lightSources.push(lightSource);\r\n    }\r\n\r\n    draw() {\r\n        this.sceneObjects.forEach((object)=> {\r\n            object.render(this.shaders.get(\"phong\"));\r\n        });\r\n\r\n        this.lightSources.forEach((lightSource) => {\r\n            //let currentPos = lightSource.transform.position;\r\n            //currentPos.x = this.lightSourceOffsetX + (100.0 * Math.sin(Time.time * 0.001));\r\n            //lightSource.setPosition([currentPos.x, currentPos.y, currentPos.z]);\r\n            lightSource.render(this.shaders.get(\"ambient\"));\r\n        });\r\n    }\r\n}\r\n\r\nexport default Scene;"]},"metadata":{},"sourceType":"module"}
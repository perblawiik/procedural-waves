{"ast":null,"code":"//TODO: Implement a sky box background\n//TODO: Implement cubic shadow mapping\n//TODO: Implement a ParticleSystem component\n// JavaScript components\nimport Shader from \"./ShaderHandle\";\nimport Time from \"./Time\";\nimport Camera from \"./Camera\";\nimport Mesh from \"./Mesh\";\nimport GameObject from \"./GameObject\";\nimport EventHandler from \"./events/EventHandler\";\nimport MouseEvent from \"./events/MouseEvent\";\nimport Scene from \"./Scene\";\nimport PointLightSource from \"./PointLightSource\";\nimport Vector3 from \"./math/Vector3\";\nimport Matrix4 from \"./math/Matrix4\"; // Shader files\n\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\nimport AmbientShader from \"./shaders/AmbientShader\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\nconst CAMERA_ROTATION = [0.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER_SMOOTH: 2,\n  CYLINDER_SHARP: 3,\n  PLANE: 4\n};\nconst MS_PER_UPDATE = 2.0;\n\nclass Engine {\n  constructor() {\n    // Initialize timing variables\n    this.lastTime = 0.0;\n    this.frameCount = 0;\n    this.fps = 0;\n    this.currentTextOffset = 0;\n    this.viewportAspectRatio = 1.0;\n    this.lag = 0.0; // Scenes works like blocks in the game world.\n    // The active scenes are based on the cameras distance to the origin of each scene.\n\n    this.scenes = [];\n    this.shaders = new Map();\n    this.rayLines = [];\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Time start of the loop\n    let startTime = Time.now; // Update time clock\n\n    Time.update(); // Add elapsed time to the lag variable\n\n    this.lag += Time.deltaTime;\n\n    while (this.lag >= MS_PER_UPDATE) {\n      this.update();\n      this.lag -= MS_PER_UPDATE;\n    } // Render graphics\n\n\n    this.render(this.lag / MS_PER_UPDATE); // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\n    //while ((Time.now - startTime) < 16.0) ; // Sleep\n  }\n\n  update() {\n    // Handle camera navigation\n    this.processCameraNavigation(this.camera);\n    this.scenes.forEach(scene => {\n      scene.update();\n    });\n\n    if (MouseEvent.mouseDown) {\n      console.log(\"X: \" + MouseEvent.offsetX + \", Y: \" + MouseEvent.offsetY);\n      this.raycastIntersection(MouseEvent.offsetX, MouseEvent.offsetY);\n    }\n\n    EventHandler.resetMouseEvents();\n  }\n\n  render(residualLag) {\n    // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n    this.updateViewportDimensions(); // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scenes\n\n    this.scenes.forEach(scene => {\n      //scene.updateLightPositions();\n      scene.draw();\n    });\n    this.rayLines.forEach(line => {\n      line.render(this.shaders.get(\"ambient\"));\n    }); // Display fps and other information\n\n    this.drawTextElements();\n  } // This function is called before the game loop is initiated\n\n\n  preload() {\n    // Initiate time tracker component\n    Time.init(); // Initiate the event handler\n\n    EventHandler.init(); // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\n\n    this.setUpWebGL(); // Create shaders\n\n    let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\n    let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\n    this.shaders.set(\"phong\", mainShader);\n    this.shaders.set(\"ambient\", ambientShader); // Initialize the main camera\n\n    this.camera = new Camera(this.shaders);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Create a scene for the objects\n\n    let defaultScene = new Scene(this.shaders); // Create scene objects\n\n    this.loadDefaultSceneObjects(defaultScene); // Add to scenes\n\n    this.scenes.push(defaultScene); ///// MULTIPLE SCENE TEST ///////\n\n    /*\r\n    let defaultScene2 = new Scene(this.shaders);\r\n    let defaultScene3 = new Scene(this.shaders);\r\n    let defaultScene4 = new Scene(this.shaders);\r\n      this.loadDefaultSceneObjects(defaultScene2);\r\n    this.loadDefaultSceneObjects(defaultScene3);\r\n    this.loadDefaultSceneObjects(defaultScene4);\r\n      defaultScene3.setPosition([0.0, 0.0, 80.0]);\r\n    defaultScene3.setRotation([0.0, 180.0, 0.0]);\r\n      defaultScene2.setPosition([0.0, 60.0, 0.0]);\r\n    defaultScene2.setRotation([0.0, 0.0, 180.0]);\r\n      defaultScene4.setPosition([0.0, 60.0, 80.0]);\r\n    defaultScene4.setRotation([0.0, 180.0, 180.0]);\r\n      this.scenes.push(defaultScene2);\r\n    this.scenes.push(defaultScene3);\r\n    this.scenes.push(defaultScene4);\r\n    */\n    ///// MULTIPLE SCENE TEST ///////\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let currentAspectRatio = this.canvas.width / this.canvas.height; // Check if the aspect ratio has changed before going further\n\n    if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001) return; // Update the projection matrix for the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniformAspectRatio(currentAspectRatio);\n    }); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Save current aspect ratio\n\n    this.viewportAspectRatio = currentAspectRatio;\n  }\n\n  drawTextElements() {\n    // Set text font style\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white';\n    this.currentTextOffset = 0; // Clear previous\n\n    this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30); // Draw the text\n\n    this.displayFrameRate();\n    this.displayCameraPosition();\n  }\n\n  displayFrameRate() {\n    let currentTime = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (currentTime - this.lastTime >= 1000.0) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.lastTime = currentTime; // Reset frame count\n\n      this.frameCount = 0;\n    } else {\n      ++this.frameCount;\n    } // Compose text string\n\n\n    let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(fpsText, 10, 25); // Update text offset for next text\n\n    this.currentTextOffset = fpsText.length * 12 + 10;\n  }\n\n  displayCameraPosition() {\n    let pos = this.camera.transform.position; // Compose text string\n\n    let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\"; // Draw fps and frame time in milliseconds\n\n    this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25); // Update text offset for next text\n\n    this.currentTextOffset = cameraPositionText.length * 12;\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.gl);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\n      mesh.createCylinderSmooth(32, 1, 1, 2);\n    } else if (settings.shape === SHAPE.CYLINDER_SHARP) {\n      mesh.createCylinderSharp(8, 1, 2);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    return obj;\n  }\n\n  createPointLightSource(settings) {\n    // Create the light source component\n    let lightSource = new PointLightSource(settings.name);\n    lightSource.setPosition(settings.position);\n    lightSource.setScale(settings.scale);\n    lightSource.setLightColor(settings.color);\n    lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic); // Create a model for the light source\n\n    let lightSourceModel = new Mesh(this.gl);\n    lightSourceModel.createSphere(8);\n    lightSourceModel.setColor(settings.color);\n    lightSource.addMesh(lightSourceModel);\n    return lightSource;\n  }\n\n  loadDefaultSceneObjects(scene) {\n    // Create a red cube\n    let cube = this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [1.0, 1.0, 1.0],\n      position: [0.0, 1.5, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); // Add rotation to the cube\n\n    cube.update = function () {\n      this.rotate([0.0, 0.1, 0.0]);\n    };\n\n    scene.addGameObject(cube); // Create a green sphere\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [1.0, 1.0, 1.0],\n      position: [4.0, 2.0, 2.0],\n      color: [0.0, 1.0, 0.0]\n    })); // Create a smooth magenta cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SMOOTH,\n      name: 'Magenta Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-4.0, 2.0, 2.0],\n      color: [1.0, 0.0, 1.0]\n    })); // Create a sharp orange cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SHARP,\n      name: 'Orange Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-8.0, 2.0, 2.0],\n      color: [1.0, 0.5, 0.0]\n    })); // Create gray floor\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [40.0, 0.1, 40.0],\n      position: [0.0, 0.0, 0.0],\n      color: [0.75, 0.75, 0.75]\n    })); // Create blue walls\n\n    let wallColor = [0.0, 0.2, 1.0];\n    let wallHeight = 10.0;\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Left Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [-40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Right Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Back Wall',\n      scale: [40.0, wallHeight, 0.1],\n      position: [0.0, wallHeight, -40.0],\n      color: wallColor\n    })); // Create gray roof\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [40.0, 0.1, 20.0],\n      position: [0.0, wallHeight * 2.0, -20.0],\n      color: [0.5, 0.5, 0.5]\n    })); // Create a point lights for the scene\n    // Add the light source to our scene\n\n    let lampRadius = 0.5;\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Middle Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Right Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Left Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n  }\n\n  processCameraNavigation() {\n    // Zoom camera view in and out\n    if (MouseEvent.isPressed.middleButton) {\n      this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX) / 20.0]);\n    } // Pan the camera view\n    else if (MouseEvent.isPressed.leftButton) {\n        this.camera.translate([-MouseEvent.movementX / 40.0, MouseEvent.movementY / 40.0, 0.0]);\n      } // Rotate the camera view\n      else if (MouseEvent.isPressed.rightButton) {\n          this.camera.rotate([-MouseEvent.movementY / 10.0, -MouseEvent.movementX / 10.0, 0.0]);\n        }\n\n    if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\n      if (MouseEvent.wheelDelta > 0.0) {\n        this.camera.translate([0.0, 0.0, 0.5]);\n      } else this.camera.translate([0.0, 0.0, -0.5]);\n    }\n  }\n\n  setUpWebGL() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    } // Set the viewport dimensions to the same as the canvas\n\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n  }\n\n  raycastIntersection(mouseX, mouseY) {\n    // Transform from mouse cursor's viewport coordinates from [0 : width/height] to the range [-1.0 : 1.0]\n    let xNorm = mouseX / (this.canvas.width * 0.5) - 1.0;\n    let yNorm = 1.0 - mouseY / (this.canvas.height * 0.5); // Reverse the Y-axis\n    // Combine a transform matrix for perspective and camera view\n\n    let projectionMatrix = Matrix4.perspective(Math.PI / 6, this.viewportAspectRatio, 0.1, 10000.0);\n    let transform = Matrix4.multiply(projectionMatrix, this.camera.transform.matrix); // Invert the transform matrix since we are going from normalized device coordinates to world coordinates\n\n    Matrix4.invert(transform, transform); // Transform screen coordinates to world coordinates\n\n    let ndc = [xNorm, yNorm, 1.0, 1.0];\n    let worldCoordinates = Matrix4.multiplyVector(transform, ndc);\n    const rayDirection = new Vector3([worldCoordinates[0], worldCoordinates[1], worldCoordinates[2]]).normalized();\n    const rayStart = this.camera.position;\n    {\n      // Test draw the ray\n      let rayVertices = [];\n      let rayIndices = [];\n      let t = 0.0;\n      let stride = 8;\n\n      for (let i = 0; i < 10; i++) {\n        // coordinates\n        rayVertices[i * stride] = rayStart.x + rayDirection.x * t;\n        rayVertices[i * stride + 1] = rayStart.y + rayDirection.y * t;\n        rayVertices[i * stride + 2] = rayStart.z + rayDirection.z * t; // normal\n\n        rayVertices[i * stride + 3] = 0.0;\n        rayVertices[i * stride + 4] = 0.0;\n        rayVertices[i * stride + 5] = 0.0; // texture\n\n        rayVertices[i * stride + 6] = 0.0;\n        rayVertices[i * stride + 7] = 0.0; // index array\n\n        rayIndices[i] = i;\n        t += 10.0;\n      }\n\n      this.createRay(rayVertices, rayIndices);\n    } // Make sphere intersection test by defining sphere properties\n\n    let sphere = {\n      center: new Vector3([0.0, 1.0, 0.0]),\n      radius: 2.0\n    };\n    let rayToSphere = Vector3.subtract(sphere.center, rayStart);\n    let tca = Vector3.dot(rayToSphere, rayDirection);\n\n    if (tca < 0.0) {\n      console.log(\"miss\");\n      return false;\n    }\n\n    let d = Math.sqrt(Vector3.dot(rayToSphere, rayToSphere) - tca * tca);\n\n    if (d > sphere.radius) {\n      console.log(\"miss\");\n      return false;\n    } else {\n      console.log(\"hit\");\n      return true;\n    }\n    /*\r\n    let thc = Math.sqrt(sphere.radius*sphere.radius - d*d);\r\n    let intersectionPoint1 = tca - thc;\r\n    let intersectionPoint2 = tca + thc;\r\n    */\n\n  }\n\n  createRay(vertices, indices) {\n    let lineMesh = new Mesh(this.gl);\n    lineMesh.setColor([1.0, 0.0, 0.0]);\n    lineMesh.createLine(vertices, indices);\n    let line = new GameObject(\"Line\");\n    line.addMesh(lineMesh);\n    this.rayLines.push(line);\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["Shader","Time","Camera","Mesh","GameObject","EventHandler","MouseEvent","Scene","PointLightSource","Vector3","Matrix4","PhongLightingShader","AmbientShader","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER_SMOOTH","CYLINDER_SHARP","PLANE","MS_PER_UPDATE","Engine","constructor","lastTime","frameCount","fps","currentTextOffset","viewportAspectRatio","lag","scenes","shaders","Map","rayLines","run","startTime","now","update","deltaTime","render","processCameraNavigation","camera","forEach","scene","mouseDown","console","log","offsetX","offsetY","raycastIntersection","resetMouseEvents","residualLag","updateViewportDimensions","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","draw","line","get","drawTextElements","preload","init","setUpWebGL","mainShader","canvas","vertex","fragment","ambientShader","set","setPosition","setRotation","defaultScene","loadDefaultSceneObjects","push","currentAspectRatio","width","height","Math","abs","shader","activate","setProjectionUniformAspectRatio","viewport","ctx","font","fillStyle","clearRect","offsetWidth","displayFrameRate","displayCameraPosition","currentTime","time","fpsText","toFixed","fillText","length","pos","transform","position","cameraPositionText","x","y","z","createGameObject","settings","mesh","shape","createCube","createSphere","createCylinderSmooth","createCylinderSharp","createPlane","setColor","color","obj","name","setScale","scale","addMesh","createPointLightSource","lightSource","setLightColor","setAttenuation","attenuation","kLinear","kQuadratic","lightSourceModel","cube","rotate","addGameObject","wallColor","wallHeight","lampRadius","addLightSource","isPressed","middleButton","translate","movementY","movementX","leftButton","rightButton","wheelDelta","canvas2D","document","getElementById","getContext","alert","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","mouseX","mouseY","xNorm","yNorm","projectionMatrix","perspective","PI","multiply","matrix","invert","ndc","worldCoordinates","multiplyVector","rayDirection","normalized","rayStart","rayVertices","rayIndices","t","stride","i","createRay","sphere","center","radius","rayToSphere","subtract","tca","dot","d","sqrt","vertices","indices","lineMesh","createLine"],"mappings":"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","sourcesContent":["//TODO: Implement a sky box background\r\n//TODO: Implement cubic shadow mapping\r\n//TODO: Implement a ParticleSystem component\r\n\r\n// JavaScript components\r\nimport Shader from \"./ShaderHandle\";\r\nimport Time from \"./Time\";\r\nimport Camera from \"./Camera\";\r\nimport Mesh from \"./Mesh\";\r\nimport GameObject from \"./GameObject\";\r\nimport EventHandler from \"./events/EventHandler\";\r\nimport MouseEvent from \"./events/MouseEvent\";\r\nimport Scene from \"./Scene\";\r\nimport PointLightSource from \"./PointLightSource\";\r\n\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Matrix4 from \"./math/Matrix4\";\r\n\r\n// Shader files\r\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\r\nimport AmbientShader from \"./shaders/AmbientShader\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\r\nconst CAMERA_ROTATION = [0.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER_SMOOTH: 2,\r\n    CYLINDER_SHARP: 3,\r\n    PLANE: 4\r\n};\r\n\r\nconst MS_PER_UPDATE = 2.0;\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Initialize timing variables\r\n        this.lastTime = 0.0;\r\n        this.frameCount = 0;\r\n        this.fps = 0;\r\n        this.currentTextOffset = 0;\r\n        this.viewportAspectRatio = 1.0;\r\n\r\n        this.lag = 0.0;\r\n\r\n        // Scenes works like blocks in the game world.\r\n        // The active scenes are based on the cameras distance to the origin of each scene.\r\n        this.scenes = [];\r\n\r\n        this.shaders = new Map();\r\n\r\n        this.rayLines = [];\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Time start of the loop\r\n        let startTime =  Time.now;\r\n\r\n        // Update time clock\r\n        Time.update();\r\n\r\n        // Add elapsed time to the lag variable\r\n        this.lag += Time.deltaTime;\r\n\r\n        while (this.lag >= MS_PER_UPDATE) {\r\n            this.update();\r\n            this.lag -= MS_PER_UPDATE;\r\n        }\r\n\r\n        // Render graphics\r\n        this.render(this.lag/MS_PER_UPDATE);\r\n\r\n        // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\r\n        //while ((Time.now - startTime) < 16.0) ; // Sleep\r\n    }\r\n\r\n    update() {\r\n        // Handle camera navigation\r\n        this.processCameraNavigation(this.camera);\r\n\r\n        this.scenes.forEach((scene) => {\r\n            scene.update();\r\n        });\r\n\r\n        if(MouseEvent.mouseDown) {\r\n            console.log(\"X: \" + MouseEvent.offsetX + \", Y: \" + MouseEvent.offsetY);\r\n\r\n            this.raycastIntersection(MouseEvent.offsetX, MouseEvent.offsetY);\r\n        }\r\n\r\n        EventHandler.resetMouseEvents();\r\n    }\r\n\r\n    render(residualLag) {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scenes\r\n        this.scenes.forEach((scene) => {\r\n            //scene.updateLightPositions();\r\n            scene.draw();\r\n        });\r\n\r\n        this.rayLines.forEach((line) => {\r\n            line.render(this.shaders.get(\"ambient\"));\r\n        });\r\n\r\n        // Display fps and other information\r\n        this.drawTextElements();\r\n    }\r\n\r\n    // This function is called before the game loop is initiated\r\n    preload() {\r\n        // Initiate time tracker component\r\n        Time.init();\r\n\r\n        // Initiate the event handler\r\n        EventHandler.init();\r\n\r\n        // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\r\n        this.setUpWebGL();\r\n\r\n        // Create shaders\r\n        let mainShader = new Shader(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\r\n        let ambientShader = new Shader(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\r\n\r\n        this.shaders.set(\"phong\", mainShader);\r\n        this.shaders.set(\"ambient\", ambientShader);\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.shaders);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Create a scene for the objects\r\n        let defaultScene = new Scene(this.shaders);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects(defaultScene);\r\n        // Add to scenes\r\n        this.scenes.push(defaultScene);\r\n\r\n        ///// MULTIPLE SCENE TEST ///////\r\n        /*\r\n        let defaultScene2 = new Scene(this.shaders);\r\n        let defaultScene3 = new Scene(this.shaders);\r\n        let defaultScene4 = new Scene(this.shaders);\r\n\r\n        this.loadDefaultSceneObjects(defaultScene2);\r\n        this.loadDefaultSceneObjects(defaultScene3);\r\n        this.loadDefaultSceneObjects(defaultScene4);\r\n\r\n        defaultScene3.setPosition([0.0, 0.0, 80.0]);\r\n        defaultScene3.setRotation([0.0, 180.0, 0.0]);\r\n\r\n        defaultScene2.setPosition([0.0, 60.0, 0.0]);\r\n        defaultScene2.setRotation([0.0, 0.0, 180.0]);\r\n\r\n        defaultScene4.setPosition([0.0, 60.0, 80.0]);\r\n        defaultScene4.setRotation([0.0, 180.0, 180.0]);\r\n\r\n        this.scenes.push(defaultScene2);\r\n        this.scenes.push(defaultScene3);\r\n        this.scenes.push(defaultScene4);\r\n        */\r\n        ///// MULTIPLE SCENE TEST ///////\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let currentAspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Check if the aspect ratio has changed before going further\r\n        if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001)\r\n            return;\r\n\r\n        // Update the projection matrix for the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniformAspectRatio(currentAspectRatio);\r\n        });\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        // Save current aspect ratio\r\n        this.viewportAspectRatio = currentAspectRatio;\r\n    }\r\n\r\n    drawTextElements() {\r\n        // Set text font style\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n        this.currentTextOffset = 0;\r\n\r\n        // Clear previous\r\n        this.ctx.clearRect(this.currentTextOffset, 0, this.canvas.offsetWidth, 30);\r\n\r\n        // Draw the text\r\n        this.displayFrameRate();\r\n        this.displayCameraPosition();\r\n    }\r\n\r\n    displayFrameRate() {\r\n        let currentTime = Time.time;\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ((currentTime - this.lastTime) >= 1000.0) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.lastTime = currentTime;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n\r\n        // Compose text string\r\n        let fpsText = \"Frame rate: \" + this.fps + \" fps, Time per frame: \" + Time.deltaTime.toFixed(0) + \" ms,\";\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(fpsText, 10, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = fpsText.length * 12 + 10;\r\n    }\r\n\r\n    displayCameraPosition() {\r\n        let pos = this.camera.transform.position;\r\n        // Compose text string\r\n        let cameraPositionText = \"Camera position: (\" + pos.x.toFixed(2) + \", \" + pos.y.toFixed(2) + \", \" + pos.z.toFixed(2) + \")\";\r\n\r\n        // Draw fps and frame time in milliseconds\r\n        this.ctx.fillText(cameraPositionText, this.currentTextOffset, 25);\r\n        // Update text offset for next text\r\n        this.currentTextOffset = cameraPositionText.length * 12;\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.gl);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\r\n            mesh.createCylinderSmooth(32, 1, 1, 2);\r\n        }\r\n        else if(settings.shape === SHAPE.CYLINDER_SHARP) {\r\n            mesh.createCylinderSharp(8, 1, 2);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        return obj;\r\n    }\r\n\r\n    createPointLightSource(settings) {\r\n        // Create the light source component\r\n        let lightSource = new PointLightSource(settings.name);\r\n        lightSource.setPosition(settings.position);\r\n        lightSource.setScale(settings.scale);\r\n        lightSource.setLightColor(settings.color);\r\n        lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic);\r\n\r\n        // Create a model for the light source\r\n        let lightSourceModel = new Mesh(this.gl);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor(settings.color);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        return lightSource;\r\n    }\r\n\r\n    loadDefaultSceneObjects(scene) {\r\n        // Create a red cube\r\n        let cube = this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [1.0, 1.0, 1.0],\r\n            position: [0.0, 1.5, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n        // Add rotation to the cube\r\n        cube.update = function() {\r\n            this.rotate([0.0, 0.1, 0.0]);\r\n        };\r\n        scene.addGameObject(cube);\r\n\r\n        // Create a green sphere\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.SPHERE,\r\n                name: 'Green Sphere',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [4.0, 2.0, 2.0],\r\n                color: [0.0, 1.0, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create a smooth magenta cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SMOOTH,\r\n                name: 'Magenta Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-4.0, 2.0, 2.0],\r\n                color: [1.0, 0.0, 1.0]\r\n            })\r\n        );\r\n\r\n        // Create a sharp orange cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SHARP,\r\n                name: 'Orange Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-8.0, 2.0, 2.0],\r\n                color: [1.0, 0.5, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create gray floor\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Roof',\r\n                scale: [40.0, 0.1, 40.0],\r\n                position: [0.0, 0.0, 0.0],\r\n                color: [0.75, 0.75, 0.75]\r\n            })\r\n        );\r\n\r\n        // Create blue walls\r\n        let wallColor = [0.0, 0.2, 1.0];\r\n        let wallHeight = 10.0;\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Left Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [-40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Right Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Back Wall',\r\n                scale: [40.0, wallHeight, 0.1],\r\n                position: [0.0, wallHeight, -40.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n\r\n        // Create gray roof\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Floor',\r\n                scale: [40.0, 0.1, 20.0],\r\n                position: [0.0, wallHeight * 2.0, -20.0],\r\n                color: [0.5, 0.5, 0.5]\r\n            })\r\n        );\r\n\r\n        // Create a point lights for the scene\r\n        // Add the light source to our scene\r\n        let lampRadius = 0.5;\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n    }\r\n\r\n    processCameraNavigation () {\r\n        // Zoom camera view in and out\r\n        if (MouseEvent.isPressed.middleButton) {\r\n            this.camera.translate([0.0, 0.0, -(MouseEvent.movementY + MouseEvent.movementX)/20.0]);\r\n        } // Pan the camera view\r\n        else if(MouseEvent.isPressed.leftButton) {\r\n            this.camera.translate([-MouseEvent.movementX/40.0, MouseEvent.movementY/40.0, 0.0]);\r\n        } // Rotate the camera view\r\n        else if (MouseEvent.isPressed.rightButton) {\r\n            this.camera.rotate([-MouseEvent.movementY/10.0, -MouseEvent.movementX/10.0, 0.0]);\r\n        }\r\n\r\n        if (Math.abs(MouseEvent.wheelDelta) > 0.01) {\r\n            if (MouseEvent.wheelDelta > 0.0) {\r\n                this.camera.translate([0.0, 0.0, 0.5]);\r\n            }\r\n            else\r\n                this.camera.translate([0.0, 0.0, -0.5]);\r\n        }\r\n    }\r\n\r\n    setUpWebGL() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n    }\r\n\r\n    raycastIntersection(mouseX, mouseY) {\r\n        // Transform from mouse cursor's viewport coordinates from [0 : width/height] to the range [-1.0 : 1.0]\r\n        let xNorm = (mouseX / (this.canvas.width  * 0.5)) - 1.0;\r\n        let yNorm = 1.0 - (mouseY / (this.canvas.height * 0.5)); // Reverse the Y-axis\r\n\r\n        // Combine a transform matrix for perspective and camera view\r\n        let projectionMatrix = Matrix4.perspective(Math.PI / 6, this.viewportAspectRatio, 0.1, 10000.0);\r\n        let transform = Matrix4.multiply(projectionMatrix, this.camera.transform.matrix);\r\n\r\n        // Invert the transform matrix since we are going from normalized device coordinates to world coordinates\r\n        Matrix4.invert(transform, transform);\r\n\r\n        // Transform screen coordinates to world coordinates\r\n        let ndc = [xNorm, yNorm, 1.0, 1.0];\r\n        let worldCoordinates = Matrix4.multiplyVector(transform, ndc);\r\n\r\n        const rayDirection = (new Vector3([worldCoordinates[0], worldCoordinates[1], worldCoordinates[2]])).normalized();\r\n        const rayStart = this.camera.position;\r\n\r\n        { // Test draw the ray\r\n            let rayVertices = [];\r\n            let rayIndices = [];\r\n            let t = 0.0;\r\n            let stride = 8;\r\n            for (let i = 0; i < 10; i++) {\r\n                // coordinates\r\n                rayVertices[i * stride] = rayStart.x + rayDirection.x * t;\r\n                rayVertices[i * stride + 1] = rayStart.y + rayDirection.y * t;\r\n                rayVertices[i * stride + 2] = rayStart.z + rayDirection.z * t;\r\n                // normal\r\n                rayVertices[i * stride + 3] = 0.0;\r\n                rayVertices[i * stride + 4] = 0.0;\r\n                rayVertices[i * stride + 5] = 0.0;\r\n                // texture\r\n                rayVertices[i * stride + 6] = 0.0;\r\n                rayVertices[i * stride + 7] = 0.0;\r\n\r\n                // index array\r\n                rayIndices[i] = i;\r\n\r\n                t += 10.0;\r\n            }\r\n            this.createRay(rayVertices, rayIndices);\r\n        }\r\n\r\n        // Make sphere intersection test by defining sphere properties\r\n        let sphere = {\r\n            center: new Vector3([0.0, 1.0, 0.0]),\r\n            radius: 2.0\r\n        };\r\n\r\n        let rayToSphere = Vector3.subtract(sphere.center, rayStart);\r\n        let tca = Vector3.dot(rayToSphere, rayDirection);\r\n        if (tca < 0.0) {\r\n            console.log(\"miss\");\r\n            return false;\r\n        }\r\n\r\n        let d = Math.sqrt(Vector3.dot(rayToSphere, rayToSphere) - tca*tca);\r\n        if (d > sphere.radius) {\r\n            console.log(\"miss\");\r\n            return false;\r\n        }\r\n        else {\r\n            console.log(\"hit\");\r\n            return true;\r\n        }\r\n        /*\r\n        let thc = Math.sqrt(sphere.radius*sphere.radius - d*d);\r\n        let intersectionPoint1 = tca - thc;\r\n        let intersectionPoint2 = tca + thc;\r\n        */\r\n    }\r\n\r\n    createRay(vertices, indices) {\r\n        let lineMesh = new Mesh(this.gl);\r\n        lineMesh.setColor([1.0, 0.0, 0.0]);\r\n        lineMesh.createLine(vertices, indices);\r\n\r\n        let line = new GameObject(\"Line\");\r\n        line.addMesh(lineMesh);\r\n\r\n        this.rayLines.push(line);\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"G:\\\\DOKUMENT\\\\Projekt\\\\React\\\\BlueBox\\\\client\\\\src\\\\js\\\\bluebox\\\\Engine.js\";\nimport React, { Component } from 'react';\nimport Shader from './Shader.js';\n\nclass Engine extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.preload();\n    this.startMainLoop();\n  }\n\n  componentWillUnmount() {\n    this.stopMainLoop();\n  }\n\n  displayFrameRate() {\n    this.tNow = Time.time; // If tNow - tLast >= 1000, one second has passed\n\n    if (this.tNow - this.fpsTimer >= 1000) {\n      // Fps = the number of frames\n      this.fps = this.frameCount; // Update timer\n\n      this.fpsTimer = this.tNow; // Reset frame count\n\n      this.frameCount = 0; // Clear previous\n\n      this.ctx.clearRect(0, 0, this.props.width, 25); // Draw fps and frame time in milliseconds\n\n      this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\n    } else {\n      ++this.frameCount;\n    }\n  }\n\n  preload() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d');\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white'; // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    }\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to light blue, fully opaque\n\n    this.gl.clearColor(0.0, 0.40, 0.55, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas); //this.SetUpEventListeners();\n  }\n\n  startMainLoop() {\n    // Initiate the main loop\n    this.animationId = window.requestAnimationFrame(this.mainLoop.bind(this));\n  }\n\n  stopMainLoop() {\n    window.cancelAnimationFrame(this.animationId);\n    this.animationId = null;\n  }\n\n  mainLoop() {\n    this.animationId = window.requestAnimationFrame(this.mainLoop.bind(this)); // Keeps track of time passed and delta time\n    // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Clear screen 2D\n\n    this.ctx.clearRect(0, 25, this.props.width, this.props.height); // Draw objects\n    // Clear depth so that local coordinate axes is visible through models\n    // Draw local coordinate axes UI\n    // Calculate fps\n\n    this.displayFrameRate();\n  }\n\n  render() {\n    const engine_container_style = {\n      display: 'flex',\n      flexDirection: 'column',\n      width: this.props.width\n    };\n    return React.createElement(\"div\", {\n      className: \"Engine-container\",\n      style: engine_container_style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: this.props.width,\n        height: this.props.height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"gl-canvas\",\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Your browser does not support HTML5\"), React.createElement(\"canvas\", {\n      id: \"text-canvas\",\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["React","Component","Shader","Engine","constructor","props","componentDidMount","preload","startMainLoop","componentWillUnmount","stopMainLoop","displayFrameRate","tNow","Time","time","fpsTimer","fps","frameCount","ctx","clearRect","width","fillText","canvas2D","document","getElementById","getContext","font","fillStyle","canvas","gl","console","log","alert","viewport","height","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","mainShader","animationId","window","requestAnimationFrame","mainLoop","bind","cancelAnimationFrame","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","render","engine_container_style","display","flexDirection"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Shader from './Shader.js';\r\n\r\nclass Engine extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.preload();\r\n        this.startMainLoop();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopMainLoop();\r\n    }\r\n\r\n    displayFrameRate() {\r\n\r\n        this.tNow = Time.time;\r\n\r\n        // If tNow - tLast >= 1000, one second has passed\r\n        if ( (this.tNow - this.fpsTimer) >= 1000) {\r\n            // Fps = the number of frames\r\n            this.fps = this.frameCount;\r\n            // Update timer\r\n            this.fpsTimer = this.tNow;\r\n            // Reset frame count\r\n            this.frameCount = 0;\r\n            // Clear previous\r\n            this.ctx.clearRect(0, 0, this.props.width, 25);\r\n            // Draw fps and frame time in milliseconds\r\n            this.ctx.fillText(\"Frame rate: \" + this.fps + \" fps\", 0, 15);\r\n        }\r\n        else {\r\n            ++this.frameCount;\r\n        }\r\n    }\r\n\r\n    preload() {\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to light blue, fully opaque\r\n        this.gl.clearColor(0.0, 0.40, 0.55, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        //this.SetUpEventListeners();\r\n    }\r\n\r\n    startMainLoop() {\r\n        // Initiate the main loop\r\n        this.animationId = window.requestAnimationFrame( this.mainLoop.bind(this) );\r\n    }\r\n\r\n    stopMainLoop() {\r\n        window.cancelAnimationFrame( this.animationId );\r\n        this.animationId = null;\r\n    }\r\n\r\n    mainLoop() {\r\n        this.animationId = window.requestAnimationFrame( this.mainLoop.bind(this) );\r\n\r\n        // Keeps track of time passed and delta time\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n        // Clear screen 2D\r\n        this.ctx.clearRect(0, 25, this.props.width, this.props.height);\r\n\r\n        // Draw objects\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n\r\n        // Draw local coordinate axes UI\r\n\r\n        // Calculate fps\r\n        this.displayFrameRate();\r\n    }\r\n\r\n    render() {\r\n        const engine_container_style = {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            width: this.props.width\r\n        };\r\n\r\n        return (\r\n            <div className=\"Engine-container\" style={engine_container_style}>\r\n                <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                    <div style={{width: this.props.width, height: this.props.height}}>\r\n                        <canvas id='gl-canvas' width={this.props.width} height={this.props.height}>\r\n                            Your browser does not support HTML5\r\n                        </canvas>\r\n                        <canvas id=\"text-canvas\" width={this.props.width} height={this.props.height}>\r\n                        </canvas>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
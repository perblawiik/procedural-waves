{"ast":null,"code":"class FragmentShader {\n  constructor() {\n    this.file = [// Float precision\n    \"precision mediump float;\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", //\"varying vec4 FragPosLightSpace;\",\n    \"varying vec3 DiffuseColor;\", \"\", // Texture samlers\n    \"uniform sampler2D textureImage;\", \"uniform sampler2D shadowMap;\", \"\", // Shader inputs\n    \"uniform vec3 objectColor;\", \"uniform vec3 viewPosition;\", \"uniform vec3 lightPosition;\", \"uniform vec3 lightColor;\", \"\", \"void main() {\", \"\", \"   vec3 viewDirection = normalize(viewPosition - FragPosition);\", \"   vec3 lightDirection = normalize(lightPosition - FragPosition);\", \"   vec3 reflectDirection = reflect(-lightDirection, Normal);\", // Ambient lighting\n    \"float ambientStrength = 0.1;\", \"vec3 ambient = ambientStrength * lightColor;\", // Diffuse lighting\n    \"float diff = max(dot(Normal, lightDirection), 0.0);\", \"vec3 diffuse = (diff * lightColor);\", // Specular lighting\n    \"float specularStrength = 0.5;\", \"float shininess = 32;\", \"float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\", \"vec3 specular = specularStrength * spec * lightColor;\", // Calculate the intensity decrement\n    \"float dist = distance(lightPosition, FragPosition);\", \"float intensity = min(80.0 / dist, 1.0);\", \"\", \"\tgl_FragColor = vec4(shadedColor, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n  SetDiffuseColor(intensity, surface) {\n    this.Id = \"vec3 Id = vec3(\" + intensity[0] + \",\" + intensity[1] + \",\" + intensity[2] + \");\"; // the diffuse illumination color\n\n    this.kd = \"vec3 kd = vec3(\" + surface[0] + \",\" + surface[1] + \",\" + surface[2] + \");\"; // the diffuse illumination color\n  }\n\n}\n\nexport default FragmentShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\FragmentShader.js"],"names":["FragmentShader","constructor","file","join","SetDiffuseColor","intensity","surface","Id","kd"],"mappings":"AAEA,MAAMA,cAAN,CAAqB;AAEjBC,EAAAA,WAAW,GAAG;AACV,SAAKC,IAAL,GAAY,CACR;AACA,8BAFQ,EAGR;AACA,6BAJQ,EAKR,sBALQ,EAMR,4BANQ,EAOR;AACA,gCARQ,EASR,EATQ,EAUR;AACA,qCAXQ,EAYR,8BAZQ,EAaR,EAbQ,EAcR;AACA,+BAfQ,EAgBR,4BAhBQ,EAiBR,6BAjBQ,EAkBR,0BAlBQ,EAmBR,EAnBQ,EAoBR,eApBQ,EAqBR,EArBQ,EAsBR,iEAtBQ,EAuBR,mEAvBQ,EAwBR,8DAxBQ,EA0BR;AACA,kCA3BQ,EA4BR,8CA5BQ,EA8BR;AACA,yDA/BQ,EAgCR,qCAhCQ,EAkCR;AACA,mCAnCQ,EAoCR,uBApCQ,EAqCR,8EArCQ,EAsCR,uDAtCQ,EAwCR;AACA,yDAzCQ,EA0CR,0CA1CQ,EA2CR,EA3CQ,EA4CR,yCA5CQ,EA6CR,GA7CQ,EA8CVC,IA9CU,CA8CL,IA9CK,CAAZ;AA+CH;;AAEDC,EAAAA,eAAe,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AAChC,SAAKC,EAAL,GAAU,oBAAoBF,SAAS,CAAC,CAAD,CAA7B,GAAmC,GAAnC,GAAyCA,SAAS,CAAC,CAAD,CAAlD,GAAwD,GAAxD,GAA8DA,SAAS,CAAC,CAAD,CAAvE,GAA6E,IAAvF,CADgC,CAC6D;;AAC7F,SAAKG,EAAL,GAAU,oBAAoBF,OAAO,CAAC,CAAD,CAA3B,GAAiC,GAAjC,GAAuCA,OAAO,CAAC,CAAD,CAA9C,GAAoD,GAApD,GAA0DA,OAAO,CAAC,CAAD,CAAjE,GAAuE,IAAjF,CAFgC,CAEuD;AAC1F;;AAvDgB;;AA0DrB,eAAeN,cAAf","sourcesContent":["\r\n\r\nclass FragmentShader {\r\n\r\n    constructor() {\r\n        this.file = [\r\n            // Float precision\r\n            \"precision mediump float;\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            //\"varying vec4 FragPosLightSpace;\",\r\n            \"varying vec3 DiffuseColor;\",\r\n            \"\",\r\n            // Texture samlers\r\n            \"uniform sampler2D textureImage;\",\r\n            \"uniform sampler2D shadowMap;\",\r\n            \"\",\r\n            // Shader inputs\r\n            \"uniform vec3 objectColor;\",\r\n            \"uniform vec3 viewPosition;\",\r\n            \"uniform vec3 lightPosition;\",\r\n            \"uniform vec3 lightColor;\",\r\n            \"\",\r\n            \"void main() {\",\r\n            \"\",\r\n            \"   vec3 viewDirection = normalize(viewPosition - FragPosition);\",\r\n            \"   vec3 lightDirection = normalize(lightPosition - FragPosition);\",\r\n            \"   vec3 reflectDirection = reflect(-lightDirection, Normal);\",\r\n\r\n            // Ambient lighting\r\n            \"float ambientStrength = 0.1;\",\r\n            \"vec3 ambient = ambientStrength * lightColor;\",\r\n\r\n            // Diffuse lighting\r\n            \"float diff = max(dot(Normal, lightDirection), 0.0);\",\r\n            \"vec3 diffuse = (diff * lightColor);\",\r\n\r\n            // Specular lighting\r\n            \"float specularStrength = 0.5;\",\r\n            \"float shininess = 32;\",\r\n            \"float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\",\r\n            \"vec3 specular = specularStrength * spec * lightColor;\",\r\n\r\n            // Calculate the intensity decrement\r\n            \"float dist = distance(lightPosition, FragPosition);\",\r\n            \"float intensity = min(80.0 / dist, 1.0);\",\r\n            \"\",\r\n            \"\tgl_FragColor = vec4(shadedColor, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n\r\n    SetDiffuseColor(intensity, surface) {\r\n        this.Id = \"vec3 Id = vec3(\" + intensity[0] + \",\" + intensity[1] + \",\" + intensity[2] + \");\"; // the diffuse illumination color\r\n        this.kd = \"vec3 kd = vec3(\" + surface[0] + \",\" + surface[1] + \",\" + surface[2] + \");\"; // the diffuse illumination color\r\n    }\r\n}\r\n\r\nexport default FragmentShader;"]},"metadata":{},"sourceType":"module"}
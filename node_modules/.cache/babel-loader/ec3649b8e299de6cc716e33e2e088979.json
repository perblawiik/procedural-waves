{"ast":null,"code":"// JavaScript\nimport Transform from './Transform';\nimport Vector3 from './math/Vector3';\n\nclass Camera {\n  constructor(shaders) {\n    this.transform = new Transform();\n    this.shaders = shaders;\n    let mainShader = this.cameraViewUniformLoc = this.shaders.get(\"phong\").getUniformLoc(\"cameraView\");\n    this.cameraPosUniformLoc = this.shaders.get(\"phong\").getUniformLoc(\"viewPosition\");\n    this.updateUniforms();\n  }\n\n  get position() {\n    return this.transform.position;\n  }\n\n  get rotation() {\n    return this.transform.rotation;\n  }\n\n  get scale() {\n    return this.transform.scaling;\n  }\n\n  translate(val) {\n    let rightVec = new Vector3([this.transform.matrix[0] * val[0], this.transform.matrix[4] * val[0], this.transform.matrix[8] * val[0]]);\n    let upVec = new Vector3([this.transform.matrix[1] * val[1], this.transform.matrix[5] * val[1], this.transform.matrix[9] * val[1]]);\n    let forwardVec = new Vector3([this.transform.matrix[2] * val[2], this.transform.matrix[6] * val[2], this.transform.matrix[10] * val[2]]);\n    this.setPosition([this.transform.position.x + rightVec.x + upVec.x + forwardVec.x, this.transform.position.y + rightVec.y + upVec.y + forwardVec.y, this.transform.position.z + rightVec.z + upVec.z + forwardVec.z]);\n  }\n\n  rotate(rot) {\n    this.setRotation([this.transform.rotation.x + rot[0], this.transform.rotation.y + rot[1], this.transform.rotation.z + rot[2]]);\n  }\n\n  setPosition(cameraPosition) {\n    this.transform.setPosition(cameraPosition);\n    this.transform.invert();\n    this.updateUniforms();\n  }\n\n  setRotation(cameraRotation) {\n    this.transform.setRotation(cameraRotation);\n    this.transform.invert();\n    this.updateUniforms();\n  }\n\n  rotateX(angle) {\n    this.setRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\n  }\n\n  rotateY(angle) {\n    this.setRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\n  }\n\n  updateUniforms() {\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setUniformVec3f(this.cameraPosUniformLoc, this.position);\n      shader.setCameraViewUniform(this.transform.matrix);\n    });\n    this.shaders.get(\"phong\").setUniformVec3f(this.cameraPosUniformLoc, this.position);\n  }\n\n}\n\nexport default Camera;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Camera.js"],"names":["Transform","Vector3","Camera","constructor","shaders","transform","mainShader","cameraViewUniformLoc","get","getUniformLoc","cameraPosUniformLoc","updateUniforms","position","rotation","scale","scaling","translate","val","rightVec","matrix","upVec","forwardVec","setPosition","x","y","z","rotate","rot","setRotation","cameraPosition","invert","cameraRotation","rotateX","angle","rotateY","forEach","shader","activate","setUniformVec3f","setCameraViewUniform"],"mappings":"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","sourcesContent":["// JavaScript\r\nimport Transform from './Transform';\r\nimport Vector3 from './math/Vector3';\r\n\r\nclass Camera {\r\n    constructor(shaders) {\r\n        this.transform = new Transform();\r\n        this.shaders = shaders;\r\n\r\n        let mainShader =\r\n        this.cameraViewUniformLoc = this.shaders.get(\"phong\").getUniformLoc(\"cameraView\");\r\n        this.cameraPosUniformLoc = this.shaders.get(\"phong\").getUniformLoc(\"viewPosition\");\r\n        this.updateUniforms();\r\n    }\r\n\r\n    get position() {\r\n        return this.transform.position;\r\n    }\r\n\r\n    get rotation() {\r\n        return this.transform.rotation;\r\n    }\r\n\r\n    get scale() {\r\n        return this.transform.scaling;\r\n    }\r\n\r\n    translate (val) {\r\n        let rightVec = new Vector3([this.transform.matrix[0]*val[0], this.transform.matrix[4]*val[0], this.transform.matrix[8]*val[0]]);\r\n        let upVec = new Vector3([this.transform.matrix[1]*val[1], this.transform.matrix[5]*val[1], this.transform.matrix[9]*val[1]]);\r\n        let forwardVec = new Vector3([this.transform.matrix[2]*val[2], this.transform.matrix[6]*val[2], this.transform.matrix[10]*val[2]]);\r\n\r\n        this.setPosition([\r\n            this.transform.position.x + rightVec.x + upVec.x + forwardVec.x,\r\n            this.transform.position.y + rightVec.y + upVec.y + forwardVec.y,\r\n            this.transform.position.z + rightVec.z + upVec.z + forwardVec.z,\r\n        ]);\r\n    }\r\n\r\n    rotate (rot) {\r\n        this.setRotation([\r\n            this.transform.rotation.x + rot[0],\r\n            this.transform.rotation.y + rot[1],\r\n            this.transform.rotation.z + rot[2]\r\n        ]);\r\n    }\r\n\r\n    setPosition(cameraPosition) {\r\n        this.transform.setPosition(cameraPosition);\r\n        this.transform.invert();\r\n        this.updateUniforms();\r\n    }\r\n\r\n    setRotation(cameraRotation) {\r\n        this.transform.setRotation(cameraRotation);\r\n        this.transform.invert();\r\n        this.updateUniforms();\r\n    }\r\n\r\n    rotateX (angle) {\r\n        this.setRotation([angle, this.transform.rotation.y, this.transform.rotation.z]);\r\n    }\r\n\r\n    rotateY (angle) {\r\n        this.setRotation([this.transform.rotation.x, angle, this.transform.rotation.z]);\r\n    }\r\n\r\n    updateUniforms() {\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setUniformVec3f(this.cameraPosUniformLoc, this.position);\r\n            shader.setCameraViewUniform(this.transform.matrix);\r\n        });\r\n\r\n        this.shaders.get(\"phong\").setUniformVec3f(this.cameraPosUniformLoc, this.position);\r\n    }\r\n}\r\n\r\nexport default Camera;"]},"metadata":{},"sourceType":"module"}
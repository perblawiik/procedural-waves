{"ast":null,"code":"import SphereCollider from \"./SphereCollider\";\nimport Vector3 from \"./math/Vector3\";\nimport Raycast from \"./Raycast\";\nimport CollisionManager from \"./CollisionManager\";\n\nclass RigidBody {\n  constructor(position, mass = 1.0) {\n    this.id = -1;\n    this.position = new Vector3(position);\n    this.velocity = new Vector3([0.0, 0.0, 0.0]);\n    this.acceleration = new Vector3([0.0, 0.0, 0.0]);\n    this.collider = new SphereCollider();\n    this.mass = mass;\n    this.enableGravity(true);\n    this.inCollision = false;\n  }\n\n  setVelocity(vel) {\n    this.velocity.set(vel);\n  }\n\n  setAcceleration(acc) {\n    this.acceleration.set(acc);\n  }\n\n  setPosition(pos) {\n    this.position.set(pos);\n  }\n\n  enableGravity(state) {\n    if (state) this.gravity = 9.82;else this.gravity = 0.0;\n  }\n\n  get gravityIsEnabled() {\n    return this.gravity > 0.1;\n  }\n\n  update(timeStep) {\n    this.updateMotion(timeStep);\n    this.handlePlaneCollisions(timeStep);\n    this.scanForBodyCollisions(timeStep);\n    return true;\n  }\n\n  updateMotion(timeStep) {\n    this.velocity.set([this.velocity.x + this.acceleration.x * timeStep, this.velocity.y + (this.acceleration.y - this.gravity) * timeStep, this.velocity.z + this.acceleration.z * timeStep]);\n    this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]);\n  }\n\n  handlePlaneCollisions(timeStep) {\n    let planes = CollisionManager.getPlaneColliders();\n    let rayDir = this.velocity.normalized();\n    let rayOrigin = this.position.clone(); // Find closest intersectionPoint\n\n    planes.forEach(plane => {\n      // If the plane intersection test returns null, no plane was found\n      let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\n\n      if (intersectionPoint !== null) {\n        // Calculate the closest distance from the rigid body collider and the plane\n        let distanceToPlane = Vector3.dot(plane.normal, Vector3.subtract(rayOrigin, intersectionPoint)); // Check if the sphere is intersecting the plane\n\n        if (distanceToPlane < this.collider.radius) {\n          // Move the object to the plane surface\n          let diff = this.collider.radius - distanceToPlane;\n          this.position.set([this.position.x + plane.normal.x * diff, this.position.y + plane.normal.y * diff, this.position.z + plane.normal.z * diff]); // Calculate the bounce velocity\n\n          let bounce = this.velocity.magnitude * 0.8;\n          let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir);\n          this.velocity.set([-reflectDirection.x * bounce, -reflectDirection.y * bounce, -reflectDirection.z * bounce]);\n          this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]);\n        }\n      }\n    });\n  }\n\n  scanForBodyCollisions(timeStep) {\n    // If the rigid body is not moving, don't check for target collisions\n    if (this.velocity.magnitude < 0.1) {\n      return;\n    } //TODO: Optimize collision scanning (if two bodies have collided, we dont need to check collision again in this update\n\n\n    let rigidBodies = CollisionManager.getRigidBodies();\n    rigidBodies.forEach(target => {\n      // Dont check for collision with itself\n      if (this.id !== target.id) {\n        // Compute the distance between the two sphere colliders\n        let targetDistance = Vector3.distance(target.position, this.position); // If the distance is within this collider radius and target collider radius, we have a collision\n\n        if (targetDistance < target.collider.radius + this.collider.radius) {\n          this.handleBodyCollisions(timeStep, target, targetDistance);\n        }\n      }\n    });\n  }\n\n  handleBodyCollisions(timeStep, target, targetDistance) {\n    // Get velocity directions\n    let thisVelocityDirection = this.velocity.normalized();\n    let targetVelocityDirection = target.velocity.normalized(); // Move the body outside of collision area\n\n    let diff = this.collider.radius + target.collider.radius - targetDistance;\n    this.position.set([this.position.x - thisVelocityDirection.x * diff, this.position.y - thisVelocityDirection.y * diff, this.position.z - thisVelocityDirection.z * diff]); // The new velocity direction is given by the vector between the two bodies\n\n    let thisDirectionAfter = Vector3.subtract(target.position, this.position).normalized();\n    let targetDirectionAfter = thisDirectionAfter.inverted(); // Compute a multiplier based on the angle between the before and after velocities.\n    // Wider angles results in lesser impact (lower multipliers)\n\n    let thisMultiplier = Math.abs(Vector3.dot(thisVelocityDirection, thisDirectionAfter));\n    let targetMultiplier = Math.abs(Vector3.dot(targetVelocityDirection, targetDirectionAfter));\n    let thisSpeedBefore = this.velocity.magnitude;\n    let targetSpeedBefore = target.velocity.magnitude; // Elastic Collision Coefficients\n\n    let denominator = this.mass + target.mass;\n    let A = 2.0 * this.mass * (1.0 - targetMultiplier) / denominator;\n    let B = (thisMultiplier * target.mass - this.mass) / denominator; // Set new velocity and position for target\n\n    target.velocity.set([thisDirectionAfter.x * thisSpeedBefore * A + targetDirectionAfter.x * targetSpeedBefore * B, thisDirectionAfter.y * thisSpeedBefore * A + targetDirectionAfter.y * targetSpeedBefore * B, thisDirectionAfter.z * thisSpeedBefore * A + targetDirectionAfter.z * targetSpeedBefore * B]);\n    target.position.set([target.position.x + target.velocity.x * timeStep, target.position.y + target.velocity.y * timeStep, target.position.z + target.velocity.z * timeStep]); // Elastic Collision Coefficients\n\n    A = (thisMultiplier * this.mass - target.mass) / denominator;\n    B = 2.0 * target.mass * (1.0 - targetMultiplier) / denominator; // Set new velocity and position\n\n    this.velocity.set([thisDirectionAfter.x * thisSpeedBefore * A + targetDirectionAfter.x * targetSpeedBefore * B, thisDirectionAfter.y * thisSpeedBefore * A + targetDirectionAfter.y * targetSpeedBefore * B, thisDirectionAfter.z * thisSpeedBefore * A + targetDirectionAfter.z * targetSpeedBefore * B]);\n    this.position.set([this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep]);\n  }\n\n}\n\nexport default RigidBody;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\RigidBody.js"],"names":["SphereCollider","Vector3","Raycast","CollisionManager","RigidBody","constructor","position","mass","id","velocity","acceleration","collider","enableGravity","inCollision","setVelocity","vel","set","setAcceleration","acc","setPosition","pos","state","gravity","gravityIsEnabled","update","timeStep","updateMotion","handlePlaneCollisions","scanForBodyCollisions","x","y","z","planes","getPlaneColliders","rayDir","normalized","rayOrigin","clone","forEach","plane","intersectionPoint","planeIntersectionTest","distanceToPlane","dot","normal","subtract","radius","diff","bounce","magnitude","reflectDirection","multipleBy","rigidBodies","getRigidBodies","target","targetDistance","distance","handleBodyCollisions","thisVelocityDirection","targetVelocityDirection","thisDirectionAfter","targetDirectionAfter","inverted","thisMultiplier","Math","abs","targetMultiplier","thisSpeedBefore","targetSpeedBefore","denominator","A","B"],"mappings":"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","sourcesContent":["import SphereCollider from \"./SphereCollider\";\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Raycast from \"./Raycast\";\r\nimport CollisionManager from \"./CollisionManager\";\r\n\r\nclass RigidBody {\r\n    constructor(position, mass = 1.0) {\r\n        this.id = -1;\r\n        this.position = new Vector3(position);\r\n        this.velocity = new Vector3([0.0, 0.0, 0.0]);\r\n        this.acceleration = new Vector3([0.0, 0.0, 0.0]);\r\n\r\n        this.collider = new SphereCollider();\r\n\r\n        this.mass = mass;\r\n        this.enableGravity(true);\r\n\r\n        this.inCollision = false;\r\n    }\r\n\r\n    setVelocity(vel) {\r\n        this.velocity.set(vel);\r\n    }\r\n\r\n    setAcceleration(acc) {\r\n        this.acceleration.set(acc);\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.position.set(pos);\r\n    }\r\n\r\n    enableGravity(state) {\r\n        if (state)\r\n            this.gravity = 9.82;\r\n        else\r\n            this.gravity = 0.0;\r\n    }\r\n\r\n    get gravityIsEnabled () {\r\n        return this.gravity > 0.1;\r\n    }\r\n\r\n    update(timeStep) {\r\n\r\n        this.updateMotion(timeStep);\r\n        this.handlePlaneCollisions(timeStep);\r\n\r\n        this.scanForBodyCollisions(timeStep);\r\n\r\n        return true;\r\n    }\r\n\r\n    updateMotion(timeStep) {\r\n        this.velocity.set([\r\n            this.velocity.x + this.acceleration.x * timeStep,\r\n            this.velocity.y + (this.acceleration.y - this.gravity) * timeStep,\r\n            this.velocity.z + this.acceleration.z * timeStep,\r\n        ]);\r\n        this.position.set([\r\n            this.position.x + this.velocity.x * timeStep,\r\n            this.position.y + this.velocity.y * timeStep,\r\n            this.position.z + this.velocity.z * timeStep,\r\n        ]);\r\n    }\r\n\r\n    handlePlaneCollisions(timeStep) {\r\n        let planes = CollisionManager.getPlaneColliders();\r\n\r\n        let rayDir = this.velocity.normalized();\r\n        let rayOrigin = this.position.clone();\r\n\r\n        // Find closest intersectionPoint\r\n        planes.forEach((plane) => {\r\n            // If the plane intersection test returns null, no plane was found\r\n            let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\r\n            if (intersectionPoint !== null) {\r\n                // Calculate the closest distance from the rigid body collider and the plane\r\n                let distanceToPlane = Vector3.dot(plane.normal, Vector3.subtract(rayOrigin, intersectionPoint));\r\n\r\n                // Check if the sphere is intersecting the plane\r\n                if (distanceToPlane < this.collider.radius) {\r\n                    // Move the object to the plane surface\r\n                    let diff = (this.collider.radius - distanceToPlane);\r\n                    this.position.set([\r\n                        this.position.x + plane.normal.x * diff,\r\n                        this.position.y + plane.normal.y * diff,\r\n                        this.position.z + plane.normal.z * diff\r\n                    ]);\r\n\r\n                    // Calculate the bounce velocity\r\n                    let bounce = this.velocity.magnitude*0.8;\r\n                    let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir);\r\n\r\n                    this.velocity.set([\r\n                        -reflectDirection.x*bounce,\r\n                        -reflectDirection.y*bounce,\r\n                        -reflectDirection.z*bounce\r\n                    ]);\r\n                    this.position.set([\r\n                        this.position.x + this.velocity.x * timeStep,\r\n                        this.position.y + this.velocity.y * timeStep,\r\n                        this.position.z + this.velocity.z * timeStep,\r\n                    ]);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    scanForBodyCollisions(timeStep) {\r\n        // If the rigid body is not moving, don't check for target collisions\r\n        if (this.velocity.magnitude < 0.1) {\r\n            return;\r\n        }\r\n\r\n        //TODO: Optimize collision scanning (if two bodies have collided, we dont need to check collision again in this update\r\n\r\n        let rigidBodies = CollisionManager.getRigidBodies();\r\n        rigidBodies.forEach((target) => {\r\n            // Dont check for collision with itself\r\n            if (this.id !== target.id){\r\n                // Compute the distance between the two sphere colliders\r\n                let targetDistance = Vector3.distance(target.position, this.position);\r\n                // If the distance is within this collider radius and target collider radius, we have a collision\r\n                if (targetDistance < (target.collider.radius + this.collider.radius)) {\r\n                    this.handleBodyCollisions(timeStep, target, targetDistance);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    handleBodyCollisions(timeStep, target, targetDistance) {\r\n        // Get velocity directions\r\n        let thisVelocityDirection = this.velocity.normalized();\r\n        let targetVelocityDirection = target.velocity.normalized();\r\n\r\n        // Move the body outside of collision area\r\n        let diff = (this.collider.radius + target.collider.radius) - targetDistance;\r\n        this.position.set([\r\n            this.position.x - thisVelocityDirection.x * diff,\r\n            this.position.y - thisVelocityDirection.y * diff,\r\n            this.position.z - thisVelocityDirection.z * diff\r\n        ]);\r\n\r\n        // The new velocity direction is given by the vector between the two bodies\r\n        let thisDirectionAfter = Vector3.subtract(target.position, this.position).normalized();\r\n        let targetDirectionAfter = thisDirectionAfter.inverted();\r\n\r\n        // Compute a multiplier based on the angle between the before and after velocities.\r\n        // Wider angles results in lesser impact (lower multipliers)\r\n        let thisMultiplier = Math.abs(Vector3.dot(thisVelocityDirection, thisDirectionAfter));\r\n        let targetMultiplier = Math.abs(Vector3.dot(targetVelocityDirection, targetDirectionAfter));\r\n\r\n        let thisSpeedBefore = this.velocity.magnitude;\r\n        let targetSpeedBefore = target.velocity.magnitude;\r\n\r\n        // Elastic Collision Coefficients\r\n        let denominator = this.mass + target.mass;\r\n        let A = (2.0 * this.mass * (1.0 - targetMultiplier)) / denominator;\r\n        let B = ((thisMultiplier * target.mass) - this.mass) / denominator;\r\n\r\n        // Set new velocity and position for target\r\n        target.velocity.set([\r\n            thisDirectionAfter.x * thisSpeedBefore * A + targetDirectionAfter.x * targetSpeedBefore * B,\r\n            thisDirectionAfter.y * thisSpeedBefore * A + targetDirectionAfter.y * targetSpeedBefore * B,\r\n            thisDirectionAfter.z * thisSpeedBefore * A + targetDirectionAfter.z * targetSpeedBefore * B\r\n        ]);\r\n        target.position.set([\r\n            target.position.x + target.velocity.x * timeStep,\r\n            target.position.y + target.velocity.y * timeStep,\r\n            target.position.z + target.velocity.z * timeStep,\r\n        ]);\r\n\r\n        // Elastic Collision Coefficients\r\n        A = ((thisMultiplier * this.mass) - target.mass) / denominator;\r\n        B = (2.0 * target.mass * (1.0 - targetMultiplier)) / denominator;\r\n\r\n        // Set new velocity and position\r\n        this.velocity.set([\r\n            thisDirectionAfter.x * thisSpeedBefore * A + targetDirectionAfter.x * targetSpeedBefore * B,\r\n            thisDirectionAfter.y * thisSpeedBefore * A + targetDirectionAfter.y * targetSpeedBefore * B,\r\n            thisDirectionAfter.z * thisSpeedBefore * A + targetDirectionAfter.z * targetSpeedBefore * B\r\n        ]);\r\n        this.position.set([\r\n            this.position.x + this.velocity.x * timeStep,\r\n            this.position.y + this.velocity.y * timeStep,\r\n            this.position.z + this.velocity.z * timeStep,\r\n        ]);\r\n    }\r\n}\r\n\r\nexport default RigidBody;"]},"metadata":{},"sourceType":"module"}
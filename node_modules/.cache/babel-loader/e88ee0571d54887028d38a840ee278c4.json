{"ast":null,"code":"import MouseEvent from \"./MouseEvent\"; // Enum struct for handling mouse events\n\nconst MouseKey = {\n  LEFT: 1,\n  MIDDLE: 2,\n  RIGHT: 3\n};\n\nclass EventHandler {\n  constructor() {\n    MouseEvent.init();\n    let canvas2D = document.getElementById('text-canvas'); // Mouse down event function definition\n\n    canvas2D.onmousedown = function (event) {\n      // Register the event\n      MouseEvent.setMouseDownEvent(true);\n\n      if (event.which === MouseKey.LEFT) {\n        MouseEvent.setButtonPressedLeft(true);\n      }\n\n      if (event.which === MouseKey.RIGHT) {\n        MouseEvent.setButtonPressedRight(true);\n      }\n\n      if (event.which === MouseKey.MIDDLE) {\n        MouseEvent.setButtonPressedMiddle(true);\n      }\n    }; // Mouse up event function definition\n\n\n    canvas2D.onmouseup = function (event) {\n      // Register the event\n      MouseEvent.setMouseUpEvent(true);\n\n      if (event.which === MouseKey.LEFT) {\n        MouseEvent.setButtonPressedLeft(false);\n      }\n\n      if (event.which === MouseKey.RIGHT) {\n        MouseEvent.setButtonPressedRight(false);\n      }\n\n      if (event.which === MouseKey.MIDDLE) {\n        MouseEvent.setButtonPressedMiddle(false);\n      }\n    }; // Mouse leave event function definition\n\n\n    canvas2D.onmouseleave = function (event) {\n      MouseEvent.setButtonPressedLeft(false);\n      MouseEvent.setButtonPressedRight(false);\n      MouseEvent.setButtonPressedMiddle(false);\n    }; // Mouse move event function definition\n\n\n    canvas2D.onmousemove = function (event) {\n      MouseEvent.setOffsetX(event.offsetX);\n      MouseEvent.setOffsetY(event.offsetY);\n      MouseEvent.setMovementX(event.movementX);\n      MouseEvent.setMovementY(event.movementY);\n      me.movementX = event.movementX;\n      me.movementY = event.movementY;\n      me.offsetX = event.offsetX;\n      me.offsetY = event.offsetY;\n    }; // Mouse wheel event function definition\n\n\n    canvas2D.onwheel = function (event) {\n      MouseEvent.setWheelDelta(event.deltaY);\n      me.wheelDelta = event.deltaY;\n    };\n  }\n\n  static resetMouseEvents() {\n    MouseEvent.setMouseDownEvent(false);\n    MouseEvent.setMouseUpEvent(false);\n    MouseEvent.setWheelDelta(0);\n    MouseEvent.setMovementX(0);\n    MouseEvent.setMovementY(0);\n  }\n\n}\n\nexport default EventHandler;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\EventHandler.js"],"names":["MouseEvent","MouseKey","LEFT","MIDDLE","RIGHT","EventHandler","constructor","init","canvas2D","document","getElementById","onmousedown","event","setMouseDownEvent","which","setButtonPressedLeft","setButtonPressedRight","setButtonPressedMiddle","onmouseup","setMouseUpEvent","onmouseleave","onmousemove","setOffsetX","offsetX","setOffsetY","offsetY","setMovementX","movementX","setMovementY","movementY","me","onwheel","setWheelDelta","deltaY","wheelDelta","resetMouseEvents"],"mappings":"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","sourcesContent":["import MouseEvent from \"./MouseEvent\";\r\n\r\n// Enum struct for handling mouse events\r\nconst MouseKey = {\r\n    LEFT: 1,\r\n    MIDDLE: 2,\r\n    RIGHT: 3\r\n};\r\n\r\nclass EventHandler {\r\n    constructor() {\r\n        MouseEvent.init();\r\n        \r\n        let canvas2D = document.getElementById('text-canvas');\r\n        // Mouse down event function definition\r\n        canvas2D.onmousedown = function(event) {\r\n            // Register the event\r\n            MouseEvent.setMouseDownEvent(true);\r\n\r\n            if(event.which === MouseKey.LEFT) {\r\n                MouseEvent.setButtonPressedLeft(true);\r\n            }\r\n            if (event.which === MouseKey.RIGHT) {\r\n                MouseEvent.setButtonPressedRight(true);\r\n            }\r\n            if (event.which === MouseKey.MIDDLE) {\r\n                MouseEvent.setButtonPressedMiddle(true);\r\n            }\r\n        };\r\n\r\n        // Mouse up event function definition\r\n        canvas2D.onmouseup = function(event) {\r\n            // Register the event\r\n            MouseEvent.setMouseUpEvent(true);\r\n\r\n            if(event.which === MouseKey.LEFT) {\r\n                MouseEvent.setButtonPressedLeft(false);\r\n            }\r\n            if (event.which === MouseKey.RIGHT) {\r\n                MouseEvent.setButtonPressedRight(false);\r\n            }\r\n            if (event.which === MouseKey.MIDDLE) {\r\n                MouseEvent.setButtonPressedMiddle(false);\r\n            }\r\n        };\r\n\r\n        // Mouse leave event function definition\r\n        canvas2D.onmouseleave = function(event) {\r\n            MouseEvent.setButtonPressedLeft(false);\r\n            MouseEvent.setButtonPressedRight(false);\r\n            MouseEvent.setButtonPressedMiddle(false);\r\n        };\r\n\r\n        // Mouse move event function definition\r\n        canvas2D.onmousemove  = function(event) {\r\n            MouseEvent.setOffsetX(event.offsetX);\r\n            MouseEvent.setOffsetY(event.offsetY);\r\n\r\n            MouseEvent.setMovementX(event.movementX);\r\n            MouseEvent.setMovementY(event.movementY);\r\n\r\n            me.movementX = event.movementX;\r\n            me.movementY = event.movementY;\r\n\r\n            me.offsetX = event.offsetX;\r\n            me.offsetY = event.offsetY;\r\n        };\r\n\r\n        // Mouse wheel event function definition\r\n        canvas2D.onwheel = function(event) {\r\n            MouseEvent.setWheelDelta(event.deltaY);\r\n            me.wheelDelta = event.deltaY;\r\n        };\r\n    }\r\n\r\n    static resetMouseEvents() {\r\n        MouseEvent.setMouseDownEvent(false);\r\n        MouseEvent.setMouseUpEvent(false);\r\n        MouseEvent.setWheelDelta(0);\r\n        MouseEvent.setMovementX(0);\r\n        MouseEvent.setMovementY(0);\r\n    }\r\n}\r\n\r\nexport default EventHandler;"]},"metadata":{},"sourceType":"module"}
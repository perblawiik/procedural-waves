{"ast":null,"code":"import Transform from \"./Transform\";\nimport Vector3 from \"./math/Vector3\";\n\nclass SphereCollider {\n  constructor() {\n    this.transform = new Transform();\n    this.transform.setScale([1.0, 1.0, 1.0]);\n    this.radiusCoeff = 1.0;\n    this.isVisible = false;\n  }\n\n  get worldPosition() {\n    return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\n  }\n\n  get radius() {\n    return this.transform.scaling.x;\n  }\n\n  setRadius(radius) {}\n\n  setVisible(state) {\n    this.isVisible = state;\n  }\n\n}\n\nexport default SphereCollider;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\SphereCollider.js"],"names":["Transform","Vector3","SphereCollider","constructor","transform","setScale","radiusCoeff","isVisible","worldPosition","matrix","radius","scaling","x","setRadius","setVisible","state"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GAAiB,IAAIJ,SAAJ,EAAjB;AACA,SAAKI,SAAL,CAAeC,QAAf,CAAwB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAxB;AACA,SAAKC,WAAL,GAAmB,GAAnB;AAEA,SAAKC,SAAL,GAAiB,KAAjB;AACH;;AAED,MAAIC,aAAJ,GAAoB;AAChB,WAAO,IAAIP,OAAJ,CAAY,CAAC,KAAKG,SAAL,CAAeK,MAAf,CAAsB,EAAtB,CAAD,EAA4B,KAAKL,SAAL,CAAeK,MAAf,CAAsB,EAAtB,CAA5B,EAAuD,KAAKL,SAAL,CAAeK,MAAf,CAAsB,EAAtB,CAAvD,CAAZ,CAAP;AACH;;AAED,MAAIC,MAAJ,GAAc;AACV,WAAO,KAAKN,SAAL,CAAeO,OAAf,CAAuBC,CAA9B;AACH;;AAEDC,EAAAA,SAAS,CAACH,MAAD,EAAS,CAEjB;;AAEDI,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,SAAKR,SAAL,GAAiBQ,KAAjB;AACH;;AAvBgB;;AA0BrB,eAAeb,cAAf","sourcesContent":["import Transform from \"./Transform\";\r\nimport Vector3 from \"./math/Vector3\";\r\n\r\nclass SphereCollider {\r\n    constructor() {\r\n        this.transform = new Transform();\r\n        this.transform.setScale([1.0, 1.0, 1.0]);\r\n        this.radiusCoeff = 1.0;\r\n\r\n        this.isVisible = false;\r\n    }\r\n\r\n    get worldPosition() {\r\n        return new Vector3([this.transform.matrix[12], this.transform.matrix[13], this.transform.matrix[14]]);\r\n    }\r\n\r\n    get radius () {\r\n        return this.transform.scaling.x;\r\n    }\r\n\r\n    setRadius(radius) {\r\n\r\n    }\r\n\r\n    setVisible(state) {\r\n        this.isVisible = state;\r\n    }\r\n}\r\n\r\nexport default SphereCollider;"]},"metadata":{},"sourceType":"module"}
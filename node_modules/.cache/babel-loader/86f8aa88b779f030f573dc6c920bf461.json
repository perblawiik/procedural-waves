{"ast":null,"code":"//TODO: Implement a sky box background\n//TODO: Implement cubic shadow mapping\n//TODO: Implement a ParticleSystem component\n// JavaScript components\nimport GameEditor from \"./GameEditor\";\nimport Time from \"./Time\";\nimport Raycast from \"./Raycast\";\nimport EventHandler from \"./events/EventHandler\";\nimport MouseEvent from \"./events/MouseEvent\";\nimport Scene from \"./Scene\";\nimport Camera from \"./Camera\";\nimport GameObject from \"./GameObject\";\nimport Mesh from \"./Mesh\";\nimport PointLightSource from \"./PointLightSource\";\nimport SphereCollider from \"./SphereCollider\";\nimport Bullets from \"./Bullets\";\nimport Matrix4 from \"./math/Matrix4\"; // Shader\n\nimport ShaderHandle from \"./ShaderHandle\";\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\nimport AmbientShader from \"./shaders/AmbientShader\";\nimport RigidBody from \"./RigidBody\";\n/***** Settings *****/\n// Default camera position and rotation\n\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\nconst CAMERA_ROTATION = [0.0, 0.0, 0.0]; // Enum struct for creating different shapes\n\nconst SHAPE = {\n  CUBE: 0,\n  SPHERE: 1,\n  CYLINDER_SMOOTH: 2,\n  CYLINDER_SHARP: 3,\n  PLANE: 4\n};\nconst MS_PER_UPDATE = 2.0;\n\nclass Engine {\n  constructor() {\n    // Scenes works like blocks in the game world.\n    // The active scenes are based on the cameras distance to the origin of each scene.\n    this.scenes = [];\n    this.shaders = new Map();\n    this.viewportAspectRatio = 1.0;\n    this.lag = 0.0;\n  }\n  /*\r\n  * @brief This is the engines main update function and is called every iteration of the main loop\r\n  */\n\n\n  run() {\n    // Update game loop clock\n    Time.update(); // Time start of the loop\n\n    let startTime = Time.now; // Process mouse and keyboard events\n\n    this.processInputEvents(); // Add elapsed time to the lag variable\n\n    this.lag += Time.deltaTime; // Make sure the update function is called on a constant rate\n\n    while (this.lag >= MS_PER_UPDATE) {\n      // Updates game object animations, ai, physics, etc.\n      this.update(); // Clear momentary events\n\n      EventHandler.resetMouseEvents();\n      this.lag -= MS_PER_UPDATE;\n    } // Render graphics\n\n\n    this.render(this.lag / MS_PER_UPDATE); // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\n    //while ((Time.now - startTime) < 16.0) ; // Sleep\n  }\n\n  update() {\n    this.scenes.forEach(scene => {\n      scene.update();\n    }); //// RAYCAST BULLETS UPDATE ////\n\n    this.raycastBullets.update(); //// RAYCAST BULLETS UPDATE ////\n  }\n\n  render(residualLag) {\n    // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\n    this.updateViewportDimensions(); // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Draw scenes\n\n    this.gl.enable(this.gl.DEPTH_TEST);\n    this.scenes.forEach(scene => {\n      scene.updateLightPositions();\n      scene.draw();\n    }); //// RAYCAST BULLETS RENDER ////\n\n    this.raycastBullets.render(this.shaders.get(\"phong\")); //// RAYCAST BULLETS RENDER ////\n    // Display fps and other useful information\n\n    this.editor.render(this.scenes);\n  }\n\n  processInputEvents() {\n    // Process editor commands\n    this.editor.processUserInput(); // If left mouse button is pressed, cast a ray from the mouse cursor position\n\n    if (MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\n      // Create a raycast bullet for visualization purpose\n      let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height); // Offset the bullet start point\n\n      const bulletOrigin = [ray.origin.x + ray.direction.x * 2.0, ray.origin.y + ray.direction.y * 2.0, ray.origin.z + ray.direction.z * 2.0];\n      this.raycastBullets.addBullet(bulletOrigin, ray.direction.clone());\n    }\n  } // This function is called before the game loop is started\n\n\n  preload() {\n    // Initiate static classes\n    Time.init();\n    EventHandler.init(); // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\n\n    this.setUpWebGL(); // Create shaders\n\n    let mainShader = new ShaderHandle(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\n    let ambientShader = new ShaderHandle(this.canvas, AmbientShader.vertex, AmbientShader.fragment); // Add them to the shaders container\n\n    this.shaders.set(\"phong\", mainShader);\n    this.shaders.set(\"ambient\", ambientShader); // Initialize the main camera\n\n    this.camera = new Camera(this.shaders);\n    this.camera.setPosition(CAMERA_POSITION);\n    this.camera.setRotation(CAMERA_ROTATION); // Initialize the game engine editor used for managing the game scenes\n\n    this.editor = new GameEditor(this.gl, this.context2D, this.shaders, this.camera, this.canvas); // Create and set the projection matrix for the shaders\n\n    this.fieldOfView = Math.PI / 6;\n    this.viewportAspectRatio = this.canvas.width / this.canvas.height;\n    this.refreshProjectionMatrix(); // Create a scene for the objects\n\n    let defaultScene = new Scene(this.shaders); // Create scene objects\n\n    this.loadDefaultSceneObjects(defaultScene); // Add to scenes\n\n    this.scenes.push(defaultScene); // Create a bullet for displaying raycast\n\n    let bulletModel = this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Cyan Sphere',\n      scale: [0.5, 0.5, 0.5],\n      position: [0.0, 0.0, 0.0],\n      color: [0.0, 1.0, 1.0]\n    });\n    this.raycastBullets = new Bullets(bulletModel, 50.0, 200.0);\n    this.raycastBullets.enableGravity();\n    this.rigidBody = new RigidBody([0.0, 10.0, 0.0]);\n  }\n\n  updateViewportDimensions() {\n    // Calculate current aspect ratio\n    let currentAspectRatio = this.canvas.width / this.canvas.height; // Check if the aspect ratio has changed before going further\n\n    if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001) return; // Save new aspect ratio\n\n    this.viewportAspectRatio = currentAspectRatio; // Refresh the projection matrix and send set it in the shaders\n\n    this.refreshProjectionMatrix(); // Update the viewport dimensions to the canvas width\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  createGameObject(settings) {\n    let mesh = new Mesh(this.gl);\n\n    if (settings.shape === SHAPE.CUBE) {\n      mesh.createCube();\n    } else if (settings.shape === SHAPE.SPHERE) {\n      mesh.createSphere(32);\n    } else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\n      mesh.createCylinderSmooth(32, 1, 1, 2);\n    } else if (settings.shape === SHAPE.CYLINDER_SHARP) {\n      mesh.createCylinderSharp(8, 1, 2);\n    } else if (settings.shape === SHAPE.PLANE) {\n      mesh.createPlane(50, 50);\n    }\n\n    mesh.setColor(settings.color);\n    let obj = new GameObject(settings.name);\n    obj.setPosition(settings.position);\n    obj.setScale(settings.scale);\n    obj.addMesh(mesh);\n    return obj;\n  }\n\n  createPointLightSource(settings) {\n    // Create the light source component\n    let lightSource = new PointLightSource(settings.name);\n    lightSource.setPosition(settings.position);\n    lightSource.setScale(settings.scale);\n    lightSource.setLightColor(settings.color);\n    lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic); // Create a model for the light source\n\n    let lightSourceModel = new Mesh(this.gl);\n    lightSourceModel.createSphere(8);\n    lightSourceModel.setColor(settings.color);\n    lightSource.addMesh(lightSourceModel);\n    return lightSource;\n  }\n\n  loadDefaultSceneObjects(scene) {\n    // Create a red cube\n    let cube = this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Red Cube',\n      scale: [1.0, 1.0, 1.0],\n      position: [0.0, 1.5, 0.0],\n      color: [1.0, 0.0, 0.0]\n    }); // Add rotation to the cube\n\n    cube.update = function () {\n      this.rotate([0.0, 0.1, 0.0]);\n    };\n\n    cube.addCollider(new SphereCollider());\n    this.editor.addIntersectableObject(cube); // Add cube to scene\n\n    scene.addGameObject(cube); // Create a green sphere\n\n    let sphere = this.createGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [1.0, 1.0, 1.0],\n      position: [4.0, 2.0, 2.0],\n      color: [0.0, 1.0, 0.0]\n    });\n    sphere.addCollider(new SphereCollider());\n    this.editor.addIntersectableObject(sphere); // Add sphere to scene\n\n    scene.addGameObject(sphere); // Create a smooth magenta cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SMOOTH,\n      name: 'Magenta Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-4.0, 2.0, 2.0],\n      color: [1.0, 0.0, 1.0]\n    })); // Create a sharp orange cylinder\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CYLINDER_SHARP,\n      name: 'Orange Cylinder',\n      scale: [1.0, 1.0, 1.0],\n      position: [-8.0, 2.0, 2.0],\n      color: [1.0, 0.5, 0.0]\n    })); // Create gray floor\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Roof',\n      scale: [40.0, 0.1, 40.0],\n      position: [0.0, 0.0, 0.0],\n      color: [0.75, 0.75, 0.75]\n    })); // Create blue walls\n\n    let wallColor = [0.0, 0.2, 1.0];\n    let wallHeight = 10.0;\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Left Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [-40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Right Wall',\n      scale: [0.1, wallHeight, 20.0],\n      position: [40.0, wallHeight, -20.0],\n      color: wallColor\n    }));\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Back Wall',\n      scale: [40.0, wallHeight, 0.1],\n      position: [0.0, wallHeight, -40.0],\n      color: wallColor\n    })); // Create gray roof\n\n    scene.addGameObject(this.createGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [40.0, 0.1, 20.0],\n      position: [0.0, wallHeight * 2.0, -20.0],\n      color: [0.65, 0.65, 0.65]\n    })); // Create a point lights for the scene\n    // Add the light source to our scene\n\n    let lampRadius = 0.5;\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Middle Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Right Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n    scene.addLightSource(this.createPointLightSource({\n      name: \"Left Lamp\",\n      scale: [lampRadius, lampRadius, lampRadius],\n      position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\n      color: [1.0, 1.0, 1.0],\n      attenuation: {\n        // The attenuation constants should make the light travel a maximum distance of 325\n        kLinear: 0.014,\n        kQuadratic: 0.0007\n      }\n    }));\n  }\n\n  setUpWebGL() {\n    // 2D Canvas for text display\n    this.context2D = document.getElementById('text-canvas').getContext('2d'); // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    } // Set the viewport dimensions to the same as the canvas\n\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to dark blue, fully opaque\n\n    this.gl.clearColor(0.02, 0.02, 0.02, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n  }\n\n  refreshProjectionMatrix() {\n    // Create a new projection matrix\n    this.projectionMatrix = Matrix4.perspective(this.fieldOfView, this.viewportAspectRatio, 0.1, 10000.0); // Update the projection matrix in the editor\n\n    this.editor.projectionMatrix = this.projectionMatrix; // Update the projection matrix for the shaders\n\n    this.shaders.forEach(shader => {\n      shader.activate();\n      shader.setProjectionUniform(this.projectionMatrix);\n    });\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\Engine.js"],"names":["GameEditor","Time","Raycast","EventHandler","MouseEvent","Scene","Camera","GameObject","Mesh","PointLightSource","SphereCollider","Bullets","Matrix4","ShaderHandle","PhongLightingShader","AmbientShader","RigidBody","CAMERA_POSITION","CAMERA_ROTATION","SHAPE","CUBE","SPHERE","CYLINDER_SMOOTH","CYLINDER_SHARP","PLANE","MS_PER_UPDATE","Engine","constructor","scenes","shaders","Map","viewportAspectRatio","lag","run","update","startTime","now","processInputEvents","deltaTime","resetMouseEvents","render","forEach","scene","raycastBullets","residualLag","updateViewportDimensions","gl","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","enable","DEPTH_TEST","updateLightPositions","draw","get","editor","processUserInput","mouseDown","isPressed","leftButton","ray","raycastFromMouseCursor","offsetX","offsetY","camera","transform","projectionMatrix","canvas","width","height","bulletOrigin","origin","x","direction","y","z","addBullet","clone","preload","init","setUpWebGL","mainShader","vertex","fragment","ambientShader","set","setPosition","setRotation","context2D","fieldOfView","Math","PI","refreshProjectionMatrix","defaultScene","loadDefaultSceneObjects","push","bulletModel","createGameObject","shape","name","scale","position","color","enableGravity","rigidBody","currentAspectRatio","abs","viewport","settings","mesh","createCube","createSphere","createCylinderSmooth","createCylinderSharp","createPlane","setColor","obj","setScale","addMesh","createPointLightSource","lightSource","setLightColor","setAttenuation","attenuation","kLinear","kQuadratic","lightSourceModel","cube","rotate","addCollider","addIntersectableObject","addGameObject","sphere","wallColor","wallHeight","lampRadius","addLightSource","document","getElementById","getContext","console","log","alert","clearColor","CULL_FACE","cullFace","BACK","frontFace","CCW","perspective","shader","activate","setProjectionUniform"],"mappings":"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","sourcesContent":["//TODO: Implement a sky box background\r\n//TODO: Implement cubic shadow mapping\r\n//TODO: Implement a ParticleSystem component\r\n\r\n// JavaScript components\r\nimport GameEditor from \"./GameEditor\";\r\nimport Time from \"./Time\";\r\nimport Raycast from \"./Raycast\";\r\n\r\nimport EventHandler from \"./events/EventHandler\";\r\nimport MouseEvent from \"./events/MouseEvent\";\r\n\r\nimport Scene from \"./Scene\";\r\n\r\nimport Camera from \"./Camera\";\r\nimport GameObject from \"./GameObject\";\r\nimport Mesh from \"./Mesh\";\r\nimport PointLightSource from \"./PointLightSource\";\r\nimport SphereCollider from \"./SphereCollider\";\r\nimport Bullets from \"./Bullets\";\r\n\r\nimport Matrix4 from \"./math/Matrix4\";\r\n\r\n// Shader\r\nimport ShaderHandle from \"./ShaderHandle\";\r\nimport PhongLightingShader from \"./shaders/PhongLightingShader\";\r\nimport AmbientShader from \"./shaders/AmbientShader\";\r\nimport RigidBody from \"./RigidBody\";\r\n\r\n/***** Settings *****/\r\n// Default camera position and rotation\r\nconst CAMERA_POSITION = [0.0, 5.0, 40.0];\r\nconst CAMERA_ROTATION = [0.0, 0.0, 0.0];\r\n\r\n// Enum struct for creating different shapes\r\nconst SHAPE = {\r\n    CUBE: 0,\r\n    SPHERE: 1,\r\n    CYLINDER_SMOOTH: 2,\r\n    CYLINDER_SHARP: 3,\r\n    PLANE: 4\r\n};\r\n\r\nconst MS_PER_UPDATE = 2.0;\r\n\r\nclass Engine {\r\n    constructor() {\r\n        // Scenes works like blocks in the game world.\r\n        // The active scenes are based on the cameras distance to the origin of each scene.\r\n        this.scenes = [];\r\n        this.shaders = new Map();\r\n\r\n        this.viewportAspectRatio = 1.0;\r\n        this.lag = 0.0;\r\n    }\r\n\r\n    /*\r\n    * @brief This is the engines main update function and is called every iteration of the main loop\r\n    */\r\n    run() {\r\n        // Update game loop clock\r\n        Time.update();\r\n\r\n        // Time start of the loop\r\n        let startTime =  Time.now;\r\n\r\n        // Process mouse and keyboard events\r\n        this.processInputEvents();\r\n\r\n        // Add elapsed time to the lag variable\r\n        this.lag += Time.deltaTime;\r\n\r\n        // Make sure the update function is called on a constant rate\r\n        while (this.lag >= MS_PER_UPDATE) {\r\n            // Updates game object animations, ai, physics, etc.\r\n            this.update();\r\n            // Clear momentary events\r\n            EventHandler.resetMouseEvents();\r\n            this.lag -= MS_PER_UPDATE;\r\n        }\r\n\r\n        // Render graphics\r\n        this.render(this.lag/MS_PER_UPDATE);\r\n\r\n        // Hold each frame for a specified number of milliseconds (16 ms locks on roughly 60 fps)\r\n        //while ((Time.now - startTime) < 16.0) ; // Sleep\r\n    }\r\n\r\n    update() {\r\n        this.scenes.forEach((scene) => {\r\n            scene.update();\r\n        });\r\n\r\n        //// RAYCAST BULLETS UPDATE ////\r\n        this.raycastBullets.update();\r\n        //// RAYCAST BULLETS UPDATE ////\r\n    }\r\n\r\n    render(residualLag) {\r\n        // Set the viewport to the canvas dimensions and update the aspect ratio for the projection matrix\r\n        this.updateViewportDimensions();\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n\r\n        // Draw scenes\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        this.scenes.forEach((scene) => {\r\n            scene.updateLightPositions();\r\n            scene.draw();\r\n        });\r\n\r\n        //// RAYCAST BULLETS RENDER ////\r\n        this.raycastBullets.render(this.shaders.get(\"phong\"));\r\n        //// RAYCAST BULLETS RENDER ////\r\n\r\n        // Display fps and other useful information\r\n        this.editor.render(this.scenes);\r\n    }\r\n\r\n    processInputEvents() {\r\n        // Process editor commands\r\n        this.editor.processUserInput();\r\n\r\n        // If left mouse button is pressed, cast a ray from the mouse cursor position\r\n        if(MouseEvent.mouseDown && MouseEvent.isPressed.leftButton) {\r\n            // Create a raycast bullet for visualization purpose\r\n            let ray = Raycast.raycastFromMouseCursor(MouseEvent.offsetX, MouseEvent.offsetY, this.camera.transform, this.projectionMatrix, this.canvas.width, this.canvas.height);\r\n            // Offset the bullet start point\r\n            const bulletOrigin = [ray.origin.x + ray.direction.x*2.0, ray.origin.y + ray.direction.y*2.0, ray.origin.z + ray.direction.z*2.0];\r\n            this.raycastBullets.addBullet(bulletOrigin, ray.direction.clone());\r\n        }\r\n    }\r\n\r\n    // This function is called before the game loop is started\r\n    preload() {\r\n        // Initiate static classes\r\n        Time.init();\r\n        EventHandler.init();\r\n\r\n        // Set up webgl 2D and 3D context from html canvas. Viewport and render settings are also set.\r\n        this.setUpWebGL();\r\n\r\n        // Create shaders\r\n        let mainShader = new ShaderHandle(this.canvas, PhongLightingShader.vertex, PhongLightingShader.fragment);\r\n        let ambientShader = new ShaderHandle(this.canvas, AmbientShader.vertex, AmbientShader.fragment);\r\n\r\n        // Add them to the shaders container\r\n        this.shaders.set(\"phong\", mainShader);\r\n        this.shaders.set(\"ambient\", ambientShader);\r\n\r\n        // Initialize the main camera\r\n        this.camera = new Camera(this.shaders);\r\n        this.camera.setPosition(CAMERA_POSITION);\r\n        this.camera.setRotation(CAMERA_ROTATION);\r\n\r\n        // Initialize the game engine editor used for managing the game scenes\r\n        this.editor = new GameEditor(this.gl, this.context2D, this.shaders, this.camera, this.canvas);\r\n\r\n        // Create and set the projection matrix for the shaders\r\n        this.fieldOfView = Math.PI / 6;\r\n        this.viewportAspectRatio = this.canvas.width / this.canvas.height;\r\n        this.refreshProjectionMatrix();\r\n\r\n        // Create a scene for the objects\r\n        let defaultScene = new Scene(this.shaders);\r\n\r\n        // Create scene objects\r\n        this.loadDefaultSceneObjects(defaultScene);\r\n        // Add to scenes\r\n        this.scenes.push(defaultScene);\r\n\r\n        // Create a bullet for displaying raycast\r\n        let bulletModel = this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Cyan Sphere',\r\n            scale: [0.5, 0.5, 0.5],\r\n            position: [0.0, 0.0, 0.0],\r\n            color: [0.0, 1.0, 1.0]\r\n        });\r\n\r\n        this.raycastBullets = new Bullets(bulletModel, 50.0, 200.0);\r\n        this.raycastBullets.enableGravity();\r\n\r\n\r\n        this.rigidBody = new RigidBody([0.0, 10.0, 0.0]);\r\n    }\r\n\r\n    updateViewportDimensions() {\r\n        // Calculate current aspect ratio\r\n        let currentAspectRatio = this.canvas.width / this.canvas.height;\r\n\r\n        // Check if the aspect ratio has changed before going further\r\n        if (Math.abs(this.viewportAspectRatio - currentAspectRatio) < 0.001)\r\n            return;\r\n\r\n        // Save new aspect ratio\r\n        this.viewportAspectRatio = currentAspectRatio;\r\n\r\n        // Refresh the projection matrix and send set it in the shaders\r\n        this.refreshProjectionMatrix();\r\n\r\n        // Update the viewport dimensions to the canvas width\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    createGameObject (settings) {\r\n        let mesh = new Mesh(this.gl);\r\n        if (settings.shape === SHAPE.CUBE) {\r\n            mesh.createCube();\r\n        }\r\n        else if (settings.shape === SHAPE.SPHERE) {\r\n            mesh.createSphere(32);\r\n        }\r\n        else if (settings.shape === SHAPE.CYLINDER_SMOOTH) {\r\n            mesh.createCylinderSmooth(32, 1, 1, 2);\r\n        }\r\n        else if(settings.shape === SHAPE.CYLINDER_SHARP) {\r\n            mesh.createCylinderSharp(8, 1, 2);\r\n        }\r\n        else if (settings.shape === SHAPE.PLANE) {\r\n            mesh.createPlane(50,50);\r\n        }\r\n        mesh.setColor(settings.color);\r\n\r\n        let obj = new GameObject (settings.name);\r\n        obj.setPosition(settings.position);\r\n        obj.setScale(settings.scale);\r\n        obj.addMesh(mesh);\r\n\r\n        return obj;\r\n    }\r\n\r\n    createPointLightSource(settings) {\r\n        // Create the light source component\r\n        let lightSource = new PointLightSource(settings.name);\r\n        lightSource.setPosition(settings.position);\r\n        lightSource.setScale(settings.scale);\r\n        lightSource.setLightColor(settings.color);\r\n        lightSource.setAttenuation(settings.attenuation.kLinear, settings.attenuation.kQuadratic);\r\n\r\n        // Create a model for the light source\r\n        let lightSourceModel = new Mesh(this.gl);\r\n        lightSourceModel.createSphere(8);\r\n        lightSourceModel.setColor(settings.color);\r\n        lightSource.addMesh(lightSourceModel);\r\n\r\n        return lightSource;\r\n    }\r\n\r\n    loadDefaultSceneObjects(scene) {\r\n        // Create a red cube\r\n        let cube = this.createGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Red Cube',\r\n            scale: [1.0, 1.0, 1.0],\r\n            position: [0.0, 1.5, 0.0],\r\n            color: [1.0, 0.0, 0.0]\r\n        });\r\n        // Add rotation to the cube\r\n        cube.update = function() {\r\n            this.rotate([0.0, 0.1, 0.0]);\r\n        };\r\n        cube.addCollider(new SphereCollider());\r\n        this.editor.addIntersectableObject(cube);\r\n        // Add cube to scene\r\n        scene.addGameObject(cube);\r\n\r\n        // Create a green sphere\r\n        let sphere = this.createGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Green Sphere',\r\n            scale: [1.0, 1.0, 1.0],\r\n            position: [4.0, 2.0, 2.0],\r\n            color: [0.0, 1.0, 0.0]\r\n        });\r\n        sphere.addCollider(new SphereCollider());\r\n        this.editor.addIntersectableObject(sphere);\r\n        // Add sphere to scene\r\n        scene.addGameObject(sphere);\r\n\r\n        // Create a smooth magenta cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SMOOTH,\r\n                name: 'Magenta Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-4.0, 2.0, 2.0],\r\n                color: [1.0, 0.0, 1.0]\r\n            })\r\n        );\r\n\r\n        // Create a sharp orange cylinder\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CYLINDER_SHARP,\r\n                name: 'Orange Cylinder',\r\n                scale: [1.0, 1.0, 1.0],\r\n                position: [-8.0, 2.0, 2.0],\r\n                color: [1.0, 0.5, 0.0]\r\n            })\r\n        );\r\n\r\n        // Create gray floor\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Roof',\r\n                scale: [40.0, 0.1, 40.0],\r\n                position: [0.0, 0.0, 0.0],\r\n                color: [0.75, 0.75, 0.75]\r\n            })\r\n        );\r\n\r\n        // Create blue walls\r\n        let wallColor = [0.0, 0.2, 1.0];\r\n        let wallHeight = 10.0;\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Left Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [-40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Right Wall',\r\n                scale: [0.1, wallHeight, 20.0],\r\n                position: [40.0, wallHeight, -20.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Back Wall',\r\n                scale: [40.0, wallHeight, 0.1],\r\n                position: [0.0, wallHeight, -40.0],\r\n                color: wallColor\r\n            })\r\n        );\r\n\r\n        // Create gray roof\r\n        scene.addGameObject(\r\n            this.createGameObject({\r\n                shape: SHAPE.CUBE,\r\n                name: 'Floor',\r\n                scale: [40.0, 0.1, 20.0],\r\n                position: [0.0, wallHeight * 2.0, -20.0],\r\n                color: [0.65, 0.65, 0.65]\r\n            })\r\n        );\r\n\r\n        // Create a point lights for the scene\r\n        // Add the light source to our scene\r\n        let lampRadius = 0.5;\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Middle Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [0.0, 2.0 * wallHeight - lampRadius, -35.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Right Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n        scene.addLightSource(this.createPointLightSource({\r\n            name: \"Left Lamp\",\r\n            scale: [lampRadius, lampRadius, lampRadius],\r\n            position: [-37.5, 2.0 * wallHeight - lampRadius, -15.0],\r\n            color: [1.0, 1.0, 1.0],\r\n            attenuation: { // The attenuation constants should make the light travel a maximum distance of 325\r\n                kLinear: 0.014,\r\n                kQuadratic: 0.0007\r\n            }\r\n        }));\r\n    }\r\n\r\n    setUpWebGL() {\r\n        // 2D Canvas for text display\r\n        this.context2D = document.getElementById('text-canvas').getContext('2d');\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        // Set the viewport dimensions to the same as the canvas\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to dark blue, fully opaque\r\n        this.gl.clearColor(0.02, 0.02, 0.02, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n    }\r\n\r\n    refreshProjectionMatrix() {\r\n        // Create a new projection matrix\r\n        this.projectionMatrix = Matrix4.perspective(this.fieldOfView, this.viewportAspectRatio, 0.1, 10000.0);\r\n\r\n        // Update the projection matrix in the editor\r\n        this.editor.projectionMatrix = this.projectionMatrix;\r\n\r\n        // Update the projection matrix for the shaders\r\n        this.shaders.forEach((shader) => {\r\n            shader.activate();\r\n            shader.setProjectionUniform(this.projectionMatrix);\r\n        });\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}
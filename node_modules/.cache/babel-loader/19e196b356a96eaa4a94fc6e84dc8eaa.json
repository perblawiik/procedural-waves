{"ast":null,"code":"import SphereCollider from \"./SphereCollider\";\nimport Vector3 from \"./math/Vector3\";\nimport Raycast from \"./Raycast\";\n\nclass RigidBody {\n  constructor(position, mass = 1.0) {\n    this.position = new Vector3(position);\n    this.velocity = new Vector3([0.0, 0.0, 0.0]);\n    this.acceleration = new Vector3([0.0, 0.0, 0.0]);\n    this.collider = new SphereCollider();\n    this.mass = mass;\n    this.enableGravity(true);\n  }\n\n  setVelocity(vel) {\n    this.velocity.set(vel);\n  }\n\n  setAcceleration(acc) {\n    this.acceleration.set(acc);\n  }\n\n  setPosition(pos) {\n    this.position.set(pos);\n  }\n\n  enableGravity(state) {\n    if (state) this.gravity = 9.82;else this.gravity = 0.0;\n  }\n\n  get gravityIsEnabled() {\n    return this.gravity > 0.1;\n  }\n\n  update(timeStep) {\n    //if (this.velocity.magnitude < 0.1)\n    //return false;\n    let nextVelocity = [this.velocity.x + this.acceleration.x * timeStep, this.velocity.y + (this.acceleration.y - this.gravity) * timeStep, this.velocity.z + this.acceleration.z * timeStep];\n    this.velocity.set(nextVelocity);\n    let nextPosition = [this.position.x + this.velocity.x * timeStep, this.position.y + this.velocity.y * timeStep, this.position.z + this.velocity.z * timeStep];\n    this.position.set(nextPosition);\n    this.handleCollision();\n    return true;\n  }\n\n  handleCollision() {\n    let planes = [{\n      normal: new Vector3([0.0, 1.0, 0.0]),\n      offset: 0.0\n    }, {\n      normal: new Vector3([0.0, 0.0, 1.0]),\n      offset: 0.0\n    }];\n    let rayDir = this.velocity.normalized();\n    let rayOrigin = this.position.clone();\n    let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\n\n    if (intersectionPoint !== null) {\n      if (Vector3.distance(intersectionPoint, this.position) < this.collider.radius * 4.0) {\n        let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir);\n        let bounce = -this.velocity.magnitude * 0.75;\n        this.setVelocity([reflectDirection.x * bounce, reflectDirection.y * bounce, reflectDirection.z * bounce]);\n      }\n    }\n  }\n\n}\n\nexport default RigidBody;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\RigidBody.js"],"names":["SphereCollider","Vector3","Raycast","RigidBody","constructor","position","mass","velocity","acceleration","collider","enableGravity","setVelocity","vel","set","setAcceleration","acc","setPosition","pos","state","gravity","gravityIsEnabled","update","timeStep","nextVelocity","x","y","z","nextPosition","handleCollision","planes","normal","offset","rayDir","normalized","rayOrigin","clone","intersectionPoint","planeIntersectionTest","plane","distance","radius","reflectDirection","subtract","multipleBy","dot","bounce","magnitude"],"mappings":"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","sourcesContent":["import SphereCollider from \"./SphereCollider\";\r\nimport Vector3 from \"./math/Vector3\";\r\nimport Raycast from \"./Raycast\";\r\n\r\nclass RigidBody {\r\n    constructor(position, mass = 1.0) {\r\n        this.position = new Vector3(position);\r\n        this.velocity = new Vector3([0.0, 0.0, 0.0]);\r\n        this.acceleration = new Vector3([0.0, 0.0, 0.0]);\r\n\r\n        this.collider = new SphereCollider();\r\n\r\n        this.mass = mass;\r\n        this.enableGravity(true);\r\n    }\r\n\r\n    setVelocity(vel) {\r\n        this.velocity.set(vel);\r\n    }\r\n\r\n    setAcceleration(acc) {\r\n        this.acceleration.set(acc);\r\n    }\r\n\r\n    setPosition(pos) {\r\n        this.position.set(pos);\r\n    }\r\n\r\n    enableGravity(state) {\r\n        if (state)\r\n            this.gravity = 9.82;\r\n        else\r\n            this.gravity = 0.0;\r\n    }\r\n\r\n    get gravityIsEnabled () {\r\n        return this.gravity > 0.1;\r\n    }\r\n\r\n    update(timeStep) {\r\n        //if (this.velocity.magnitude < 0.1)\r\n            //return false;\r\n\r\n        let nextVelocity = [\r\n            this.velocity.x + this.acceleration.x * timeStep,\r\n            this.velocity.y + (this.acceleration.y - this.gravity) * timeStep,\r\n            this.velocity.z + this.acceleration.z * timeStep,\r\n        ];\r\n        this.velocity.set(nextVelocity);\r\n\r\n        let nextPosition = [\r\n            this.position.x + this.velocity.x * timeStep,\r\n            this.position.y + this.velocity.y * timeStep,\r\n            this.position.z + this.velocity.z * timeStep,\r\n        ];\r\n        this.position.set(nextPosition);\r\n\r\n        this.handleCollision();\r\n\r\n        return true;\r\n    }\r\n\r\n    handleCollision() {\r\n        let planes = [\r\n            {\r\n                normal: new Vector3([0.0, 1.0, 0.0]),\r\n                offset: 0.0\r\n            },\r\n            {\r\n                normal: new Vector3([0.0, 0.0, 1.0]),\r\n                offset: 0.0\r\n            }\r\n        ];\r\n\r\n        let rayDir = this.velocity.normalized();\r\n        let rayOrigin = this.position.clone();\r\n\r\n        let intersectionPoint = Raycast.planeIntersectionTest(rayDir, rayOrigin, plane);\r\n        if (intersectionPoint !== null) {\r\n            if (Vector3.distance(intersectionPoint, this.position) < this.collider.radius*4.0) {\r\n\r\n                let reflectDirection = Vector3.subtract(plane.normal.clone().multipleBy(2.0 * Vector3.dot(plane.normal, rayDir)), rayDir);\r\n                let bounce = -this.velocity.magnitude*0.75;\r\n\r\n                this.setVelocity([\r\n                    reflectDirection.x*bounce,\r\n                    reflectDirection.y*bounce,\r\n                    reflectDirection.z*bounce\r\n                ]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default RigidBody;"]},"metadata":{},"sourceType":"module"}
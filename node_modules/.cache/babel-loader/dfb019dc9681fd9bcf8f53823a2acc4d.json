{"ast":null,"code":"class FragmentShader {\n  constructor() {\n    this.file = [// Float precision\n    \"precision mediump float;\", // Fragment shader input variables\n    \"varying vec2 TexCoords;\", \"varying vec3 Normal;\", \"varying vec3 FragPosition;\", \"varying vec3 DiffuseColor;\", //\"varying vec4 FragPosLightSpace;\",\n    \"\", // Shader inputs\n    \"uniform vec3 viewPosition;\", //\"uniform vec3 lightPosition;\",\n    \"vec3 lightPosition = vec3(0.0, 100.0, 0.0);\", //\"vec3 viewPosition = vec3(0.0, 0.0, 0.0);\",\n    \"vec3 lightColor = vec3(1.0, 1.0, 1.0);\", \"\", \"void main() {\", \"\", \"   vec3 viewDirection = normalize(viewPosition - FragPosition);\", \"   vec3 lightDirection = normalize(lightPosition - FragPosition);\", \"   vec3 reflectDirection = reflect(-lightDirection, Normal);\", //\"   vec3 reflectDirection = normalize(2.0*dot(Normal,lightDirection)*Normal - lightDirection);\",\n    \"\", // Ambient lighting\n    \"   float ambientStrength = 0.1;\", \"   vec3 ambient = ambientStrength * lightColor;\", \"\", // Diffuse lighting\n    \"   float diff = max(dot(Normal, lightDirection), 0.0);\", \"   vec3 diffuse = (diff * lightColor);\", \"\", // Specular lighting\n    \"   float specularStrength = 0.5;\", \"   float shininess = 32.0;\", \"   float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\", \"   vec3 specular = specularStrength * spec * lightColor;\", \"\", // Calculate the intensity decrement\n    \"   float dist = distance(lightPosition, FragPosition);\", \"   float intensity = min(80.0 / dist, 1.0);\", // Phong lighting model\n    \"   vec3 phong = (ambient + (diffuse + specular)) * DiffuseColor * intensity;\", // Final shaded color (texture * lighting)\n    \"\tgl_FragColor = vec4 (phong, 1.0);\", \"}\"].join(\"\\n\");\n  }\n\n}\n\nexport default FragmentShader;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\bluebox\\shaders\\FragmentShader.js"],"names":["FragmentShader","constructor","file","join"],"mappings":"AAEA,MAAMA,cAAN,CAAqB;AAEjBC,EAAAA,WAAW,GAAG;AACV,SAAKC,IAAL,GAAY,CACR;AACA,8BAFQ,EAGR;AACA,6BAJQ,EAKR,sBALQ,EAMR,4BANQ,EAOR,4BAPQ,EAQR;AACA,MATQ,EAUR;AACA,gCAXQ,EAYR;AACA,iDAbQ,EAcR;AACA,4CAfQ,EAgBR,EAhBQ,EAiBR,eAjBQ,EAkBR,EAlBQ,EAmBR,iEAnBQ,EAoBR,mEApBQ,EAqBR,8DArBQ,EAsBR;AACA,MAvBQ,EAwBR;AACA,qCAzBQ,EA0BR,iDA1BQ,EA2BR,EA3BQ,EA4BR;AACA,4DA7BQ,EA8BR,wCA9BQ,EA+BR,EA/BQ,EAgCR;AACA,sCAjCQ,EAkCR,4BAlCQ,EAmCR,iFAnCQ,EAoCR,0DApCQ,EAqCR,EArCQ,EAsCR;AACA,4DAvCQ,EAwCR,6CAxCQ,EAyCR;AACA,kFA1CQ,EA2CR;AACA,wCA5CQ,EA6CR,GA7CQ,EA8CVC,IA9CU,CA8CL,IA9CK,CAAZ;AA+CH;;AAlDgB;;AAqDrB,eAAeH,cAAf","sourcesContent":["\r\n\r\nclass FragmentShader {\r\n\r\n    constructor() {\r\n        this.file = [\r\n            // Float precision\r\n            \"precision mediump float;\",\r\n            // Fragment shader input variables\r\n            \"varying vec2 TexCoords;\",\r\n            \"varying vec3 Normal;\",\r\n            \"varying vec3 FragPosition;\",\r\n            \"varying vec3 DiffuseColor;\",\r\n            //\"varying vec4 FragPosLightSpace;\",\r\n            \"\",\r\n            // Shader inputs\r\n            \"uniform vec3 viewPosition;\",\r\n            //\"uniform vec3 lightPosition;\",\r\n            \"vec3 lightPosition = vec3(0.0, 100.0, 0.0);\",\r\n            //\"vec3 viewPosition = vec3(0.0, 0.0, 0.0);\",\r\n            \"vec3 lightColor = vec3(1.0, 1.0, 1.0);\",\r\n            \"\",\r\n            \"void main() {\",\r\n            \"\",\r\n            \"   vec3 viewDirection = normalize(viewPosition - FragPosition);\",\r\n            \"   vec3 lightDirection = normalize(lightPosition - FragPosition);\",\r\n            \"   vec3 reflectDirection = reflect(-lightDirection, Normal);\",\r\n            //\"   vec3 reflectDirection = normalize(2.0*dot(Normal,lightDirection)*Normal - lightDirection);\",\r\n            \"\",\r\n            // Ambient lighting\r\n            \"   float ambientStrength = 0.1;\",\r\n            \"   vec3 ambient = ambientStrength * lightColor;\",\r\n            \"\",\r\n            // Diffuse lighting\r\n            \"   float diff = max(dot(Normal, lightDirection), 0.0);\",\r\n            \"   vec3 diffuse = (diff * lightColor);\",\r\n            \"\",\r\n            // Specular lighting\r\n            \"   float specularStrength = 0.5;\",\r\n            \"   float shininess = 32.0;\",\r\n            \"   float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), shininess);\",\r\n            \"   vec3 specular = specularStrength * spec * lightColor;\",\r\n            \"\",\r\n            // Calculate the intensity decrement\r\n            \"   float dist = distance(lightPosition, FragPosition);\",\r\n            \"   float intensity = min(80.0 / dist, 1.0);\",\r\n            // Phong lighting model\r\n            \"   vec3 phong = (ambient + (diffuse + specular)) * DiffuseColor * intensity;\",\r\n            // Final shaded color (texture * lighting)\r\n            \"\tgl_FragColor = vec4 (phong, 1.0);\",\r\n            \"}\"\r\n        ].join(\"\\n\");\r\n    }\r\n}\r\n\r\nexport default FragmentShader;"]},"metadata":{},"sourceType":"module"}
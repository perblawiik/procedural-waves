{"ast":null,"code":"var _jsxFileName = \"G:\\\\DOKUMENT\\\\Projekt\\\\React\\\\BlueBox\\\\client\\\\src\\\\js\\\\Engine.js\";\nimport React, { Component } from 'react';\n\nclass Engine extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.startMainLoop();\n  }\n\n  componentWillUnmount() {\n    this.stopMainLoop();\n  }\n\n  Preload() {\n    // 2D Canvas for text display\n    this.canvas2D = document.getElementById('text-canvas');\n    this.ctx = this.canvas2D.getContext('2d');\n    this.ctx.font = \"20px Consolas\";\n    this.ctx.fillStyle = 'white'; // WebGL canvas\n\n    this.canvas = document.getElementById(\"gl-canvas\"); // Initialize the WebGL context\n\n    this.gl = this.canvas.getContext(\"webgl\"); // If WebGL isn't supported\n\n    if (!this.gl) {\n      console.log(\"WebGL is not supported\");\n      alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\n      return 0;\n    }\n\n    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height); // Set clear color to light blue, fully opaque\n\n    this.gl.clearColor(0.0, 0.40, 0.55, 1.0); // Enable depth so that triangles closer to the camera don't get overlapped by those further away\n\n    this.gl.enable(this.gl.DEPTH_TEST); // Only draw \"visible\" sides (memory saving)\n\n    this.gl.enable(this.gl.CULL_FACE);\n    this.gl.cullFace(this.gl.BACK);\n    this.gl.frontFace(this.gl.CCW);\n    this.mainShader = new Shader(this.canvas);\n    this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\n    this.camera.SetPosition(CAMERA_POSITION);\n    this.camera.SetRotation(CAMERA_ROTATION);\n    ClickBoxUI.SetCameraView(this.camera);\n    ClickBoxUI.SetCanvasSize(this.props.width, this.props.height); // Create a magenta cylinder\n\n    this.CreateGameObject({\n      shape: SHAPE.CYLINDER,\n      name: 'Magenta Cylinder',\n      scale: [10.0, 10.0, 10.0],\n      position: [-40.0, 20.0, 20.0],\n      color: [1.0, 0.0, 1.0]\n    }); // Create a green sphere\n\n    this.CreateGameObject({\n      shape: SHAPE.SPHERE,\n      name: 'Green Sphere',\n      scale: [10.0, 10.0, 10.0],\n      position: [40.0, 20.0, 20.0],\n      color: [0.0, 1.0, 0.0]\n    }); // Create a cyan cube\n\n    this.CreateGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Cyan Cube',\n      scale: [10.0, 10.0, 10.0],\n      position: [0.0, 10.0, 0.0],\n      color: [0.0, 1.0, 1.0]\n    }); // Create gray floor\n\n    this.CreateGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Floor',\n      scale: [200.0, 1.0, 200.0],\n      position: [0.0, 0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    }); // Create Walls\n\n    this.CreateGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 01',\n      scale: [1.0, 30.0, 200.0],\n      position: [-200.0, 30.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n    this.CreateGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 02',\n      scale: [1.0, 30.0, 200.0],\n      position: [200.0, 30.0, 0, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n    this.CreateGameObject({\n      shape: SHAPE.CUBE,\n      name: 'Wall 03',\n      scale: [200.0, 30.0, 1.0],\n      position: [0.0, 30.0, -200, 0],\n      color: [0.5, 0.5, 0.5]\n    });\n    this.CreateGameObject({\n      shape: SHAPE.PLANE,\n      name: 'Plane',\n      scale: [10.0, 10.0, 10.0],\n      position: [0.0, 10.0, 150.0],\n      color: [0.0, 0.0, 1.0]\n    });\n    /*\r\n    let mesh = new Mesh(this.mainShader);\r\n    mesh.CreateCube();\r\n    mesh.SetColor([1.0, 0.5, 0.5]);\r\n      let obj = new GameObject (\"test\", this.mainShader);\r\n    obj.AddMesh(mesh);\r\n    obj.SetPosition([0.0, 20.0, 100.0]);\r\n    obj.SetScale([10.0, 10.0, 10.0]);\r\n      let mesh2 = new Mesh(this.mainShader);\r\n    mesh2.CreateCube();\r\n    mesh2.SetColor([1.0, 0.5, 0.5]);\r\n      let obj2 = new GameObject (\"test2\", this.mainShader);\r\n    obj2.AddMesh(mesh2);\r\n    obj2.SetPosition([30.0, 20.0, 100.0]);\r\n    obj2.SetScale([10.0, 10.0, 10.0]);\r\n      obj.AddChild(obj2);\r\n      let update = this.state.listOfGameObjects;\r\n    update.push(obj);\r\n    update.push(obj2);\r\n    this.setState({\r\n        listOfGameObjects: update\r\n    });\r\n    */\n\n    this.SetUpEventListeners();\n  }\n\n  startMainLoop() {\n    // Initiate the main loop\n    this.animationId = window.requestAnimationFrame(this.MainLoop.bind(this));\n  }\n\n  stopMainLoop() {\n    window.cancelAnimationFrame(this.animationId);\n    this.animationId = null;\n  }\n\n  mainLoop() {\n    this.animationId = window.requestAnimationFrame(this.MainLoop.bind(this)); // Keeps track of time passed and delta time\n    // Clear screen 3D\n\n    this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT); // Clear screen 2D\n\n    this.ctx.clearRect(0, 25, this.props.width, this.props.height); // Draw objects\n    // Clear depth so that local coordinate axes is visible through models\n    // Draw local coordinate axes UI\n  }\n\n  render() {\n    const engine_container_style = {\n      display: 'flex',\n      flexDirection: 'column',\n      width: this.props.width + this.props.width / 2 + 20\n    };\n    return React.createElement(\"div\", {\n      className: \"Engine-container\",\n      style: engine_container_style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        width: this.props.width,\n        height: this.props.height\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"gl-canvas\",\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Your browser does not support HTML5\"), React.createElement(\"canvas\", {\n      id: \"text-canvas\",\n      width: this.props.width,\n      height: this.props.height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["G:\\DOKUMENT\\Projekt\\React\\BlueBox\\client\\src\\js\\Engine.js"],"names":["React","Component","Engine","constructor","props","componentDidMount","startMainLoop","componentWillUnmount","stopMainLoop","Preload","canvas2D","document","getElementById","ctx","getContext","font","fillStyle","canvas","gl","console","log","alert","viewport","width","height","clearColor","enable","DEPTH_TEST","CULL_FACE","cullFace","BACK","frontFace","CCW","mainShader","Shader","camera","Camera","cameraViewUniformLocation","SetPosition","CAMERA_POSITION","SetRotation","CAMERA_ROTATION","ClickBoxUI","SetCameraView","SetCanvasSize","CreateGameObject","shape","SHAPE","CYLINDER","name","scale","position","color","SPHERE","CUBE","PLANE","SetUpEventListeners","animationId","window","requestAnimationFrame","MainLoop","bind","cancelAnimationFrame","mainLoop","clear","DEPTH_BUFFER_BIT","COLOR_BUFFER_BIT","clearRect","render","engine_container_style","display","flexDirection"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Engine extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startMainLoop();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopMainLoop();\r\n    }\r\n\r\n    Preload() {\r\n\r\n        // 2D Canvas for text display\r\n        this.canvas2D = document.getElementById('text-canvas');\r\n        this.ctx = this.canvas2D.getContext('2d');\r\n        this.ctx.font = \"20px Consolas\";\r\n        this.ctx.fillStyle = 'white';\r\n\r\n        // WebGL canvas\r\n        this.canvas = document.getElementById(\"gl-canvas\");\r\n        // Initialize the WebGL context\r\n        this.gl = this.canvas.getContext(\"webgl\");\r\n\r\n        // If WebGL isn't supported\r\n        if (!this.gl) {\r\n            console.log(\"WebGL is not supported\");\r\n            alert(\"Unable to initialize WebGL. Your browser or machine may not support it.\");\r\n            return 0;\r\n        }\r\n\r\n        this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n        // Set clear color to light blue, fully opaque\r\n        this.gl.clearColor(0.0, 0.40, 0.55, 1.0);\r\n        // Enable depth so that triangles closer to the camera don't get overlapped by those further away\r\n        this.gl.enable(this.gl.DEPTH_TEST);\r\n        // Only draw \"visible\" sides (memory saving)\r\n        this.gl.enable(this.gl.CULL_FACE);\r\n        this.gl.cullFace(this.gl.BACK);\r\n        this.gl.frontFace(this.gl.CCW);\r\n\r\n        this.mainShader = new Shader(this.canvas);\r\n\r\n        this.camera = new Camera(this.gl, this.mainShader.cameraViewUniformLocation);\r\n        this.camera.SetPosition(CAMERA_POSITION);\r\n        this.camera.SetRotation(CAMERA_ROTATION);\r\n\r\n        ClickBoxUI.SetCameraView(this.camera);\r\n        ClickBoxUI.SetCanvasSize(this.props.width, this.props.height);\r\n\r\n\r\n        // Create a magenta cylinder\r\n        this.CreateGameObject({\r\n            shape: SHAPE.CYLINDER,\r\n            name: 'Magenta Cylinder',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [-40.0, 20.0, 20.0],\r\n            color: [1.0, 0.0, 1.0]\r\n        });\r\n\r\n        // Create a green sphere\r\n        this.CreateGameObject({\r\n            shape: SHAPE.SPHERE,\r\n            name: 'Green Sphere',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [40.0, 20.0, 20.0],\r\n            color: [0.0, 1.0, 0.0]\r\n        });\r\n\r\n        // Create a cyan cube\r\n        this.CreateGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Cyan Cube',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [0.0, 10.0, 0.0],\r\n            color: [0.0, 1.0, 1.0]\r\n        });\r\n\r\n        // Create gray floor\r\n        this.CreateGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Floor',\r\n            scale: [200.0, 1.0, 200.0],\r\n            position: [0.0, 0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n\r\n        // Create Walls\r\n        this.CreateGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 01',\r\n            scale: [1.0, 30.0, 200.0],\r\n            position: [-200.0, 30.0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n        this.CreateGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 02',\r\n            scale: [1.0, 30.0, 200.0],\r\n            position: [200.0, 30.0, 0, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n        this.CreateGameObject({\r\n            shape: SHAPE.CUBE,\r\n            name: 'Wall 03',\r\n            scale: [200.0, 30.0, 1.0],\r\n            position: [0.0, 30.0, -200, 0],\r\n            color: [0.5, 0.5, 0.5]\r\n        });\r\n\r\n        this.CreateGameObject({\r\n            shape: SHAPE.PLANE,\r\n            name: 'Plane',\r\n            scale: [10.0, 10.0, 10.0],\r\n            position: [0.0, 10.0, 150.0],\r\n            color: [0.0, 0.0, 1.0]\r\n        });\r\n        /*\r\n        let mesh = new Mesh(this.mainShader);\r\n        mesh.CreateCube();\r\n        mesh.SetColor([1.0, 0.5, 0.5]);\r\n\r\n        let obj = new GameObject (\"test\", this.mainShader);\r\n        obj.AddMesh(mesh);\r\n        obj.SetPosition([0.0, 20.0, 100.0]);\r\n        obj.SetScale([10.0, 10.0, 10.0]);\r\n\r\n        let mesh2 = new Mesh(this.mainShader);\r\n        mesh2.CreateCube();\r\n        mesh2.SetColor([1.0, 0.5, 0.5]);\r\n\r\n        let obj2 = new GameObject (\"test2\", this.mainShader);\r\n        obj2.AddMesh(mesh2);\r\n        obj2.SetPosition([30.0, 20.0, 100.0]);\r\n        obj2.SetScale([10.0, 10.0, 10.0]);\r\n\r\n        obj.AddChild(obj2);\r\n\r\n        let update = this.state.listOfGameObjects;\r\n        update.push(obj);\r\n        update.push(obj2);\r\n        this.setState({\r\n            listOfGameObjects: update\r\n        });\r\n        */\r\n\r\n        this.SetUpEventListeners();\r\n    }\r\n\r\n    startMainLoop() {\r\n        // Initiate the main loop\r\n        this.animationId = window.requestAnimationFrame( this.MainLoop.bind(this) );\r\n    }\r\n\r\n    stopMainLoop() {\r\n        window.cancelAnimationFrame( this.animationId );\r\n        this.animationId = null;\r\n    }\r\n\r\n    mainLoop() {\r\n        this.animationId = window.requestAnimationFrame( this.MainLoop.bind(this) );\r\n\r\n        // Keeps track of time passed and delta time\r\n\r\n        // Clear screen 3D\r\n        this.gl.clear(this.gl.DEPTH_BUFFER_BIT | this.gl.COLOR_BUFFER_BIT);\r\n        // Clear screen 2D\r\n        this.ctx.clearRect(0, 25, this.props.width, this.props.height);\r\n\r\n        // Draw objects\r\n\r\n        // Clear depth so that local coordinate axes is visible through models\r\n\r\n        // Draw local coordinate axes UI\r\n    }\r\n\r\n    render() {\r\n        const engine_container_style = {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            width: this.props.width+this.props.width/2+20\r\n        };\r\n\r\n        return (\r\n            <div className=\"Engine-container\" style={engine_container_style}>\r\n                <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                    <div style={{width: this.props.width, height: this.props.height}}>\r\n                        <canvas id='gl-canvas' width={this.props.width} height={this.props.height}>\r\n                            Your browser does not support HTML5\r\n                        </canvas>\r\n                        <canvas id=\"text-canvas\" width={this.props.width} height={this.props.height}>\r\n                        </canvas>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Engine;"]},"metadata":{},"sourceType":"module"}